"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6601],{76811:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var i=t(74848),o=t(28453);t(64428);const s={sidebar_class_name:"node-only"},a="Google Vertex AI Matching Engine",r={id:"integrations/vectorstores/googlevertexai",title:"Google Vertex AI Matching Engine",description:"Only available on Node.js.",source:"@site/docs/integrations/vectorstores/googlevertexai.mdx",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/googlevertexai",permalink:"/docs/integrations/vectorstores/googlevertexai",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/vectorstores/googlevertexai.mdx",tags:[],version:"current",frontMatter:{sidebar_class_name:"node-only"},sidebar:"integrations",previous:{title:"Faiss",permalink:"/docs/integrations/vectorstores/faiss"},next:{title:"SAP HANA Cloud Vector Engine",permalink:"/docs/integrations/vectorstores/hanavector"}},c={},l=[{value:"Setup",id:"setup",level:2},{value:"Usage",id:"usage",level:2},{value:"Initializing the engine",id:"initializing-the-engine",level:3},{value:"Adding documents",id:"adding-documents",level:3},{value:"Querying documents",id:"querying-documents",level:3},{value:"Querying documents with a filter / restriction",id:"querying-documents-with-a-filter--restriction",level:3},{value:"Deleting documents",id:"deleting-documents",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"google-vertex-ai-matching-engine",children:"Google Vertex AI Matching Engine"}),"\n",(0,i.jsx)(n.admonition,{title:"Compatibility",type:"tip",children:(0,i.jsx)(n.p,{children:"Only available on Node.js."})}),"\n",(0,i.jsx)(n.p,{children:'The Google Vertex AI Matching Engine "provides the industry\'s leading high-scale\nlow latency vector database. These vector databases are commonly referred\nto as vector similarity-matching or an approximate nearest neighbor (ANN) service."'}),"\n",(0,i.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsxs)(n.p,{children:["This module expects an endpoint and deployed index already created as the\ncreation time takes close to one hour. To learn more, see the LangChain python\ndocumentation ",(0,i.jsx)(n.a,{href:"https://python.langchain.com/docs/integrations/vectorstores/matchingengine#create-index-and-deploy-it-to-an-endpoint",children:"Create Index and deploy it to an Endpoint"}),"."]})}),"\n",(0,i.jsx)(n.p,{children:"Before running this code, you should make sure the Vertex AI API is\nenabled for the relevant project in your Google Cloud dashboard and that you've authenticated to\nGoogle Cloud using one of these methods:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["You are logged into an account (using ",(0,i.jsx)(n.code,{children:"gcloud auth application-default login"}),")\npermitted to that project."]}),"\n",(0,i.jsx)(n.li,{children:"You are running on a machine using a service account that is permitted\nto the project."}),"\n",(0,i.jsxs)(n.li,{children:["You have downloaded the credentials for a service account that is permitted\nto the project and set the ",(0,i.jsx)(n.code,{children:"GOOGLE_APPLICATION_CREDENTIALS"})," environment\nvariable to the path of this file."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Install the authentication library with:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install google-auth-library\n"})}),"\n",(0,i.jsx)(n.p,{children:"The Matching Engine does not store the actual document contents, only embeddings. Therefore, you'll\nneed a docstore. The below example uses Google Cloud Storage, which requires the following:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @google-cloud/storage\n"})}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(n.h3,{id:"initializing-the-engine",children:"Initializing the engine"}),"\n",(0,i.jsxs)(n.p,{children:["When creating the ",(0,i.jsx)(n.code,{children:"MatchingEngine"})," object, you'll need some information about\nthe matching engine configuration. You can get this information from the Cloud Console\nfor Matching Engine:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The id for the Index"}),"\n",(0,i.jsx)(n.li,{children:"The id for the Index Endpoint"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["You will also need a document store. While an ",(0,i.jsx)(n.code,{children:"InMemoryDocstore"})," is ok for\ninitial testing, you will want to use something like a\n",(0,i.jsx)(n.a,{href:"https://v02.api.js.langchain.com/classes/langchain_stores_doc_gcs.GoogleCloudStorageDocstore.html",children:"GoogleCloudStorageDocstore"})," to store it more permanently."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import { MatchingEngine } from "langchain/vectorstores/googlevertexai";\nimport { Document } from "langchain/document";\nimport { SyntheticEmbeddings } from "langchain/embeddings/fake";\nimport { GoogleCloudStorageDocstore } from "langchain/stores/doc/gcs";\n\nconst embeddings = new SyntheticEmbeddings({\n  vectorSize: Number.parseInt(\n    process.env.SYNTHETIC_EMBEDDINGS_VECTOR_SIZE ?? "768",\n    10\n  ),\n});\n\nconst store = new GoogleCloudStorageDocstore({\n  bucket: process.env.GOOGLE_CLOUD_STORAGE_BUCKET!,\n});\n\nconst config = {\n  index: process.env.GOOGLE_VERTEXAI_MATCHINGENGINE_INDEX!,\n  indexEndpoint: process.env.GOOGLE_VERTEXAI_MATCHINGENGINE_INDEXENDPOINT!,\n  apiVersion: "v1beta1",\n  docstore: store,\n};\n\nconst engine = new MatchingEngine(embeddings, config);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"adding-documents",children:"Adding documents"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const doc = new Document({ pageContent: "this" });\nawait engine.addDocuments([doc]);\n'})}),"\n",(0,i.jsx)(n.p,{children:'Any metadata in a document is converted into Matching Engine "allow list" values\nthat can be used to filter during a query.'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const documents = [\n  new Document({\n    pageContent: "this apple",\n    metadata: {\n      color: "red",\n      category: "edible",\n    },\n  }),\n  new Document({\n    pageContent: "this blueberry",\n    metadata: {\n      color: "blue",\n      category: "edible",\n    },\n  }),\n  new Document({\n    pageContent: "this firetruck",\n    metadata: {\n      color: "red",\n      category: "machine",\n    },\n  }),\n];\n\n// Add all our documents\nawait engine.addDocuments(documents);\n'})}),"\n",(0,i.jsx)(n.p,{children:'The documents are assumed to have an "id" parameter available as well. If this\nis not set, then an ID will be assigned and returned as part of the Document.'}),"\n",(0,i.jsx)(n.h3,{id:"querying-documents",children:"Querying documents"}),"\n",(0,i.jsx)(n.p,{children:"Doing a straightforward k-nearest-neighbor search which returns all results\nis done using any of the standard methods:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const results = await engine.similaritySearch("this");\n'})}),"\n",(0,i.jsx)(n.h3,{id:"querying-documents-with-a-filter--restriction",children:"Querying documents with a filter / restriction"}),"\n",(0,i.jsx)(n.p,{children:"We can limit what documents are returned based on the metadata that was\nset for the document. So if we just wanted to limit the results to those\nwith a red color, we can do:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import { Restriction } from `langchain/vectorstores/googlevertexai`;\n\nconst redFilter: Restriction[] = [\n  {\n    namespace: "color",\n    allowList: ["red"],\n  },\n];\nconst redResults = await engine.similaritySearch("this", 4, redFilter);\n'})}),"\n",(0,i.jsx)(n.p,{children:"If we wanted to do something more complicated, like things that are red,\nbut not edible:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const filter: Restriction[] = [\n  {\n    namespace: "color",\n    allowList: ["red"],\n  },\n  {\n    namespace: "category",\n    denyList: ["edible"],\n  },\n];\nconst results = await engine.similaritySearch("this", 4, filter);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"deleting-documents",children:"Deleting documents"}),"\n",(0,i.jsx)(n.p,{children:"Deleting documents are done using ID."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import { IdDocument } from `langchain/vectorstores/googlevertexai`;\n\nconst oldResults: IdDocument[] = await engine.similaritySearch("this", 10);\nconst oldIds = oldResults.map( doc => doc.id! );\nawait engine.delete({ids: oldIds});\n'})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);
(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3779],{74165:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>d,metadata:()=>h,toc:()=>A});var s=t(74848),a=t(28453),r=t(64428),i=t(78847),o=t(44674),c=t.n(o);const d={sidebar_class_name:"node-only"},l="Astra DB",h={id:"integrations/vectorstores/astradb",title:"Astra DB",description:"Only available on Node.js.",source:"@site/docs/integrations/vectorstores/astradb.mdx",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/astradb",permalink:"/docs/integrations/vectorstores/astradb",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/vectorstores/astradb.mdx",tags:[],version:"current",frontMatter:{sidebar_class_name:"node-only"},sidebar:"integrations",previous:{title:"AnalyticDB",permalink:"/docs/integrations/vectorstores/analyticdb"},next:{title:"Azure AI Search",permalink:"/docs/integrations/vectorstores/azure_aisearch"}},p={},A=[{value:"Setup",id:"setup",level:2},...i.toc,{value:"Indexing docs",id:"indexing-docs",level:2},{value:"Vector Types",id:"vector-types",level:2}];function m(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"astra-db",children:"Astra DB"}),"\n",(0,s.jsx)(n.admonition,{title:"Compatibility",type:"tip",children:(0,s.jsx)(n.p,{children:"Only available on Node.js."})}),"\n",(0,s.jsxs)(n.p,{children:["DataStax ",(0,s.jsx)(n.a,{href:"https://astra.datastax.com/register",children:"Astra DB"})," is a serverless vector-capable database built on ",(0,s.jsx)(n.a,{href:"https://cassandra.apache.org/_/index.html",children:"Apache Cassandra"})," and made conveniently available through an easy-to-use JSON API."]}),"\n",(0,s.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Create an ",(0,s.jsx)(n.a,{href:"https://astra.datastax.com/register",children:"Astra DB account"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Create a ",(0,s.jsx)(n.a,{href:"https://astra.datastax.com/createDatabase",children:"vector enabled database"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Grab your ",(0,s.jsx)(n.code,{children:"API Endpoint"})," and ",(0,s.jsx)(n.code,{children:"Token"})," from the Database Details."]}),"\n",(0,s.jsx)(n.li,{children:"Set up the following env vars:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"export ASTRA_DB_APPLICATION_TOKEN=YOUR_ASTRA_DB_APPLICATION_TOKEN_HERE\nexport ASTRA_DB_ENDPOINT=YOUR_ASTRA_DB_ENDPOINT_HERE\nexport ASTRA_DB_COLLECTION=YOUR_ASTRA_DB_COLLECTION_HERE\nexport OPENAI_API_KEY=YOUR_OPENAI_API_KEY_HERE\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Where ",(0,s.jsx)(n.code,{children:"ASTRA_DB_COLLECTION"})," is the desired name of your collection"]}),"\n",(0,s.jsxs)(n.ol,{start:"6",children:["\n",(0,s.jsx)(n.li,{children:"Install the Astra TS Client & the LangChain community package"}),"\n"]}),"\n","\n",(0,s.jsx)(i.default,{}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai @datastax/astra-db-ts @langchain/community\n"})}),"\n",(0,s.jsx)(n.h2,{id:"indexing-docs",children:"Indexing docs"}),"\n","\n",(0,s.jsx)(r.A,{language:"typescript",children:c()}),"\n",(0,s.jsx)(n.h2,{id:"vector-types",children:"Vector Types"}),"\n",(0,s.jsxs)(n.p,{children:["Astra DB supports ",(0,s.jsx)(n.code,{children:"cosine"})," (the default), ",(0,s.jsx)(n.code,{children:"dot_product"}),", and ",(0,s.jsx)(n.code,{children:"euclidean"})," similarity search; this is defined when the\nvector store is first created as part of the ",(0,s.jsx)(n.code,{children:"CreateCollectionOptions"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'  vector: {\n      dimension: number;\n      metric?: "cosine" | "euclidean" | "dot_product";\n  };\n'})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},44674:e=>{e.exports={content:'import { OpenAIEmbeddings } from "@langchain/openai";\nimport {\n  AstraDBVectorStore,\n  AstraLibArgs,\n} from "@langchain/community/vectorstores/astradb";\n\nconst astraConfig: AstraLibArgs = {\n  token: process.env.ASTRA_DB_APPLICATION_TOKEN as string,\n  endpoint: process.env.ASTRA_DB_ENDPOINT as string,\n  collection: process.env.ASTRA_DB_COLLECTION ?? "langchain_test",\n  collectionOptions: {\n    vector: {\n      dimension: 1536,\n      metric: "cosine",\n    },\n  },\n};\n\nconst vectorStore = await AstraDBVectorStore.fromTexts(\n  [\n    "AstraDB is built on Apache Cassandra",\n    "AstraDB is a NoSQL DB",\n    "AstraDB supports vector search",\n  ],\n  [{ foo: "foo" }, { foo: "bar" }, { foo: "baz" }],\n  new OpenAIEmbeddings(),\n  astraConfig\n);\n\n// Querying docs:\nconst results = await vectorStore.similaritySearch("Cassandra", 1);\n\n// or filtered query:\nconst filteredQueryResults = await vectorStore.similaritySearch("A", 1, {\n  foo: "bar",\n});\n',imports:[{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"},{local:"AstraDBVectorStore",imported:"AstraDBVectorStore",source:"@langchain/community/vectorstores/astradb"},{local:"AstraLibArgs",imported:"AstraLibArgs",source:"@langchain/community/vectorstores/astradb"}]}}}]);
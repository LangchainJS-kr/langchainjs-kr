(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1020,65],{68427:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>g,contentTitle:()=>m,default:()=>u,frontMatter:()=>p,metadata:()=>h,toc:()=>x});var o=t(74848),s=t(28453),r=t(78847),i=t(64428),a=t(97051),c=t.n(a),d=t(23715),l=t.n(d);const p={sidebar_class_name:"node-only"},m="Convex",h={id:"integrations/vectorstores/convex",title:"Convex",description:"LangChain.js supports Convex as a vector store, and supports the standard similarity search.",source:"@site/docs/integrations/vectorstores/convex.mdx",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/convex",permalink:"/docs/integrations/vectorstores/convex",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/vectorstores/convex.mdx",tags:[],version:"current",frontMatter:{sidebar_class_name:"node-only"},sidebar:"integrations",previous:{title:"Cloudflare Vectorize",permalink:"/docs/integrations/vectorstores/cloudflare_vectorize"},next:{title:"Couchbase",permalink:"/docs/integrations/vectorstores/couchbase"}},g={},x=[{value:"Setup",id:"setup",level:2},{value:"Create project",id:"create-project",level:3},{value:"Add database accessors",id:"add-database-accessors",level:3},{value:"Configure your schema",id:"configure-your-schema",level:3},{value:"Usage",id:"usage",level:2},...r.toc,{value:"Ingestion",id:"ingestion",level:3},{value:"Search",id:"search",level:3}];function v(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"convex",children:"Convex"}),"\n",(0,o.jsxs)(n.p,{children:["LangChain.js supports ",(0,o.jsx)(n.a,{href:"https://convex.dev/",children:"Convex"})," as a ",(0,o.jsx)(n.a,{href:"https://docs.convex.dev/vector-search",children:"vector store"}),", and supports the standard similarity search."]}),"\n",(0,o.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,o.jsx)(n.h3,{id:"create-project",children:"Create project"}),"\n",(0,o.jsxs)(n.p,{children:["Get a working ",(0,o.jsx)(n.a,{href:"https://docs.convex.dev/",children:"Convex"})," project set up, for example by using:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npm create convex@latest\n"})}),"\n",(0,o.jsx)(n.h3,{id:"add-database-accessors",children:"Add database accessors"}),"\n",(0,o.jsxs)(n.p,{children:["Add query and mutation helpers to ",(0,o.jsx)(n.code,{children:"convex/langchain/db.ts"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="convex/langchain/db.ts"',children:'export * from "langchain/util/convex";\n'})}),"\n",(0,o.jsx)(n.h3,{id:"configure-your-schema",children:"Configure your schema"}),"\n",(0,o.jsx)(n.p,{children:"Set up your schema (for vector indexing):"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="convex/schema.ts"',children:'import { defineSchema, defineTable } from "convex/server";\nimport { v } from "convex/values";\n\nexport default defineSchema({\n  documents: defineTable({\n    embedding: v.array(v.number()),\n    text: v.string(),\n    metadata: v.any(),\n  }).vectorIndex("byEmbedding", {\n    vectorField: "embedding",\n    dimensions: 1536,\n  }),\n});\n'})}),"\n",(0,o.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n","\n",(0,o.jsx)(r.default,{}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai @langchain/community\n"})}),"\n",(0,o.jsx)(n.h3,{id:"ingestion",children:"Ingestion"}),"\n","\n",(0,o.jsx)(i.A,{language:"typescript",title:"convex/myActions.ts",children:c()}),"\n",(0,o.jsx)(n.h3,{id:"search",children:"Search"}),"\n","\n",(0,o.jsx)(i.A,{language:"typescript",title:"convex/myActions.ts",children:l()})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(v,{...e})}):v(e)}},78847:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var o=t(74848),s=t(28453);const r={},i=void 0,a={id:"mdx_components/integration_install_tooltip",title:"integration_install_tooltip",description:"See this section for general instructions on installing integration packages.",source:"@site/docs/mdx_components/integration_install_tooltip.mdx",sourceDirName:"mdx_components",slug:"/mdx_components/integration_install_tooltip",permalink:"/docs/mdx_components/integration_install_tooltip",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/mdx_components/integration_install_tooltip.mdx",tags:[],version:"current",frontMatter:{}},c={},d=[];function l(e){const n={a:"a",admonition:"admonition",p:"p",...(0,s.R)(),...e.components};return(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["See ",(0,o.jsx)(n.a,{href:"/docs/how_to/installation#installing-integration-packages",children:"this section for general instructions on installing integration packages"}),"."]})})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},97051:e=>{e.exports={content:'"use node";\n\nimport { ConvexVectorStore } from "@langchain/community/vectorstores/convex";\nimport { OpenAIEmbeddings } from "@langchain/openai";\nimport { action } from "./_generated/server.js";\n\nexport const ingest = action({\n  args: {},\n  handler: async (ctx) => {\n    await ConvexVectorStore.fromTexts(\n      ["Hello world", "Bye bye", "What\'s this?"],\n      [{ prop: 2 }, { prop: 1 }, { prop: 3 }],\n      new OpenAIEmbeddings(),\n      { ctx }\n    );\n  },\n});\n',imports:[{local:"ConvexVectorStore",imported:"ConvexVectorStore",source:"@langchain/community/vectorstores/convex"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"}]}},23715:e=>{e.exports={content:'"use node";\n\nimport { ConvexVectorStore } from "@langchain/community/vectorstores/convex";\nimport { OpenAIEmbeddings } from "@langchain/openai";\nimport { v } from "convex/values";\nimport { action } from "./_generated/server.js";\n\nexport const search = action({\n  args: {\n    query: v.string(),\n  },\n  handler: async (ctx, args) => {\n    const vectorStore = new ConvexVectorStore(new OpenAIEmbeddings(), { ctx });\n\n    const resultOne = await vectorStore.similaritySearch(args.query, 1);\n    console.log(resultOne);\n  },\n});\n',imports:[{local:"ConvexVectorStore",imported:"ConvexVectorStore",source:"@langchain/community/vectorstores/convex"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"}]}}}]);
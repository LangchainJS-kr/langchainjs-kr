(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3912,65],{98162:(e,o,t)=>{"use strict";t.r(o),t.d(o,{assets:()=>p,contentTitle:()=>u,default:()=>h,frontMatter:()=>c,metadata:()=>g,toc:()=>m});var n=t(74848),s=t(28453),a=t(64428),r=t(78847),i=t(33827),l=t.n(i);const c={hide_table_of_contents:!0},u="Google Routes Tool",g={id:"integrations/tools/google_routes",title:"Google Routes Tool",description:"The Google Routes Tool allows your agent to utilize the Google Routes API in order to find a route between",source:"@site/docs/integrations/tools/google_routes.mdx",sourceDirName:"integrations/tools",slug:"/integrations/tools/google_routes",permalink:"/docs/integrations/tools/google_routes",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/tools/google_routes.mdx",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"integrations",previous:{title:"Google Places Tool",permalink:"/docs/integrations/tools/google_places"},next:{title:"Agent with AWS Lambda",permalink:"/docs/integrations/tools/lambda_agent"}},p={},m=[{value:"Setup",id:"setup",level:2},{value:"Usage",id:"usage",level:2},...r.toc];function d(e){const o={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.h1,{id:"google-routes-tool",children:"Google Routes Tool"}),"\n",(0,n.jsx)(o.p,{children:"The Google Routes Tool allows your agent to utilize the Google Routes API in order to find a route between\ntwo or more destinations. You can get a route by walk, transit, car, motorcycle and bicycle."}),"\n",(0,n.jsx)(o.h2,{id:"setup",children:"Setup"}),"\n",(0,n.jsxs)(o.p,{children:["You will need to get an API key from ",(0,n.jsx)(o.a,{href:"https://developers.google.com/maps/documentation/places/web-service/overview",children:"Google here"}),"\nand ",(0,n.jsx)(o.a,{href:"https://console.cloud.google.com/apis/library/routes.googleapis.com",children:"enable the Routes API"}),". Then, set your API key\nas ",(0,n.jsx)(o.code,{children:"process.env.GOOGLE_ROUTES_API_KEY"})," or pass it in as an ",(0,n.jsx)(o.code,{children:"apiKey"})," constructor argument."]}),"\n",(0,n.jsx)(o.h2,{id:"usage",children:"Usage"}),"\n","\n",(0,n.jsx)(r.default,{}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai @langchain/community\n"})}),"\n","\n",(0,n.jsx)(a.A,{language:"typescript",children:l()})]})}function h(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},78847:(e,o,t)=>{"use strict";t.r(o),t.d(o,{assets:()=>l,contentTitle:()=>r,default:()=>g,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var n=t(74848),s=t(28453);const a={},r=void 0,i={id:"mdx_components/integration_install_tooltip",title:"integration_install_tooltip",description:"See this section for general instructions on installing integration packages.",source:"@site/docs/mdx_components/integration_install_tooltip.mdx",sourceDirName:"mdx_components",slug:"/mdx_components/integration_install_tooltip",permalink:"/docs/mdx_components/integration_install_tooltip",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/mdx_components/integration_install_tooltip.mdx",tags:[],version:"current",frontMatter:{}},l={},c=[];function u(e){const o={a:"a",admonition:"admonition",p:"p",...(0,s.R)(),...e.components};return(0,n.jsx)(o.admonition,{type:"tip",children:(0,n.jsxs)(o.p,{children:["See ",(0,n.jsx)(o.a,{href:"/docs/how_to/installation#installing-integration-packages",children:"this section for general instructions on installing integration packages"}),"."]})})}function g(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},33827:e=>{e.exports={content:"import { GoogleRoutesAPI } from \"@langchain/community/tools/google_routes\";\nimport { ChatPromptTemplate } from \"@langchain/core/prompts\";\nimport { ChatOpenAI } from \"@langchain/openai\";\nimport { AgentExecutor, createToolCallingAgent } from \"langchain/agents\";\n\nexport async function run() {\n  const tools = [new GoogleRoutesAPI()];\n\n  const llm = new ChatOpenAI({\n    model: \"gpt-3.5-turbo-0125\",\n  });\n\n  const prompt = ChatPromptTemplate.fromMessages([\n    [\"system\", \"You are a helpful assistant\"],\n    [\"placeholder\", \"{chat_history}\"],\n    [\"human\", \"{input}\"],\n    [\"placeholder\", \"{agent_scratchpad}\"],\n  ]);\n\n  const agent = await createToolCallingAgent({\n    llm,\n    tools,\n    prompt,\n  });\n\n  const agentExecutor = new AgentExecutor({\n    agent,\n    tools,\n  });\n\n  const result = await agentExecutor.invoke({\n    input: \"How to go from the Eiffel Tower to the Louvre Museum by transit?\",\n  });\n\n  console.log(result);\n\n  /* {\n    input: 'How to go from the Eiffel Tower to the Louvre Museum by transit?',\n    output: 'To travel from the Eiffel Tower to the Louvre Museum by transit, here is the route information:\\n' +\n      '\\n' +\n      '- Departure: Eiffel Tower\\n' +\n      '- Arrival: Louvre Museum\\n' +\n      '- Distance: 4.1 km\\n' +\n      '- Duration: 18 minutes\\n' +\n      '- Transit Fare: \u20ac2.15\\n' +\n      '\\n' +\n      'Travel Instructions:\\n' +\n      \"1. Walk to Pont d'I\xe9na\\n\" +\n      '2. Take bus 72 towards Gare de Lyon - Maison de La RATP\\n' +\n      '3. Walk to your destination\\n' +\n      '\\n' +\n      'Departure Time: 22:03\\n' +\n      'Arrival Time: 22:15\\n' +\n      '\\n' +\n      'Please follow these instructions to reach the Louvre Museum from the Eiffel Tower.'\n  } */\n}\n",imports:[{local:"GoogleRoutesAPI",imported:"GoogleRoutesAPI",source:"@langchain/community/tools/google_routes"},{local:"ChatPromptTemplate",imported:"ChatPromptTemplate",source:"@langchain/core/prompts"},{local:"ChatOpenAI",imported:"ChatOpenAI",source:"@langchain/openai"},{local:"AgentExecutor",imported:"AgentExecutor",source:"langchain/agents"},{local:"createToolCallingAgent",imported:"createToolCallingAgent",source:"langchain/agents"}]}}}]);
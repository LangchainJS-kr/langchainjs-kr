(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2764,65],{70951:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>b,contentTitle:()=>g,default:()=>w,frontMatter:()=>h,metadata:()=>u,toc:()=>x});var o=t(74848),a=t(28453),r=t(64428),s=t(78847),i=t(24189),c=t.n(i),d=t(41854),l=t.n(d),m=t(20925),p=t.n(m);const h={sidebar_class_name:"node-only"},g="LanceDB",u={id:"integrations/vectorstores/lancedb",title:"LanceDB",description:"LanceDB is an embedded vector database for AI applications. It is open source and distributed with an Apache-2.0 license.",source:"@site/docs/integrations/vectorstores/lancedb.mdx",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/lancedb",permalink:"/docs/integrations/vectorstores/lancedb",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/vectorstores/lancedb.mdx",tags:[],version:"current",frontMatter:{sidebar_class_name:"node-only"},sidebar:"integrations",previous:{title:"HNSWLib",permalink:"/docs/integrations/vectorstores/hnswlib"},next:{title:"Milvus",permalink:"/docs/integrations/vectorstores/milvus"}},b={},x=[{value:"Setup",id:"setup",level:2},...s.toc,{value:"Usage",id:"usage",level:2},{value:"Create a new index from texts",id:"create-a-new-index-from-texts",level:3},{value:"Create a new index from a loader",id:"create-a-new-index-from-a-loader",level:3},{value:"Open an existing dataset",id:"open-an-existing-dataset",level:3}];function f(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"lancedb",children:"LanceDB"}),"\n",(0,o.jsx)(n.p,{children:"LanceDB is an embedded vector database for AI applications. It is open source and distributed with an Apache-2.0 license."}),"\n",(0,o.jsx)(n.p,{children:"LanceDB datasets are persisted to disk and can be shared between Node.js and Python."}),"\n",(0,o.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,o.jsxs)(n.p,{children:["Install the ",(0,o.jsx)(n.a,{href:"https://github.com/lancedb/lancedb",children:"LanceDB"})," ",(0,o.jsx)(n.a,{href:"https://www.npmjs.com/package/vectordb",children:"Node.js bindings"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install -S vectordb\n"})}),"\n","\n",(0,o.jsx)(s.default,{}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai @langchain/community\n"})}),"\n",(0,o.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(n.h3,{id:"create-a-new-index-from-texts",children:"Create a new index from texts"}),"\n","\n",(0,o.jsx)(r.A,{language:"typescript",children:c()}),"\n",(0,o.jsx)(n.h3,{id:"create-a-new-index-from-a-loader",children:"Create a new index from a loader"}),"\n","\n",(0,o.jsx)(r.A,{language:"typescript",children:l()}),"\n",(0,o.jsx)(n.h3,{id:"open-an-existing-dataset",children:"Open an existing dataset"}),"\n","\n",(0,o.jsx)(r.A,{language:"typescript",children:p()})]})}function w(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(f,{...e})}):f(e)}},78847:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var o=t(74848),a=t(28453);const r={},s=void 0,i={id:"mdx_components/integration_install_tooltip",title:"integration_install_tooltip",description:"See this section for general instructions on installing integration packages.",source:"@site/docs/mdx_components/integration_install_tooltip.mdx",sourceDirName:"mdx_components",slug:"/mdx_components/integration_install_tooltip",permalink:"/docs/mdx_components/integration_install_tooltip",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/mdx_components/integration_install_tooltip.mdx",tags:[],version:"current",frontMatter:{}},c={},d=[];function l(e){const n={a:"a",admonition:"admonition",p:"p",...(0,a.R)(),...e.components};return(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["See ",(0,o.jsx)(n.a,{href:"/docs/how_to/installation#installing-integration-packages",children:"this section for general instructions on installing integration packages"}),"."]})})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},41854:e=>{e.exports={content:'import { LanceDB } from "@langchain/community/vectorstores/lancedb";\nimport { OpenAIEmbeddings } from "@langchain/openai";\nimport { TextLoader } from "langchain/document_loaders/fs/text";\nimport fs from "node:fs/promises";\nimport path from "node:path";\nimport os from "node:os";\nimport { connect } from "vectordb";\n\n// Create docs with a loader\nconst loader = new TextLoader("src/document_loaders/example_data/example.txt");\nconst docs = await loader.load();\n\nexport const run = async () => {\n  const dir = await fs.mkdtemp(path.join(os.tmpdir(), "lancedb-"));\n  const db = await connect(dir);\n  const table = await db.createTable("vectors", [\n    { vector: Array(1536), text: "sample", source: "a" },\n  ]);\n\n  const vectorStore = await LanceDB.fromDocuments(\n    docs,\n    new OpenAIEmbeddings(),\n    { table }\n  );\n\n  const resultOne = await vectorStore.similaritySearch("hello world", 1);\n  console.log(resultOne);\n\n  // [\n  //   Document {\n  //     pageContent: \'Foo\\nBar\\nBaz\\n\\n\',\n  //     metadata: { source: \'src/document_loaders/example_data/example.txt\' }\n  //   }\n  // ]\n};\n',imports:[{local:"LanceDB",imported:"LanceDB",source:"@langchain/community/vectorstores/lancedb"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"},{local:"TextLoader",imported:"TextLoader",source:"langchain/document_loaders/fs/text"}]}},24189:e=>{e.exports={content:'import { LanceDB } from "@langchain/community/vectorstores/lancedb";\nimport { OpenAIEmbeddings } from "@langchain/openai";\nimport { connect } from "vectordb";\nimport * as fs from "node:fs/promises";\nimport * as path from "node:path";\nimport os from "node:os";\n\nexport const run = async () => {\n  const dir = await fs.mkdtemp(path.join(os.tmpdir(), "lancedb-"));\n  const db = await connect(dir);\n  const table = await db.createTable("vectors", [\n    { vector: Array(1536), text: "sample", id: 1 },\n  ]);\n\n  const vectorStore = await LanceDB.fromTexts(\n    ["Hello world", "Bye bye", "hello nice world"],\n    [{ id: 2 }, { id: 1 }, { id: 3 }],\n    new OpenAIEmbeddings(),\n    { table }\n  );\n\n  const resultOne = await vectorStore.similaritySearch("hello world", 1);\n  console.log(resultOne);\n  // [ Document { pageContent: \'hello nice world\', metadata: { id: 3 } } ]\n};\n',imports:[{local:"LanceDB",imported:"LanceDB",source:"@langchain/community/vectorstores/lancedb"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"}]}},20925:e=>{e.exports={content:'import { LanceDB } from "@langchain/community/vectorstores/lancedb";\nimport { OpenAIEmbeddings } from "@langchain/openai";\nimport { connect } from "vectordb";\nimport * as fs from "node:fs/promises";\nimport * as path from "node:path";\nimport os from "node:os";\n\n//\n//  You can open a LanceDB dataset created elsewhere, such as LangChain Python, by opening\n//     an existing table\n//\nexport const run = async () => {\n  const uri = await createdTestDb();\n  const db = await connect(uri);\n  const table = await db.openTable("vectors");\n\n  const vectorStore = new LanceDB(new OpenAIEmbeddings(), { table });\n\n  const resultOne = await vectorStore.similaritySearch("hello world", 1);\n  console.log(resultOne);\n  // [ Document { pageContent: \'Hello world\', metadata: { id: 1 } } ]\n};\n\nasync function createdTestDb(): Promise<string> {\n  const dir = await fs.mkdtemp(path.join(os.tmpdir(), "lancedb-"));\n  const db = await connect(dir);\n  await db.createTable("vectors", [\n    { vector: Array(1536), text: "Hello world", id: 1 },\n    { vector: Array(1536), text: "Bye bye", id: 2 },\n    { vector: Array(1536), text: "hello nice world", id: 3 },\n  ]);\n  return dir;\n}\n',imports:[{local:"LanceDB",imported:"LanceDB",source:"@langchain/community/vectorstores/lancedb"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"}]}}}]);
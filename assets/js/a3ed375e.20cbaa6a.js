(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4940],{48312:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>v,frontMatter:()=>g,metadata:()=>u,toc:()=>h});var o=t(74848),a=t(28453),r=t(64428),i=t(12380),s=t.n(i),c=t(78847),m=t(61813),d=t.n(m);const g={},l="OpenAI functions metadata tagger",u={id:"integrations/document_transformers/openai_metadata_tagger",title:"OpenAI functions metadata tagger",description:"It can often be useful to tag ingested documents with structured metadata, such as the title, tone, or length of a document, to allow for more targeted similarity search later. However, for large numbers of documents, performing this labelling process manually can be tedious.",source:"@site/docs/integrations/document_transformers/openai_metadata_tagger.mdx",sourceDirName:"integrations/document_transformers",slug:"/integrations/document_transformers/openai_metadata_tagger",permalink:"/docs/integrations/document_transformers/openai_metadata_tagger",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/document_transformers/openai_metadata_tagger.mdx",tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"@mozilla/readability",permalink:"/docs/integrations/document_transformers/mozilla_readability"},next:{title:"Vector stores",permalink:"/docs/integrations/vectorstores"}},p={},h=[{value:"Usage",id:"usage",level:3},...c.toc,{value:"Customization",id:"customization",level:3}];function f(e){const n={code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"openai-functions-metadata-tagger",children:"OpenAI functions metadata tagger"}),"\n",(0,o.jsx)(n.p,{children:"It can often be useful to tag ingested documents with structured metadata, such as the title, tone, or length of a document, to allow for more targeted similarity search later. However, for large numbers of documents, performing this labelling process manually can be tedious."}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"MetadataTagger"})," document transformer automates this process by extracting metadata from each provided document according to a provided schema. It uses a configurable OpenAI Functions-powered chain under the hood, so if you pass a custom LLM instance, it must be an OpenAI model with functions support."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Note:"})," This document transformer works best with complete documents, so it's best to run it first with whole documents before doing any other splitting or processing!"]}),"\n",(0,o.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(n.p,{children:"For example, let's say you wanted to index a set of movie reviews. You could initialize the document transformer as follows:"}),"\n","\n","\n",(0,o.jsx)(c.default,{}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai\n"})}),"\n",(0,o.jsx)(r.A,{language:"typescript",children:s()}),"\n",(0,o.jsxs)(n.p,{children:["There is an additional ",(0,o.jsx)(n.code,{children:"createMetadataTagger"})," method that accepts a valid JSON Schema object as well."]}),"\n",(0,o.jsx)(n.h3,{id:"customization",children:"Customization"}),"\n",(0,o.jsx)(n.p,{children:"You can pass the underlying tagging chain the standard LLMChain arguments in the second options parameter.\nFor example, if you wanted to ask the LLM to focus specific details in the input documents, or extract metadata in a certain style, you could pass in a custom prompt:"}),"\n","\n",(0,o.jsx)(r.A,{language:"typescript",children:d()})]})}function v(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(f,{...e})}):f(e)}},12380:e=>{e.exports={content:"import { z } from \"zod\";\nimport { createMetadataTaggerFromZod } from \"langchain/document_transformers/openai_functions\";\nimport { ChatOpenAI } from \"@langchain/openai\";\nimport { Document } from \"@langchain/core/documents\";\n\nconst zodSchema = z.object({\n  movie_title: z.string(),\n  critic: z.string(),\n  tone: z.enum([\"positive\", \"negative\"]),\n  rating: z\n    .optional(z.number())\n    .describe(\"The number of stars the critic rated the movie\"),\n});\n\nconst metadataTagger = createMetadataTaggerFromZod(zodSchema, {\n  llm: new ChatOpenAI({ model: \"gpt-3.5-turbo\" }),\n});\n\nconst documents = [\n  new Document({\n    pageContent:\n      \"Review of The Bee Movie\\nBy Roger Ebert\\nThis is the greatest movie ever made. 4 out of 5 stars.\",\n  }),\n  new Document({\n    pageContent:\n      \"Review of The Godfather\\nBy Anonymous\\n\\nThis movie was super boring. 1 out of 5 stars.\",\n    metadata: { reliable: false },\n  }),\n];\nconst taggedDocuments = await metadataTagger.transformDocuments(documents);\n\nconsole.log(taggedDocuments);\n\n/*\n  [\n    Document {\n      pageContent: 'Review of The Bee Movie\\n' +\n        'By Roger Ebert\\n' +\n        'This is the greatest movie ever made. 4 out of 5 stars.',\n      metadata: {\n        movie_title: 'The Bee Movie',\n        critic: 'Roger Ebert',\n        tone: 'positive',\n        rating: 4\n      }\n    },\n    Document {\n      pageContent: 'Review of The Godfather\\n' +\n        'By Anonymous\\n' +\n        '\\n' +\n        'This movie was super boring. 1 out of 5 stars.',\n      metadata: {\n        movie_title: 'The Godfather',\n        critic: 'Anonymous',\n        tone: 'negative',\n        rating: 1,\n        reliable: false\n      }\n    }\n  ]\n*/\n",imports:[{local:"createMetadataTaggerFromZod",imported:"createMetadataTaggerFromZod",source:"langchain/document_transformers/openai_functions"},{local:"ChatOpenAI",imported:"ChatOpenAI",source:"@langchain/openai"},{local:"Document",imported:"Document",source:"@langchain/core/documents"}]}},61813:e=>{e.exports={content:"import { z } from \"zod\";\nimport { createMetadataTaggerFromZod } from \"langchain/document_transformers/openai_functions\";\nimport { ChatOpenAI } from \"@langchain/openai\";\nimport { Document } from \"@langchain/core/documents\";\nimport { PromptTemplate } from \"@langchain/core/prompts\";\n\nconst taggingChainTemplate = `Extract the desired information from the following passage.\nAnonymous critics are actually Roger Ebert.\n\nPassage:\n{input}\n`;\n\nconst zodSchema = z.object({\n  movie_title: z.string(),\n  critic: z.string(),\n  tone: z.enum([\"positive\", \"negative\"]),\n  rating: z\n    .optional(z.number())\n    .describe(\"The number of stars the critic rated the movie\"),\n});\n\nconst metadataTagger = createMetadataTaggerFromZod(zodSchema, {\n  llm: new ChatOpenAI({ model: \"gpt-3.5-turbo\" }),\n  prompt: PromptTemplate.fromTemplate(taggingChainTemplate),\n});\n\nconst documents = [\n  new Document({\n    pageContent:\n      \"Review of The Bee Movie\\nBy Roger Ebert\\nThis is the greatest movie ever made. 4 out of 5 stars.\",\n  }),\n  new Document({\n    pageContent:\n      \"Review of The Godfather\\nBy Anonymous\\n\\nThis movie was super boring. 1 out of 5 stars.\",\n    metadata: { reliable: false },\n  }),\n];\nconst taggedDocuments = await metadataTagger.transformDocuments(documents);\n\nconsole.log(taggedDocuments);\n\n/*\n  [\n    Document {\n      pageContent: 'Review of The Bee Movie\\n' +\n        'By Roger Ebert\\n' +\n        'This is the greatest movie ever made. 4 out of 5 stars.',\n      metadata: {\n        movie_title: 'The Bee Movie',\n        critic: 'Roger Ebert',\n        tone: 'positive',\n        rating: 4\n      }\n    },\n    Document {\n      pageContent: 'Review of The Godfather\\n' +\n        'By Anonymous\\n' +\n        '\\n' +\n        'This movie was super boring. 1 out of 5 stars.',\n      metadata: {\n        movie_title: 'The Godfather',\n        critic: 'Roger Ebert',\n        tone: 'negative',\n        rating: 1,\n        reliable: false\n      }\n    }\n  ]\n*/\n",imports:[{local:"createMetadataTaggerFromZod",imported:"createMetadataTaggerFromZod",source:"langchain/document_transformers/openai_functions"},{local:"ChatOpenAI",imported:"ChatOpenAI",source:"@langchain/openai"},{local:"Document",imported:"Document",source:"@langchain/core/documents"},{local:"PromptTemplate",imported:"PromptTemplate",source:"@langchain/core/prompts"}]}}}]);
(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9325],{49204:(e,n,s)=>{"use strict";s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>m,default:()=>y,frontMatter:()=>l,metadata:()=>h,toc:()=>p});var t=s(74848),o=s(28453),a=s(78847),r=s(64428),i=s(93914),c=s.n(i);const l={hide_table_of_contents:!0},m="Zep Memory",h={id:"integrations/chat_memory/zep_memory",title:"Zep Memory",description:"Recall, understand, and extract data from chat histories. Power personalized AI experiences.",source:"@site/docs/integrations/chat_memory/zep_memory.mdx",sourceDirName:"integrations/chat_memory",slug:"/integrations/chat_memory/zep_memory",permalink:"/docs/integrations/chat_memory/zep_memory",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/chat_memory/zep_memory.mdx",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0}},d={},p=[{value:"How Zep works",id:"how-zep-works",level:2},{value:"What is Zep Cloud?",id:"what-is-zep-cloud",level:2},{value:"Setup",id:"setup",level:2},...a.toc,{value:"Usage",id:"usage",level:2}];function u(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"zep-memory",children:"Zep Memory"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Recall, understand, and extract data from chat histories. Power personalized AI experiences."}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://www.getzep.com",children:"Zep"})," is a long-term memory service for AI Assistant apps.\nWith Zep, you can provide AI assistants with the ability to recall past conversations, no matter how distant,\nwhile also reducing hallucinations, latency, and cost."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"how-zep-works",children:"How Zep works"}),"\n",(0,t.jsx)(n.p,{children:"Zep persists and recalls chat histories, and automatically generates summaries and other artifacts from these chat histories.\nIt also embeds messages and summaries, enabling you to search Zep for relevant context from past conversations.\nZep does all of this asynchronously, ensuring these operations don't impact your user's chat experience.\nData is persisted to database, allowing you to scale out when growth demands."}),"\n",(0,t.jsx)(n.p,{children:"Zep also provides a simple, easy to use abstraction for document vector search called Document Collections.\nThis is designed to complement Zep's core memory features, but is not designed to be a general purpose vector database."}),"\n",(0,t.jsx)(n.p,{children:"Zep allows you to be more intentional about constructing your prompt:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"automatically adding a few recent messages, with the number customized for your app;"}),"\n",(0,t.jsx)(n.li,{children:"a summary of recent conversations prior to the messages above;"}),"\n",(0,t.jsx)(n.li,{children:"and/or contextually relevant summaries or messages surfaced from the entire chat session."}),"\n",(0,t.jsx)(n.li,{children:"and/or relevant Business data from Zep Document Collections."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"what-is-zep-cloud",children:"What is Zep Cloud?"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"http://www.getzep.com",children:"Zep Cloud"})," is a managed service with Zep Open Source at its core.\nIn addition to Zep Open Source's memory management features, Zep Cloud offers:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Fact Extraction"}),": Automatically build fact tables from conversations, without having to define a data schema upfront."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Dialog Classification"}),": Instantly and accurately classify chat dialog. Understand user intent and emotion, segment users, and more. Route chains based on semantic context, and trigger events."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Structured Data Extraction"}),": Quickly extract business data from chat conversations using a schema you define. Understand what your Assistant should ask for next in order to complete its task."]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Interested in Zep Cloud? See ",(0,t.jsx)(n.a,{href:"https://help.getzep.com/sdks",children:"Zep Cloud Installation Guide"}),", ",(0,t.jsx)(n.a,{href:"https://help.getzep.com/langchain/examples/messagehistory-example",children:"Zep Cloud Message History Example"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,t.jsxs)(n.p,{children:["See the instructions from ",(0,t.jsx)(n.a,{href:"https://github.com/getzep/zep",children:"Zep"})," for running the server locally or through an automated hosting provider."]}),"\n","\n",(0,t.jsx)(a.default,{}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai @langchain/community\n"})}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n","\n",(0,t.jsx)(r.A,{language:"typescript",children:c()})]})}function y(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},93914:e=>{e.exports={content:'import { ChatOpenAI } from "@langchain/openai";\nimport { ConversationChain } from "langchain/chains";\nimport { ZepMemory } from "@langchain/community/memory/zep";\nimport { randomUUID } from "crypto";\n\nconst sessionId = randomUUID(); // This should be unique for each user or each user\'s session.\nconst zepURL = "http://localhost:8000";\n\nconst memory = new ZepMemory({\n  sessionId,\n  baseURL: zepURL,\n  // This is optional. If you\'ve enabled JWT authentication on your Zep server, you can\n  // pass it in here. See https://docs.getzep.com/deployment/auth\n  apiKey: "change_this_key",\n});\n\nconst model = new ChatOpenAI({\n  model: "gpt-3.5-turbo",\n  temperature: 0,\n});\n\nconst chain = new ConversationChain({ llm: model, memory });\nconsole.log("Memory Keys:", memory.memoryKeys);\n\nconst res1 = await chain.invoke({ input: "Hi! I\'m Jim." });\nconsole.log({ res1 });\n/*\n{\n  res1: {\n    text: "Hello Jim! It\'s nice to meet you. My name is AI. How may I assist you today?"\n  }\n}\n*/\n\nconst res2 = await chain.invoke({ input: "What did I just say my name was?" });\nconsole.log({ res2 });\n\n/*\n{\n  res1: {\n    text: "You said your name was Jim."\n  }\n}\n*/\nconsole.log("Session ID: ", sessionId);\nconsole.log("Memory: ", await memory.loadMemoryVariables({}));\n',imports:[{local:"ChatOpenAI",imported:"ChatOpenAI",source:"@langchain/openai"},{local:"ConversationChain",imported:"ConversationChain",source:"langchain/chains"},{local:"ZepMemory",imported:"ZepMemory",source:"@langchain/community/memory/zep"}]}}}]);
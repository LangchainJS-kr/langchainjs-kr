(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[13,65],{53554:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>p,default:()=>v,frontMatter:()=>h,metadata:()=>m,toc:()=>g});var a=n(74848),o=n(28453),s=n(78847),i=n(64428),r=n(91995),c=n.n(r),l=n(835),d=n.n(l);const h={},p="Xata",m={id:"integrations/vectorstores/xata",title:"Xata",description:"Xata is a serverless data platform, based on PostgreSQL. It provides a type-safe TypeScript/JavaScript SDK for interacting with your database, and a UI for managing your data.",source:"@site/docs/integrations/vectorstores/xata.mdx",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/xata",permalink:"/docs/integrations/vectorstores/xata",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/vectorstores/xata.mdx",tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Weaviate",permalink:"/docs/integrations/vectorstores/weaviate"},next:{title:"Zep",permalink:"/docs/integrations/vectorstores/zep"}},u={},g=[{value:"Setup",id:"setup",level:2},{value:"Install the Xata CLI",id:"install-the-xata-cli",level:3},{value:"Create a database to be used as a vector store",id:"create-a-database-to-be-used-as-a-vector-store",level:3},{value:"Initialize the project",id:"initialize-the-project",level:3},{value:"Usage",id:"usage",level:2},...s.toc,{value:"Example: Q&amp;A chatbot using OpenAI and Xata as vector store",id:"example-qa-chatbot-using-openai-and-xata-as-vector-store",level:3},{value:"Example: Similarity search with a metadata filter",id:"example-similarity-search-with-a-metadata-filter",level:3}];function x(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"xata",children:"Xata"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.a,{href:"https://xata.io",children:"Xata"})," is a serverless data platform, based on PostgreSQL. It provides a type-safe TypeScript/JavaScript SDK for interacting with your database, and a UI for managing your data."]}),"\n",(0,a.jsx)(t.p,{children:"Xata has a native vector type, which can be added to any table, and supports similarity search. LangChain inserts vectors directly to Xata, and queries it for the nearest neighbors of a given vector, so that you can use all the LangChain Embeddings integrations with Xata."}),"\n",(0,a.jsx)(t.h2,{id:"setup",children:"Setup"}),"\n",(0,a.jsx)(t.h3,{id:"install-the-xata-cli",children:"Install the Xata CLI"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"npm install @xata.io/cli -g\n"})}),"\n",(0,a.jsx)(t.h3,{id:"create-a-database-to-be-used-as-a-vector-store",children:"Create a database to be used as a vector store"}),"\n",(0,a.jsxs)(t.p,{children:["In the ",(0,a.jsx)(t.a,{href:"https://app.xata.io",children:"Xata UI"})," create a new database. You can name it whatever you want, but for this example we'll use ",(0,a.jsx)(t.code,{children:"langchain"}),".\nCreate a table, again you can name it anything, but we will use ",(0,a.jsx)(t.code,{children:"vectors"}),". Add the following columns via the UI:"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"content"}),' of type "Text". This is used to store the ',(0,a.jsx)(t.code,{children:"Document.pageContent"})," values."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"embedding"}),' of type "Vector". Use the dimension used by the model you plan to use (1536 for OpenAI).']}),"\n",(0,a.jsxs)(t.li,{children:["any other columns you want to use as metadata. They are populated from the ",(0,a.jsx)(t.code,{children:"Document.metadata"})," object. For example, if in the ",(0,a.jsx)(t.code,{children:"Document.metadata"})," object you have a ",(0,a.jsx)(t.code,{children:"title"})," property, you can create a ",(0,a.jsx)(t.code,{children:"title"})," column in the table and it will be populated."]}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"initialize-the-project",children:"Initialize the project"}),"\n",(0,a.jsx)(t.p,{children:"In your project, run:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"xata init\n"})}),"\n",(0,a.jsxs)(t.p,{children:["and then choose the database you created above. This will also generate a ",(0,a.jsx)(t.code,{children:"xata.ts"})," or ",(0,a.jsx)(t.code,{children:"xata.js"})," file that defines the client you can use to interact with the database. See the ",(0,a.jsx)(t.a,{href:"https://xata.io/docs/getting-started/installation",children:"Xata getting started docs"})," for more details on using the Xata JavaScript/TypeScript SDK."]}),"\n",(0,a.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n","\n",(0,a.jsx)(s.default,{}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai @langchain/community\n"})}),"\n","\n",(0,a.jsx)(t.h3,{id:"example-qa-chatbot-using-openai-and-xata-as-vector-store",children:"Example: Q&A chatbot using OpenAI and Xata as vector store"}),"\n",(0,a.jsxs)(t.p,{children:["This example uses the ",(0,a.jsx)(t.code,{children:"VectorDBQAChain"})," to search the documents stored in Xata and then pass them as context to the OpenAI model, in order to answer the question asked by the user."]}),"\n","\n",(0,a.jsx)(i.A,{language:"typescript",children:c()}),"\n",(0,a.jsx)(t.h3,{id:"example-similarity-search-with-a-metadata-filter",children:"Example: Similarity search with a metadata filter"}),"\n",(0,a.jsxs)(t.p,{children:["This example shows how to implement semantic search using LangChain.js and Xata. Before running it, make sure to add an ",(0,a.jsx)(t.code,{children:"author"})," column of type String to the ",(0,a.jsx)(t.code,{children:"vectors"})," table in Xata."]}),"\n","\n",(0,a.jsx)(i.A,{language:"typescript",children:d()})]})}function v(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(x,{...e})}):x(e)}},78847:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var a=n(74848),o=n(28453);const s={},i=void 0,r={id:"mdx_components/integration_install_tooltip",title:"integration_install_tooltip",description:"See this section for general instructions on installing integration packages.",source:"@site/docs/mdx_components/integration_install_tooltip.mdx",sourceDirName:"mdx_components",slug:"/mdx_components/integration_install_tooltip",permalink:"/docs/mdx_components/integration_install_tooltip",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/mdx_components/integration_install_tooltip.mdx",tags:[],version:"current",frontMatter:{}},c={},l=[];function d(e){const t={a:"a",admonition:"admonition",p:"p",...(0,o.R)(),...e.components};return(0,a.jsx)(t.admonition,{type:"tip",children:(0,a.jsxs)(t.p,{children:["See ",(0,a.jsx)(t.a,{href:"/docs/how_to/installation#installing-integration-packages",children:"this section for general instructions on installing integration packages"}),"."]})})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},91995:e=>{e.exports={content:'import { XataVectorSearch } from "@langchain/community/vectorstores/xata";\nimport { OpenAIEmbeddings, OpenAI } from "@langchain/openai";\nimport { BaseClient } from "@xata.io/client";\nimport { VectorDBQAChain } from "langchain/chains";\nimport { Document } from "@langchain/core/documents";\n\n// First, follow set-up instructions at\n// https://js.langchain.com/docs/modules/data_connection/vectorstores/integrations/xata\n\n// if you use the generated client, you don\'t need this function.\n// Just import getXataClient from the generated xata.ts instead.\nconst getXataClient = () => {\n  if (!process.env.XATA_API_KEY) {\n    throw new Error("XATA_API_KEY not set");\n  }\n\n  if (!process.env.XATA_DB_URL) {\n    throw new Error("XATA_DB_URL not set");\n  }\n  const xata = new BaseClient({\n    databaseURL: process.env.XATA_DB_URL,\n    apiKey: process.env.XATA_API_KEY,\n    branch: process.env.XATA_BRANCH || "main",\n  });\n  return xata;\n};\n\nexport async function run() {\n  const client = getXataClient();\n\n  const table = "vectors";\n  const embeddings = new OpenAIEmbeddings();\n  const store = new XataVectorSearch(embeddings, { client, table });\n\n  // Add documents\n  const docs = [\n    new Document({\n      pageContent: "Xata is a Serverless Data platform based on PostgreSQL",\n    }),\n    new Document({\n      pageContent:\n        "Xata offers a built-in vector type that can be used to store and query vectors",\n    }),\n    new Document({\n      pageContent: "Xata includes similarity search",\n    }),\n  ];\n\n  const ids = await store.addDocuments(docs);\n\n  // eslint-disable-next-line no-promise-executor-return\n  await new Promise((r) => setTimeout(r, 2000));\n\n  const model = new OpenAI();\n  const chain = VectorDBQAChain.fromLLM(model, store, {\n    k: 1,\n    returnSourceDocuments: true,\n  });\n  const response = await chain.invoke({ query: "What is Xata?" });\n\n  console.log(JSON.stringify(response, null, 2));\n\n  await store.delete({ ids });\n}\n',imports:[{local:"XataVectorSearch",imported:"XataVectorSearch",source:"@langchain/community/vectorstores/xata"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"},{local:"OpenAI",imported:"OpenAI",source:"@langchain/openai"},{local:"VectorDBQAChain",imported:"VectorDBQAChain",source:"langchain/chains"},{local:"Document",imported:"Document",source:"@langchain/core/documents"}]}},835:e=>{e.exports={content:'import { XataVectorSearch } from "@langchain/community/vectorstores/xata";\nimport { OpenAIEmbeddings } from "@langchain/openai";\nimport { BaseClient } from "@xata.io/client";\nimport { Document } from "@langchain/core/documents";\n\n// First, follow set-up instructions at\n// https://js.langchain.com/docs/modules/data_connection/vectorstores/integrations/xata\n// Also, add a column named "author" to the "vectors" table.\n\n// if you use the generated client, you don\'t need this function.\n// Just import getXataClient from the generated xata.ts instead.\nconst getXataClient = () => {\n  if (!process.env.XATA_API_KEY) {\n    throw new Error("XATA_API_KEY not set");\n  }\n\n  if (!process.env.XATA_DB_URL) {\n    throw new Error("XATA_DB_URL not set");\n  }\n  const xata = new BaseClient({\n    databaseURL: process.env.XATA_DB_URL,\n    apiKey: process.env.XATA_API_KEY,\n    branch: process.env.XATA_BRANCH || "main",\n  });\n  return xata;\n};\n\nexport async function run() {\n  const client = getXataClient();\n  const table = "vectors";\n  const embeddings = new OpenAIEmbeddings();\n  const store = new XataVectorSearch(embeddings, { client, table });\n  // Add documents\n  const docs = [\n    new Document({\n      pageContent: "Xata works great with Langchain.js",\n      metadata: { author: "Xata" },\n    }),\n    new Document({\n      pageContent: "Xata works great with Langchain",\n      metadata: { author: "Langchain" },\n    }),\n    new Document({\n      pageContent: "Xata includes similarity search",\n      metadata: { author: "Xata" },\n    }),\n  ];\n  const ids = await store.addDocuments(docs);\n\n  // eslint-disable-next-line no-promise-executor-return\n  await new Promise((r) => setTimeout(r, 2000));\n\n  // author is applied as pre-filter to the similarity search\n  const results = await store.similaritySearchWithScore("xata works great", 6, {\n    author: "Langchain",\n  });\n\n  console.log(JSON.stringify(results, null, 2));\n\n  await store.delete({ ids });\n}\n',imports:[{local:"XataVectorSearch",imported:"XataVectorSearch",source:"@langchain/community/vectorstores/xata"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"},{local:"Document",imported:"Document",source:"@langchain/core/documents"}]}}}]);
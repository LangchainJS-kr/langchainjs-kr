(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5590],{35415:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>r,default:()=>d,frontMatter:()=>p,metadata:()=>c,toc:()=>u});var a=n(74848),l=n(28453),o=n(64428),s=n(4714),i=n.n(s);const p={sidebar_class_name:"hidden",pagination_prev:null,pagination_next:null},r="How to select examples by length",c={id:"how_to/example_selectors_length_based",title:"How to select examples by length",description:"This guide assumes familiarity with the following concepts:",source:"@site/docs/how_to/example_selectors_length_based.mdx",sourceDirName:"how_to",slug:"/how_to/example_selectors_length_based",permalink:"/docs/how_to/example_selectors_length_based",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/how_to/example_selectors_length_based.mdx",tags:[],version:"current",frontMatter:{sidebar_class_name:"hidden",pagination_prev:null,pagination_next:null},sidebar:"tutorialSidebar"},m={},u=[{value:"Next steps",id:"next-steps",level:2}];function h(e){const t={a:"a",admonition:"admonition",h1:"h1",h2:"h2",li:"li",p:"p",ul:"ul",...(0,l.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"how-to-select-examples-by-length",children:"How to select examples by length"}),"\n",(0,a.jsxs)(t.admonition,{title:"Prerequisites",type:"info",children:[(0,a.jsx)(t.p,{children:"This guide assumes familiarity with the following concepts:"}),(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"/docs/concepts/#prompt-templates",children:"Prompt templates"})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"/docs/how_to/example_selectors",children:"Example selectors"})}),"\n"]})]}),"\n",(0,a.jsx)(t.p,{children:"This example selector selects which examples to use based on length.\nThis is useful when you are worried about constructing a prompt that will go over the length of the context window.\nFor longer inputs, it will select fewer examples to include, while for shorter inputs it will select more."}),"\n","\n",(0,a.jsx)(o.A,{language:"typescript",children:i()}),"\n",(0,a.jsx)(t.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,a.jsx)(t.p,{children:"You've now learned a bit about using a length based example selector."}),"\n",(0,a.jsxs)(t.p,{children:["Next, check out this guide on how to use a ",(0,a.jsx)(t.a,{href:"/docs/how_to/example_selectors_similarity",children:"similarity based example selector"}),"."]})]})}function d(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},4714:e=>{e.exports={content:'import { PromptTemplate, FewShotPromptTemplate } from "@langchain/core/prompts";\nimport { LengthBasedExampleSelector } from "@langchain/core/example_selectors";\n\nexport async function run() {\n  // Create a prompt template that will be used to format the examples.\n  const examplePrompt = new PromptTemplate({\n    inputVariables: ["input", "output"],\n    template: "Input: {input}\\nOutput: {output}",\n  });\n\n  // Create a LengthBasedExampleSelector that will be used to select the examples.\n  const exampleSelector = await LengthBasedExampleSelector.fromExamples(\n    [\n      { input: "happy", output: "sad" },\n      { input: "tall", output: "short" },\n      { input: "energetic", output: "lethargic" },\n      { input: "sunny", output: "gloomy" },\n      { input: "windy", output: "calm" },\n    ],\n    {\n      examplePrompt,\n      maxLength: 25,\n    }\n  );\n\n  // Create a FewShotPromptTemplate that will use the example selector.\n  const dynamicPrompt = new FewShotPromptTemplate({\n    // We provide an ExampleSelector instead of examples.\n    exampleSelector,\n    examplePrompt,\n    prefix: "Give the antonym of every input",\n    suffix: "Input: {adjective}\\nOutput:",\n    inputVariables: ["adjective"],\n  });\n\n  // An example with small input, so it selects all examples.\n  console.log(await dynamicPrompt.format({ adjective: "big" }));\n  /*\n   Give the antonym of every input\n\n   Input: happy\n   Output: sad\n\n   Input: tall\n   Output: short\n\n   Input: energetic\n   Output: lethargic\n\n   Input: sunny\n   Output: gloomy\n\n   Input: windy\n   Output: calm\n\n   Input: big\n   Output:\n   */\n\n  // An example with long input, so it selects only one example.\n  const longString =\n    "big and huge and massive and large and gigantic and tall and much much much much much bigger than everything else";\n  console.log(await dynamicPrompt.format({ adjective: longString }));\n  /*\n   Give the antonym of every input\n\n   Input: happy\n   Output: sad\n\n   Input: big and huge and massive and large and gigantic and tall and much much much much much bigger than everything else\n   Output:\n   */\n}\n',imports:[{local:"PromptTemplate",imported:"PromptTemplate",source:"@langchain/core/prompts"},{local:"FewShotPromptTemplate",imported:"FewShotPromptTemplate",source:"@langchain/core/prompts"},{local:"LengthBasedExampleSelector",imported:"LengthBasedExampleSelector",source:"@langchain/core/example_selectors"}]}}}]);
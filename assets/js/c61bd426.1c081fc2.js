"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6761],{88774:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var n=r(74848),s=r(28453);const a={sidebar_class_name:"hidden",title:"How to try to fix errors in output parsing"},o=void 0,i={id:"how_to/output_parser_fixing",title:"How to try to fix errors in output parsing",description:"This guide assumes familiarity with the following concepts: - [Chat",source:"@site/docs/how_to/output_parser_fixing.mdx",sourceDirName:"how_to",slug:"/how_to/output_parser_fixing",permalink:"/docs/how_to/output_parser_fixing",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/how_to/output_parser_fixing.mdx",tags:[],version:"current",frontMatter:{sidebar_class_name:"hidden",title:"How to try to fix errors in output parsing"},sidebar:"tutorialSidebar",previous:{title:"How to generate multiple queries to retrieve data for",permalink:"/docs/how_to/multiple_queries"},next:{title:"How to parse JSON output",permalink:"/docs/how_to/output_parser_json"}},c={},p=[];function u(t){const e={a:"a",admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,s.R)(),...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.admonition,{title:"Prerequisites",type:"info",children:(0,n.jsxs)(e.p,{children:["This guide assumes familiarity with the following concepts: - ",(0,n.jsx)(e.a,{href:"../../docs/concepts/#chat-models",children:"Chat\nmodels"})," - ",(0,n.jsx)(e.a,{href:"../../docs/concepts/#output-parsers",children:"Output\nparsers"})," - ",(0,n.jsx)(e.a,{href:"../../docs/concepts/#prompt-templates",children:"Prompt\ntemplates"})," - ",(0,n.jsx)(e.a,{href:"../../docs/how_to/sequence/",children:"Chaining runnables\ntogether"})]})}),"\n",(0,n.jsxs)(e.p,{children:["LLMs aren\u2019t perfect, and sometimes fail to produce output that perfectly\nmatches a the desired format. To help handle errors, we can use the\n",(0,n.jsx)(e.a,{href:"https://api.js.langchain.com/classes/langchain_output_parsers.OutputFixingParser.html",children:(0,n.jsx)(e.code,{children:"OutputFixingParser"})}),"\nThis output parser wraps another output parser, and in the event that\nthe first one fails, it calls out to another LLM in an attempt to fix\nany errors."]}),"\n",(0,n.jsx)(e.p,{children:"Specifically, we can pass the misformatted output, along with the\nformatted instructions, to the model and ask it to fix it."}),"\n",(0,n.jsxs)(e.p,{children:["For this example, we\u2019ll use the\n",(0,n.jsx)(e.a,{href:"https://api.js.langchain.com/classes/langchain_core_output_parsers.StructuredOutputParser.html",children:(0,n.jsx)(e.code,{children:"StructuredOutputParser"})}),",\nwhich can validate output according to a Zod schema. Here\u2019s what happens\nif we pass it a result that does not comply with the schema:"]}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-typescript",children:'import { z } from "zod";\nimport { RunnableSequence } from "@langchain/core/runnables";\nimport { StructuredOutputParser } from "@langchain/core/output_parsers";\nimport { ChatPromptTemplate } from "@langchain/core/prompts";\n\nconst zodSchema = z.object({\n  name: z.string().describe("name of an actor"),\n  film_names: z\n    .array(z.string())\n    .describe("list of names of films they starred in"),\n});\n\nconst parser = StructuredOutputParser.fromZodSchema(zodSchema);\n\nconst misformatted = "{\'name\': \'Tom Hanks\', \'film_names\': [\'Forrest Gump\']}";\n\nawait parser.parse(misformatted);\n'})}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-text",children:"Error: Failed to parse. Text: \"{'name': 'Tom Hanks', 'film_names': ['Forrest Gump']}\". Error: SyntaxError: Expected property name or '}' in JSON at position 1 (line 1 column 2)\n"})}),"\n",(0,n.jsxs)(e.p,{children:["Now we can construct and use a ",(0,n.jsx)(e.code,{children:"OutputFixingParser"}),". This output parser\ntakes as an argument another output parser but also an LLM with which to\ntry to correct any formatting mistakes."]}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-typescript",children:'import { ChatAnthropic } from "@langchain/anthropic";\n\nimport { OutputFixingParser } from "langchain/output_parsers";\n\nconst model = new ChatAnthropic({\n  model: "claude-3-sonnet-20240229",\n  maxTokens: 512,\n  temperature: 0.1,\n});\n\nconst parserWithFix = OutputFixingParser.fromLLM(model, parser);\n\nawait parserWithFix.parse(misformatted);\n'})}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-text",children:'{\n  name: "Tom Hanks",\n  film_names: [\n    "Forrest Gump",\n    "Saving Private Ryan",\n    "Cast Away",\n    "Catch Me If You Can"\n  ]\n}\n'})}),"\n",(0,n.jsxs)(e.p,{children:["For more about different parameters and options, check out our ",(0,n.jsx)(e.a,{href:"https://api.js.langchain.com/classes/langchain_output_parsers.OutputFixingParser.html",children:"API\nreference\ndocs"}),"."]})]})}function h(t={}){const{wrapper:e}={...(0,s.R)(),...t.components};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(u,{...t})}):u(t)}}}]);
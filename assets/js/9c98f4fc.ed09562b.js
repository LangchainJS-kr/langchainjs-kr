(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1547],{94209:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>y,contentTitle:()=>w,default:()=>j,frontMatter:()=>x,metadata:()=>v,toc:()=>S});var o=t(74848),i=t(28453),r=t(64428),a=t(78847),s=t(88780),l=t.n(s),d=t(28780),c=t.n(d),m=t(20242),h=t.n(m),p=t(21545),g=t.n(p),u=t(75968),b=t.n(u);const x={sidebar_class_name:"node-only"},w="HNSWLib",v={id:"integrations/vectorstores/hnswlib",title:"HNSWLib",description:"Only available on Node.js.",source:"@site/docs/integrations/vectorstores/hnswlib.mdx",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/hnswlib",permalink:"/docs/integrations/vectorstores/hnswlib",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/vectorstores/hnswlib.mdx",tags:[],version:"current",frontMatter:{sidebar_class_name:"node-only"},sidebar:"integrations",previous:{title:"SAP HANA Cloud Vector Engine",permalink:"/docs/integrations/vectorstores/hanavector"},next:{title:"LanceDB",permalink:"/docs/integrations/vectorstores/lancedb"}},y={},S=[{value:"Setup",id:"setup",level:2},...a.toc,{value:"Usage",id:"usage",level:2},{value:"Create a new index from texts",id:"create-a-new-index-from-texts",level:3},{value:"Create a new index from a loader",id:"create-a-new-index-from-a-loader",level:3},{value:"Save an index to a file and load it again",id:"save-an-index-to-a-file-and-load-it-again",level:3},{value:"Filter documents",id:"filter-documents",level:3},{value:"Delete index",id:"delete-index",level:3}];function f(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"hnswlib",children:"HNSWLib"}),"\n",(0,o.jsx)(n.admonition,{title:"Compatibility",type:"tip",children:(0,o.jsx)(n.p,{children:"Only available on Node.js."})}),"\n",(0,o.jsxs)(n.p,{children:["HNSWLib is an in-memory vectorstore that can be saved to a file. It uses ",(0,o.jsx)(n.a,{href:"https://github.com/nmslib/hnswlib",children:"HNSWLib"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,o.jsx)(n.admonition,{type:"caution",children:(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"On Windows"}),", you might need to install ",(0,o.jsx)(n.a,{href:"https://visualstudio.microsoft.com/downloads/",children:"Visual Studio"})," first in order to properly build the ",(0,o.jsx)(n.code,{children:"hnswlib-node"})," package."]})}),"\n",(0,o.jsx)(n.p,{children:"You can install it with"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install hnswlib-node\n"})}),"\n","\n",(0,o.jsx)(a.default,{}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai @langchain/community\n"})}),"\n",(0,o.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(n.h3,{id:"create-a-new-index-from-texts",children:"Create a new index from texts"}),"\n","\n",(0,o.jsx)(r.A,{language:"typescript",children:l()}),"\n",(0,o.jsx)(n.h3,{id:"create-a-new-index-from-a-loader",children:"Create a new index from a loader"}),"\n","\n",(0,o.jsx)(r.A,{language:"typescript",children:c()}),"\n",(0,o.jsx)(n.h3,{id:"save-an-index-to-a-file-and-load-it-again",children:"Save an index to a file and load it again"}),"\n","\n",(0,o.jsx)(r.A,{language:"typescript",children:h()}),"\n",(0,o.jsx)(n.h3,{id:"filter-documents",children:"Filter documents"}),"\n","\n",(0,o.jsx)(r.A,{language:"typescript",children:g()}),"\n",(0,o.jsx)(n.h3,{id:"delete-index",children:"Delete index"}),"\n","\n",(0,o.jsx)(r.A,{language:"typescript",children:b()})]})}function j(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(f,{...e})}):f(e)}},88780:e=>{e.exports={content:'import { HNSWLib } from "@langchain/community/vectorstores/hnswlib";\nimport { OpenAIEmbeddings } from "@langchain/openai";\n\nconst vectorStore = await HNSWLib.fromTexts(\n  ["Hello world", "Bye bye", "hello nice world"],\n  [{ id: 2 }, { id: 1 }, { id: 3 }],\n  new OpenAIEmbeddings()\n);\n\nconst resultOne = await vectorStore.similaritySearch("hello world", 1);\nconsole.log(resultOne);\n',imports:[{local:"HNSWLib",imported:"HNSWLib",source:"@langchain/community/vectorstores/hnswlib"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"}]}},75968:e=>{e.exports={content:'import { HNSWLib } from "@langchain/community/vectorstores/hnswlib";\nimport { OpenAIEmbeddings } from "@langchain/openai";\n\n// Save the vector store to a directory\nconst directory = "your/directory/here";\n\n// Load the vector store from the same directory\nconst loadedVectorStore = await HNSWLib.load(directory, new OpenAIEmbeddings());\n\nawait loadedVectorStore.delete({ directory });\n',imports:[{local:"HNSWLib",imported:"HNSWLib",source:"@langchain/community/vectorstores/hnswlib"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"}]}},21545:e=>{e.exports={content:'import { HNSWLib } from "@langchain/community/vectorstores/hnswlib";\nimport { OpenAIEmbeddings } from "@langchain/openai";\n\nconst vectorStore = await HNSWLib.fromTexts(\n  ["Hello world", "Bye bye", "hello nice world"],\n  [{ id: 2 }, { id: 1 }, { id: 3 }],\n  new OpenAIEmbeddings()\n);\n\nconst result = await vectorStore.similaritySearch(\n  "hello world",\n  10,\n  (document) => document.metadata.id === 3\n);\n\n// only "hello nice world" will be returned\nconsole.log(result);\n',imports:[{local:"HNSWLib",imported:"HNSWLib",source:"@langchain/community/vectorstores/hnswlib"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"}]}},28780:e=>{e.exports={content:'import { HNSWLib } from "@langchain/community/vectorstores/hnswlib";\nimport { OpenAIEmbeddings } from "@langchain/openai";\nimport { TextLoader } from "langchain/document_loaders/fs/text";\n\n// Create docs with a loader\nconst loader = new TextLoader("src/document_loaders/example_data/example.txt");\nconst docs = await loader.load();\n\n// Load the docs into the vector store\nconst vectorStore = await HNSWLib.fromDocuments(docs, new OpenAIEmbeddings());\n\n// Search for the most similar document\nconst result = await vectorStore.similaritySearch("hello world", 1);\nconsole.log(result);\n',imports:[{local:"HNSWLib",imported:"HNSWLib",source:"@langchain/community/vectorstores/hnswlib"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"},{local:"TextLoader",imported:"TextLoader",source:"langchain/document_loaders/fs/text"}]}},20242:e=>{e.exports={content:'import { HNSWLib } from "@langchain/community/vectorstores/hnswlib";\nimport { OpenAIEmbeddings } from "@langchain/openai";\n\n// Create a vector store through any method, here from texts as an example\nconst vectorStore = await HNSWLib.fromTexts(\n  ["Hello world", "Bye bye", "hello nice world"],\n  [{ id: 2 }, { id: 1 }, { id: 3 }],\n  new OpenAIEmbeddings()\n);\n\n// Save the vector store to a directory\nconst directory = "your/directory/here";\nawait vectorStore.save(directory);\n\n// Load the vector store from the same directory\nconst loadedVectorStore = await HNSWLib.load(directory, new OpenAIEmbeddings());\n\n// vectorStore and loadedVectorStore are identical\n\nconst result = await loadedVectorStore.similaritySearch("hello world", 1);\nconsole.log(result);\n',imports:[{local:"HNSWLib",imported:"HNSWLib",source:"@langchain/community/vectorstores/hnswlib"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"}]}}}]);
"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5687,65],{34860:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var s=t(74848),i=t(28453),o=t(78847);const a={},d="OpenAI",r={id:"integrations/text_embedding/openai",title:"OpenAI",description:"The OpenAIEmbeddings class uses the OpenAI API to generate embeddings for a given text. By default it strips new line characters from the text, as recommended by OpenAI, but you can disable this by passing stripNewLines: false to the constructor.",source:"@site/docs/integrations/text_embedding/openai.mdx",sourceDirName:"integrations/text_embedding",slug:"/integrations/text_embedding/openai",permalink:"/docs/integrations/text_embedding/openai",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/text_embedding/openai.mdx",tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Ollama",permalink:"/docs/integrations/text_embedding/ollama"},next:{title:"Prem AI",permalink:"/docs/integrations/text_embedding/premai"}},c={},l=[...o.toc,{value:"Specifying dimensions",id:"specifying-dimensions",level:2},{value:"Custom URLs",id:"custom-urls",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"openai",children:"OpenAI"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"OpenAIEmbeddings"})," class uses the OpenAI API to generate embeddings for a given text. By default it strips new line characters from the text, as recommended by OpenAI, but you can disable this by passing ",(0,s.jsx)(n.code,{children:"stripNewLines: false"})," to the constructor."]}),"\n","\n",(0,s.jsx)(o.default,{}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { OpenAIEmbeddings } from "@langchain/openai";\n\nconst embeddings = new OpenAIEmbeddings({\n  apiKey: "YOUR-API-KEY", // In Node.js defaults to process.env.OPENAI_API_KEY\n  batchSize: 512, // Default value if omitted is 512. Max is 2048\n  model: "text-embedding-3-large",\n});\n'})}),"\n",(0,s.jsxs)(n.p,{children:["If you're part of an organization, you can set ",(0,s.jsx)(n.code,{children:"process.env.OPENAI_ORGANIZATION"})," to your OpenAI organization id, or pass it in as ",(0,s.jsx)(n.code,{children:"organization"})," when\ninitializing the model."]}),"\n",(0,s.jsx)(n.h2,{id:"specifying-dimensions",children:"Specifying dimensions"}),"\n",(0,s.jsxs)(n.p,{children:["With the ",(0,s.jsx)(n.code,{children:"text-embedding-3"})," class of models, you can specify the size of the embeddings you want returned. For example by default ",(0,s.jsx)(n.code,{children:"text-embedding-3-large"})," returns embeddings of dimension 3072:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'const embeddings = new OpenAIEmbeddings({\n  model: "text-embedding-3-large",\n});\n\nconst vectors = await embeddings.embedDocuments(["some text"]);\nconsole.log(vectors[0].length);\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"3072\n"})}),"\n",(0,s.jsxs)(n.p,{children:["But by passing in ",(0,s.jsx)(n.code,{children:"dimensions: 1024"})," we can reduce the size of our embeddings to 1024:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'const embeddings1024 = new OpenAIEmbeddings({\n  model: "text-embedding-3-large",\n  dimensions: 1024,\n});\n\nconst vectors2 = await embeddings1024.embedDocuments(["some text"]);\nconsole.log(vectors2[0].length);\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"1024\n"})}),"\n",(0,s.jsx)(n.h2,{id:"custom-urls",children:"Custom URLs"}),"\n",(0,s.jsxs)(n.p,{children:["You can customize the base URL the SDK sends requests to by passing a ",(0,s.jsx)(n.code,{children:"configuration"})," parameter like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'const model = new OpenAIEmbeddings({\n  configuration: {\n    baseURL: "https://your_custom_url.com",\n  },\n});\n'})}),"\n",(0,s.jsxs)(n.p,{children:["You can also pass other ",(0,s.jsx)(n.code,{children:"ClientOptions"})," parameters accepted by the official SDK."]}),"\n",(0,s.jsxs)(n.p,{children:["If you are hosting on Azure OpenAI, see the ",(0,s.jsx)(n.a,{href:"/docs/integrations/text_embedding/azure_openai",children:"dedicated page instead"}),"."]})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},78847:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>d,toc:()=>c});var s=t(74848),i=t(28453);const o={},a=void 0,d={id:"mdx_components/integration_install_tooltip",title:"integration_install_tooltip",description:"See this section for general instructions on installing integration packages.",source:"@site/docs/mdx_components/integration_install_tooltip.mdx",sourceDirName:"mdx_components",slug:"/mdx_components/integration_install_tooltip",permalink:"/docs/mdx_components/integration_install_tooltip",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/mdx_components/integration_install_tooltip.mdx",tags:[],version:"current",frontMatter:{}},r={},c=[];function l(e){const n={a:"a",admonition:"admonition",p:"p",...(0,i.R)(),...e.components};return(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["See ",(0,s.jsx)(n.a,{href:"/docs/how_to/installation#installing-integration-packages",children:"this section for general instructions on installing integration packages"}),"."]})})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);
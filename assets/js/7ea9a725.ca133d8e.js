"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6214],{16017:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var s=t(74848),i=t(28453);const r={sidebar_position:2},a="Testing",l={id:"contributing/testing",title:"Testing",description:"In general, tests should be added within a tests/ folder alongside the modules they",source:"@site/docs/contributing/testing.mdx",sourceDirName:"contributing",slug:"/contributing/testing",permalink:"/docs/contributing/testing",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/contributing/testing.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2}},o={},d=[{value:"Running a single test",id:"running-a-single-test",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"testing",children:"Testing"}),"\n",(0,s.jsxs)(n.p,{children:["In general, tests should be added within a ",(0,s.jsx)(n.code,{children:"tests/"})," folder alongside the modules they\nare testing."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Unit tests"})," cover modular logic that does not require calls to outside APIs."]}),"\n",(0,s.jsxs)(n.p,{children:["If you add new logic, please add a unit test.\nUnit tests should be called ",(0,s.jsx)(n.code,{children:"*.test.ts"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"To run only unit tests, run:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"yarn test\n"})}),"\n",(0,s.jsx)(n.h3,{id:"running-a-single-test",children:"Running a single test"}),"\n",(0,s.jsx)(n.p,{children:"To run a single test, run the following from within a workspace:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"yarn test:single /path/to/yourtest.test.ts\n"})}),"\n",(0,s.jsx)(n.p,{children:"This is useful for developing individual features."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Integration tests"})," cover logic that requires making calls to outside APIs (often integration with other services)."]}),"\n",(0,s.jsxs)(n.p,{children:["If you add support for a new external API, please add a new integration test.\nIntegration tests should be called ",(0,s.jsx)(n.code,{children:"*.int.test.ts"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Note that most integration tests require credentials or other setup. You will likely need to set up a ",(0,s.jsx)(n.code,{children:"langchain/.env"})," or ",(0,s.jsx)(n.code,{children:"libs/langchain-community/.env"})," file\nlike the example ",(0,s.jsx)(n.a,{href:"https://github.com/langchain-ai/langchainjs/blob/main/langchain/.env.example",children:"here"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["We generally recommend only running integration tests with ",(0,s.jsx)(n.code,{children:"yarn test:single"}),", but if you want to run all integration tests, run:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"yarn test:integration\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);
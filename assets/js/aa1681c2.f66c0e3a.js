(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6510],{2584:(e,n,s)=>{"use strict";s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>h,default:()=>g,frontMatter:()=>l,metadata:()=>m,toc:()=>u});var a=s(74848),t=s(28453),o=s(64428),r=s(78847),i=s(55246),c=s.n(i);const l={hide_table_of_contents:!0},h="Convex Chat Memory",m={id:"integrations/chat_memory/convex",title:"Convex Chat Memory",description:"For longer-term persistence across chat sessions, you can swap out the default in-memory chatHistory that backs chat memory classes like BufferMemory for Convex.",source:"@site/docs/integrations/chat_memory/convex.mdx",sourceDirName:"integrations/chat_memory",slug:"/integrations/chat_memory/convex",permalink:"/docs/integrations/chat_memory/convex",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/chat_memory/convex.mdx",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0}},d={},u=[{value:"Setup",id:"setup",level:2},{value:"Create project",id:"create-project",level:3},{value:"Add database accessors",id:"add-database-accessors",level:3},{value:"Configure your schema",id:"configure-your-schema",level:3},{value:"Usage",id:"usage",level:2},...r.toc];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"convex-chat-memory",children:"Convex Chat Memory"}),"\n",(0,a.jsxs)(n.p,{children:["For longer-term persistence across chat sessions, you can swap out the default in-memory ",(0,a.jsx)(n.code,{children:"chatHistory"})," that backs chat memory classes like ",(0,a.jsx)(n.code,{children:"BufferMemory"})," for ",(0,a.jsx)(n.a,{href:"https://convex.dev/",children:"Convex"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,a.jsx)(n.h3,{id:"create-project",children:"Create project"}),"\n",(0,a.jsxs)(n.p,{children:["Get a working ",(0,a.jsx)(n.a,{href:"https://docs.convex.dev/",children:"Convex"})," project set up, for example by using:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm create convex@latest\n"})}),"\n",(0,a.jsx)(n.h3,{id:"add-database-accessors",children:"Add database accessors"}),"\n",(0,a.jsxs)(n.p,{children:["Add query and mutation helpers to ",(0,a.jsx)(n.code,{children:"convex/langchain/db.ts"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",metastring:'title="convex/langchain/db.ts"',children:'export * from "langchain/util/convex";\n'})}),"\n",(0,a.jsx)(n.h3,{id:"configure-your-schema",children:"Configure your schema"}),"\n",(0,a.jsx)(n.p,{children:"Set up your schema (for indexing):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",metastring:'title="convex/schema.ts"',children:'import { defineSchema, defineTable } from "convex/server";\nimport { v } from "convex/values";\n\nexport default defineSchema({\n  messages: defineTable({\n    sessionId: v.string(),\n    message: v.object({\n      type: v.string(),\n      data: v.object({\n        content: v.string(),\n        role: v.optional(v.string()),\n        name: v.optional(v.string()),\n        additional_kwargs: v.optional(v.any()),\n      }),\n    }),\n  }).index("bySessionId", ["sessionId"]),\n});\n'})}),"\n",(0,a.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,a.jsx)(n.p,{children:"Each chat history session stored in Convex must have a unique session id."}),"\n","\n",(0,a.jsx)(r.default,{}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai @langchain/community\n"})}),"\n","\n",(0,a.jsx)(o.A,{language:"typescript",title:"convex/myActions.ts",children:c()})]})}function g(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},55246:e=>{e.exports={content:'"use node";\n\nimport { v } from "convex/values";\nimport { BufferMemory } from "langchain/memory/index";\nimport { ChatOpenAI } from "@langchain/openai";\nimport { ConversationChain } from "langchain/chains";\nimport { ConvexChatMessageHistory } from "@langchain/community/stores/message/convex";\nimport { action } from "./_generated/server.js";\n\nexport const ask = action({\n  args: { sessionId: v.string() },\n  handler: async (ctx, args) => {\n    // pass in a sessionId string\n    const { sessionId } = args;\n\n    const memory = new BufferMemory({\n      chatHistory: new ConvexChatMessageHistory({ sessionId, ctx }),\n    });\n\n    const model = new ChatOpenAI({\n      model: "gpt-3.5-turbo",\n      temperature: 0,\n    });\n\n    const chain = new ConversationChain({ llm: model, memory });\n\n    const res1 = await chain.invoke({ input: "Hi! I\'m Jim." });\n    console.log({ res1 });\n    /*\n      {\n        res1: {\n          text: "Hello Jim! It\'s nice to meet you. My name is AI. How may I assist you today?"\n        }\n      }\n    */\n\n    const res2 = await chain.invoke({\n      input: "What did I just say my name was?",\n    });\n    console.log({ res2 });\n\n    /*\n      {\n        res2: {\n          text: "You said your name was Jim."\n        }\n      }\n    */\n\n    // See the chat history in the Convex database\n    console.log(await memory.chatHistory.getMessages());\n\n    // clear chat history\n    await memory.chatHistory.clear();\n  },\n});\n',imports:[{local:"BufferMemory",imported:"BufferMemory",source:"langchain/memory/index"},{local:"ChatOpenAI",imported:"ChatOpenAI",source:"@langchain/openai"},{local:"ConversationChain",imported:"ConversationChain",source:"langchain/chains"},{local:"ConvexChatMessageHistory",imported:"ConvexChatMessageHistory",source:"@langchain/community/stores/message/convex"}]}}}]);
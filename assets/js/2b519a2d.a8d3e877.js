(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6417],{79927:(n,e,o)=>{"use strict";o.r(e),o.d(e,{assets:()=>h,contentTitle:()=>m,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>g});var t=o(74848),s=o(28453),a=o(64428),i=o(78847),r=o(60931),c=o.n(r);const l={hide_table_of_contents:!0,sidebar_class_name:"node-only"},m="MongoDB Chat Memory",d={id:"integrations/chat_memory/mongodb",title:"MongoDB Chat Memory",description:"Only available on Node.js.",source:"@site/docs/integrations/chat_memory/mongodb.mdx",sourceDirName:"integrations/chat_memory",slug:"/integrations/chat_memory/mongodb",permalink:"/docs/integrations/chat_memory/mongodb",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/chat_memory/mongodb.mdx",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0,sidebar_class_name:"node-only"}},h={},g=[{value:"Setup",id:"setup",level:2},...i.toc,{value:"Usage",id:"usage",level:2}];function p(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"mongodb-chat-memory",children:"MongoDB Chat Memory"}),"\n",(0,t.jsxs)(e.admonition,{title:"Compatibility",type:"tip",children:[(0,t.jsx)(e.p,{children:"Only available on Node.js."}),(0,t.jsxs)(e.p,{children:["You can still create API routes that use MongoDB with Next.js by setting the ",(0,t.jsx)(e.code,{children:"runtime"})," variable to ",(0,t.jsx)(e.code,{children:"nodejs"})," like so:"]}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:'export const runtime = "nodejs";\n'})}),(0,t.jsxs)(e.p,{children:["You can read more about Edge runtimes in the Next.js documentation ",(0,t.jsx)(e.a,{href:"https://nextjs.org/docs/app/building-your-application/rendering/edge-and-nodejs-runtimes",children:"here"}),"."]})]}),"\n",(0,t.jsxs)(e.p,{children:["For longer-term persistence across chat sessions, you can swap out the default in-memory ",(0,t.jsx)(e.code,{children:"chatHistory"})," that backs chat memory classes like ",(0,t.jsx)(e.code,{children:"BufferMemory"})," for a MongoDB instance."]}),"\n",(0,t.jsx)(e.h2,{id:"setup",children:"Setup"}),"\n",(0,t.jsx)(e.p,{children:"You need to install Node MongoDB SDK in your project:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install -S mongodb\n"})}),"\n","\n",(0,t.jsx)(i.default,{}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai @langchain/community\n"})}),"\n",(0,t.jsx)(e.p,{children:"You will also need a MongoDB instance to connect to."}),"\n",(0,t.jsx)(e.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(e.p,{children:"Each chat history session stored in MongoDB must have a unique session id."}),"\n","\n",(0,t.jsx)(a.A,{language:"typescript",children:c()})]})}function u(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(p,{...n})}):p(n)}},60931:n=>{n.exports={content:'import { MongoClient, ObjectId } from "mongodb";\nimport { BufferMemory } from "langchain/memory/index";\nimport { ChatOpenAI } from "@langchain/openai";\nimport { ConversationChain } from "langchain/chains";\nimport { MongoDBChatMessageHistory } from "@langchain/mongodb";\n\nconst client = new MongoClient(process.env.MONGODB_ATLAS_URI || "", {\n  driverInfo: { name: "langchainjs" },\n});\nawait client.connect();\nconst collection = client.db("langchain").collection("memory");\n\n// generate a new sessionId string\nconst sessionId = new ObjectId().toString();\n\nconst memory = new BufferMemory({\n  chatHistory: new MongoDBChatMessageHistory({\n    collection,\n    sessionId,\n  }),\n});\n\nconst model = new ChatOpenAI({\n  model: "gpt-3.5-turbo",\n  temperature: 0,\n});\n\nconst chain = new ConversationChain({ llm: model, memory });\n\nconst res1 = await chain.invoke({ input: "Hi! I\'m Jim." });\nconsole.log({ res1 });\n/*\n  {\n    res1: {\n      text: "Hello Jim! It\'s nice to meet you. My name is AI. How may I assist you today?"\n    }\n  }\n  */\n\nconst res2 = await chain.invoke({ input: "What did I just say my name was?" });\nconsole.log({ res2 });\n\n/*\n  {\n    res1: {\n      text: "You said your name was Jim."\n    }\n  }\n  */\n\n// See the chat history in the MongoDb\nconsole.log(await memory.chatHistory.getMessages());\n\n// clear chat history\nawait memory.chatHistory.clear();\n',imports:[{local:"BufferMemory",imported:"BufferMemory",source:"langchain/memory/index"},{local:"ChatOpenAI",imported:"ChatOpenAI",source:"@langchain/openai"},{local:"ConversationChain",imported:"ConversationChain",source:"langchain/chains"},{local:"MongoDBChatMessageHistory",imported:"MongoDBChatMessageHistory",source:"@langchain/mongodb"}]}}}]);
(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4421,65],{35490:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>b,contentTitle:()=>w,default:()=>O,frontMatter:()=>y,metadata:()=>S,toc:()=>j});var o=t(74848),a=t(28453),s=t(64428),i=t(78847),r=t(50677),c=t.n(r),l=t(45055),d=t.n(l),m=t(1151),p=t.n(m),h=t(85566),g=t.n(h),u=t(94489),f=t.n(u),x=t(83286),v=t.n(x);const y={sidebar_class_name:"node-only"},w="Faiss",S={id:"integrations/vectorstores/faiss",title:"Faiss",description:"Only available on Node.js.",source:"@site/docs/integrations/vectorstores/faiss.mdx",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/faiss",permalink:"/docs/integrations/vectorstores/faiss",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/vectorstores/faiss.mdx",tags:[],version:"current",frontMatter:{sidebar_class_name:"node-only"},sidebar:"integrations",previous:{title:"Elasticsearch",permalink:"/docs/integrations/vectorstores/elasticsearch"},next:{title:"Google Vertex AI Matching Engine",permalink:"/docs/integrations/vectorstores/googlevertexai"}},b={},j=[{value:"Setup",id:"setup",level:2},{value:"Usage",id:"usage",level:2},...i.toc,{value:"Create a new index from texts",id:"create-a-new-index-from-texts",level:3},{value:"Create a new index from a loader",id:"create-a-new-index-from-a-loader",level:3},{value:"Deleting vectors",id:"deleting-vectors",level:3},{value:"Merging indexes and creating new index from another instance",id:"merging-indexes-and-creating-new-index-from-another-instance",level:3},{value:"Save an index to file and load it again",id:"save-an-index-to-file-and-load-it-again",level:3},{value:"Load the saved file from Python&#39;s implementation",id:"load-the-saved-file-from-pythons-implementation",level:3}];function F(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"faiss",children:"Faiss"}),"\n",(0,o.jsx)(n.admonition,{title:"Compatibility",type:"tip",children:(0,o.jsx)(n.p,{children:"Only available on Node.js."})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://github.com/facebookresearch/faiss",children:"Faiss"})," is a library for efficient similarity search and clustering of dense vectors."]}),"\n",(0,o.jsxs)(n.p,{children:["Langchainjs supports using Faiss as a vectorstore that can be saved to file. It also provides the ability to read the saved file from ",(0,o.jsx)(n.a,{href:"https://python.langchain.com/docs/integrations/vectorstores/faiss#saving-and-loading",children:"Python's implementation"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,o.jsxs)(n.p,{children:["Install the ",(0,o.jsx)(n.a,{href:"https://github.com/ewfian/faiss-node",children:"faiss-node"}),", which is a Node.js bindings for ",(0,o.jsx)(n.a,{href:"https://github.com/facebookresearch/faiss",children:"Faiss"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install -S faiss-node\n"})}),"\n",(0,o.jsxs)(n.p,{children:["To enable the ability to read the saved file from ",(0,o.jsx)(n.a,{href:"https://python.langchain.com/docs/integrations/vectorstores/faiss#saving-and-loading",children:"Python's implementation"}),", the ",(0,o.jsx)(n.a,{href:"https://github.com/ewfian/pickleparser",children:"pickleparser"})," also needs to install."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install -S pickleparser\n"})}),"\n",(0,o.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n","\n",(0,o.jsx)(i.default,{}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai @langchain/community\n"})}),"\n",(0,o.jsx)(n.h3,{id:"create-a-new-index-from-texts",children:"Create a new index from texts"}),"\n","\n",(0,o.jsx)(s.A,{language:"typescript",children:c()}),"\n",(0,o.jsx)(n.h3,{id:"create-a-new-index-from-a-loader",children:"Create a new index from a loader"}),"\n","\n",(0,o.jsx)(s.A,{language:"typescript",children:d()}),"\n",(0,o.jsx)(n.h3,{id:"deleting-vectors",children:"Deleting vectors"}),"\n","\n",(0,o.jsx)(s.A,{language:"typescript",children:p()}),"\n",(0,o.jsx)(n.h3,{id:"merging-indexes-and-creating-new-index-from-another-instance",children:"Merging indexes and creating new index from another instance"}),"\n","\n",(0,o.jsx)(s.A,{language:"typescript",children:g()}),"\n",(0,o.jsx)(n.h3,{id:"save-an-index-to-file-and-load-it-again",children:"Save an index to file and load it again"}),"\n","\n",(0,o.jsx)(s.A,{language:"typescript",children:f()}),"\n",(0,o.jsxs)(n.h3,{id:"load-the-saved-file-from-pythons-implementation",children:["Load the saved file from ",(0,o.jsx)(n.a,{href:"https://python.langchain.com/docs/integrations/vectorstores/faiss#saving-and-loading",children:"Python's implementation"})]}),"\n","\n",(0,o.jsx)(s.A,{language:"typescript",children:v()})]})}function O(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(F,{...e})}):F(e)}},78847:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var o=t(74848),a=t(28453);const s={},i=void 0,r={id:"mdx_components/integration_install_tooltip",title:"integration_install_tooltip",description:"See this section for general instructions on installing integration packages.",source:"@site/docs/mdx_components/integration_install_tooltip.mdx",sourceDirName:"mdx_components",slug:"/mdx_components/integration_install_tooltip",permalink:"/docs/mdx_components/integration_install_tooltip",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/mdx_components/integration_install_tooltip.mdx",tags:[],version:"current",frontMatter:{}},c={},l=[];function d(e){const n={a:"a",admonition:"admonition",p:"p",...(0,a.R)(),...e.components};return(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["See ",(0,o.jsx)(n.a,{href:"/docs/how_to/installation#installing-integration-packages",children:"this section for general instructions on installing integration packages"}),"."]})})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},50677:e=>{e.exports={content:'import { FaissStore } from "@langchain/community/vectorstores/faiss";\nimport { OpenAIEmbeddings } from "@langchain/openai";\n\nexport const run = async () => {\n  const vectorStore = await FaissStore.fromTexts(\n    ["Hello world", "Bye bye", "hello nice world"],\n    [{ id: 2 }, { id: 1 }, { id: 3 }],\n    new OpenAIEmbeddings()\n  );\n\n  const resultOne = await vectorStore.similaritySearch("hello world", 1);\n  console.log(resultOne);\n};\n',imports:[{local:"FaissStore",imported:"FaissStore",source:"@langchain/community/vectorstores/faiss"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"}]}},1151:e=>{e.exports={content:'import { FaissStore } from "@langchain/community/vectorstores/faiss";\nimport { OpenAIEmbeddings } from "@langchain/openai";\nimport { Document } from "@langchain/core/documents";\n\nconst vectorStore = new FaissStore(new OpenAIEmbeddings(), {});\nconst ids = ["2", "1", "4"];\nconst idsReturned = await vectorStore.addDocuments(\n  [\n    new Document({\n      pageContent: "my world",\n      metadata: { tag: 2 },\n    }),\n    new Document({\n      pageContent: "our world",\n      metadata: { tag: 1 },\n    }),\n    new Document({\n      pageContent: "your world",\n      metadata: { tag: 4 },\n    }),\n  ],\n  {\n    ids,\n  }\n);\n\nconsole.log(idsReturned);\n\n/*\n  [ \'2\', \'1\', \'4\' ]\n*/\n\nconst docs = await vectorStore.similaritySearch("my world", 3);\n\nconsole.log(docs);\n\n/*\n[\n  Document { pageContent: \'my world\', metadata: { tag: 2 } },\n  Document { pageContent: \'your world\', metadata: { tag: 4 } },\n  Document { pageContent: \'our world\', metadata: { tag: 1 } }\n]\n*/\n\nawait vectorStore.delete({ ids: [ids[0], ids[1]] });\n\nconst docs2 = await vectorStore.similaritySearch("my world", 3);\n\nconsole.log(docs2);\n\n/*\n[ Document { pageContent: \'your world\', metadata: { tag: 4 } } ]\n*/\n',imports:[{local:"FaissStore",imported:"FaissStore",source:"@langchain/community/vectorstores/faiss"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"},{local:"Document",imported:"Document",source:"@langchain/core/documents"}]}},45055:e=>{e.exports={content:'import { FaissStore } from "@langchain/community/vectorstores/faiss";\nimport { OpenAIEmbeddings } from "@langchain/openai";\nimport { TextLoader } from "langchain/document_loaders/fs/text";\n\n// Create docs with a loader\nconst loader = new TextLoader("src/document_loaders/example_data/example.txt");\nconst docs = await loader.load();\n\n// Load the docs into the vector store\nconst vectorStore = await FaissStore.fromDocuments(\n  docs,\n  new OpenAIEmbeddings()\n);\n\n// Search for the most similar document\nconst resultOne = await vectorStore.similaritySearch("hello world", 1);\nconsole.log(resultOne);\n',imports:[{local:"FaissStore",imported:"FaissStore",source:"@langchain/community/vectorstores/faiss"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"},{local:"TextLoader",imported:"TextLoader",source:"langchain/document_loaders/fs/text"}]}},83286:e=>{e.exports={content:'import { FaissStore } from "@langchain/community/vectorstores/faiss";\nimport { OpenAIEmbeddings } from "@langchain/openai";\n\n// The directory of data saved from Python\nconst directory = "your/directory/here";\n\n// Load the vector store from the directory\nconst loadedVectorStore = await FaissStore.loadFromPython(\n  directory,\n  new OpenAIEmbeddings()\n);\n\n// Search for the most similar document\nconst result = await loadedVectorStore.similaritySearch("test", 2);\nconsole.log("result", result);\n',imports:[{local:"FaissStore",imported:"FaissStore",source:"@langchain/community/vectorstores/faiss"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"}]}},85566:e=>{e.exports={content:'import { FaissStore } from "@langchain/community/vectorstores/faiss";\nimport { OpenAIEmbeddings } from "@langchain/openai";\n\nexport const run = async () => {\n  // Create an initial vector store\n  const vectorStore = await FaissStore.fromTexts(\n    ["Hello world", "Bye bye", "hello nice world"],\n    [{ id: 2 }, { id: 1 }, { id: 3 }],\n    new OpenAIEmbeddings()\n  );\n\n  // Create another vector store from texts\n  const vectorStore2 = await FaissStore.fromTexts(\n    ["Some text"],\n    [{ id: 1 }],\n    new OpenAIEmbeddings()\n  );\n\n  // merge the first vector store into vectorStore2\n  await vectorStore2.mergeFrom(vectorStore);\n\n  const resultOne = await vectorStore2.similaritySearch("hello world", 1);\n  console.log(resultOne);\n\n  // You can also create a new vector store from another FaissStore index\n  const vectorStore3 = await FaissStore.fromIndex(\n    vectorStore2,\n    new OpenAIEmbeddings()\n  );\n  const resultTwo = await vectorStore3.similaritySearch("Bye bye", 1);\n  console.log(resultTwo);\n};\n',imports:[{local:"FaissStore",imported:"FaissStore",source:"@langchain/community/vectorstores/faiss"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"}]}},94489:e=>{e.exports={content:'import { FaissStore } from "@langchain/community/vectorstores/faiss";\nimport { OpenAIEmbeddings } from "@langchain/openai";\n\n// Create a vector store through any method, here from texts as an example\nconst vectorStore = await FaissStore.fromTexts(\n  ["Hello world", "Bye bye", "hello nice world"],\n  [{ id: 2 }, { id: 1 }, { id: 3 }],\n  new OpenAIEmbeddings()\n);\n\n// Save the vector store to a directory\nconst directory = "your/directory/here";\n\nawait vectorStore.save(directory);\n\n// Load the vector store from the same directory\nconst loadedVectorStore = await FaissStore.load(\n  directory,\n  new OpenAIEmbeddings()\n);\n\n// vectorStore and loadedVectorStore are identical\nconst result = await loadedVectorStore.similaritySearch("hello world", 1);\nconsole.log(result);\n',imports:[{local:"FaissStore",imported:"FaissStore",source:"@langchain/community/vectorstores/faiss"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"}]}}}]);
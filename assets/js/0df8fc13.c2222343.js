"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[240],{66596:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var a=t(74848),r=t(28453),s=t(78847),i=t(27846);const o={sidebar_class_name:"hidden",title:"How to map values to a database"},l=void 0,c={id:"how_to/graph_mapping",title:"How to map values to a database",description:"In this guide we\u2019ll go over strategies to improve graph database query",source:"@site/docs/how_to/graph_mapping.mdx",sourceDirName:"how_to",slug:"/how_to/graph_mapping",permalink:"/docs/how_to/graph_mapping",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/how_to/graph_mapping.mdx",tags:[],version:"current",frontMatter:{sidebar_class_name:"hidden",title:"How to map values to a database"},sidebar:"tutorialSidebar",previous:{title:"How to construct knowledge graphs",permalink:"/docs/how_to/graph_constructing"},next:{title:"How to improve results with prompting",permalink:"/docs/how_to/graph_prompting"}},u={},p=[{value:"Setup",id:"setup",level:2},{value:"Install dependencies",id:"install-dependencies",level:4},...s.toc,{value:"Set environment variables",id:"set-environment-variables",level:4},{value:"Detecting entities in the user input",id:"detecting-entities-in-the-user-input",level:2},{value:"Custom Cypher generating chain",id:"custom-cypher-generating-chain",level:2}];function h(e){const n={a:"a",code:"code",h2:"h2",h4:"h4",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"In this guide we\u2019ll go over strategies to improve graph database query\ngeneration by mapping values from user inputs to database. When using\nthe built-in graph chains, the LLM is aware of the graph schema, but has\nno information about the values of properties stored in the database.\nTherefore, we can introduce a new step in graph database QA system to\naccurately map values."}),"\n",(0,a.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,a.jsx)(n.h4,{id:"install-dependencies",children:"Install dependencies"}),"\n","\n",(0,a.jsx)(s.default,{}),"\n",(0,a.jsx)(i.A,{children:(0,a.jsx)(n.p,{children:"langchain @langchain/community @langchain/openai neo4j-driver zod"})}),"\n",(0,a.jsx)(n.h4,{id:"set-environment-variables",children:"Set environment variables"}),"\n",(0,a.jsx)(n.p,{children:"We\u2019ll use OpenAI in this example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-env",children:"OPENAI_API_KEY=your-api-key\n\n# Optional, use LangSmith for best-in-class observability\nLANGSMITH_API_KEY=your-api-key\nLANGCHAIN_TRACING_V2=true\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Next, we need to define Neo4j credentials. Follow ",(0,a.jsx)(n.a,{href:"https://neo4j.com/docs/operations-manual/current/installation/",children:"these installation\nsteps"}),"\nto set up a Neo4j database."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-env",children:'NEO4J_URI="bolt://localhost:7687"\nNEO4J_USERNAME="neo4j"\nNEO4J_PASSWORD="password"\n'})}),"\n",(0,a.jsx)(n.p,{children:"The below example will create a connection with a Neo4j database and\nwill populate it with example data about movies and their actors."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'import "neo4j-driver";\nimport { Neo4jGraph } from "@langchain/community/graphs/neo4j_graph";\n\nconst url = Deno.env.get("NEO4J_URI");\nconst username = Deno.env.get("NEO4J_USER");\nconst password = Deno.env.get("NEO4J_PASSWORD");\nconst graph = await Neo4jGraph.initialize({ url, username, password });\n\n// Import movie information\nconst moviesQuery = `LOAD CSV WITH HEADERS FROM \n\'https://raw.githubusercontent.com/tomasonjo/blog-datasets/main/movies/movies_small.csv\'\nAS row\nMERGE (m:Movie {id:row.movieId})\nSET m.released = date(row.released),\n    m.title = row.title,\n    m.imdbRating = toFloat(row.imdbRating)\nFOREACH (director in split(row.director, \'|\') | \n    MERGE (p:Person {name:trim(director)})\n    MERGE (p)-[:DIRECTED]->(m))\nFOREACH (actor in split(row.actors, \'|\') | \n    MERGE (p:Person {name:trim(actor)})\n    MERGE (p)-[:ACTED_IN]->(m))\nFOREACH (genre in split(row.genres, \'|\') | \n    MERGE (g:Genre {name:trim(genre)})\n    MERGE (m)-[:IN_GENRE]->(g))`;\n\nawait graph.query(moviesQuery);\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"Schema refreshed successfully.\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"[]\n"})}),"\n",(0,a.jsx)(n.h2,{id:"detecting-entities-in-the-user-input",children:"Detecting entities in the user input"}),"\n",(0,a.jsx)(n.p,{children:"We have to extract the types of entities/values we want to map to a\ngraph database. In this example, we are dealing with a movie graph, so\nwe can map movies and people to the database."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'import { ChatPromptTemplate } from "@langchain/core/prompts";\nimport { ChatOpenAI } from "@langchain/openai";\nimport { z } from "zod";\n\nconst llm = new ChatOpenAI({ model: "gpt-3.5-turbo", temperature: 0 });\n\nconst entities = z\n  .object({\n    names: z\n      .array(z.string())\n      .describe("All the person or movies appearing in the text"),\n  })\n  .describe("Identifying information about entities.");\n\nconst prompt = ChatPromptTemplate.fromMessages([\n  ["system", "You are extracting person and movies from the text."],\n  [\n    "human",\n    "Use the given format to extract information from the following\\ninput: {question}",\n  ],\n]);\n\nconst entityChain = prompt.pipe(llm.withStructuredOutput(entities));\n'})}),"\n",(0,a.jsx)(n.p,{children:"We can test the entity extraction chain."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'const entities = await entityChain.invoke({\n  question: "Who played in Casino movie?",\n});\nentities;\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:'{ names: [ "Casino" ] }\n'})}),"\n",(0,a.jsxs)(n.p,{children:["We will utilize a simple ",(0,a.jsx)(n.code,{children:"CONTAINS"})," clause to match entities to\ndatabase. In practice, you might want to use a fuzzy search or a\nfulltext index to allow for minor misspellings."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'const matchQuery = `\nMATCH (p:Person|Movie)\nWHERE p.name CONTAINS $value OR p.title CONTAINS $value\nRETURN coalesce(p.name, p.title) AS result, labels(p)[0] AS type\nLIMIT 1`;\n\nconst matchToDatabase = async (values) => {\n  let result = "";\n  for (const entity of values.names) {\n    const response = await graph.query(matchQuery, {\n      value: entity,\n    });\n    if (response.length > 0) {\n      result += `${entity} maps to ${response[0]["result"]} ${response[0]["type"]} in database\\n`;\n    }\n  }\n  return result;\n};\n\nawait matchToDatabase(entities);\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:'"Casino maps to Casino Movie in database\\n"\n'})}),"\n",(0,a.jsx)(n.h2,{id:"custom-cypher-generating-chain",children:"Custom Cypher generating chain"}),"\n",(0,a.jsx)(n.p,{children:"We need to define a custom Cypher prompt that takes the entity mapping\ninformation along with the schema and the user question to construct a\nCypher statement. We will be using the LangChain expression language to\naccomplish that."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'import { StringOutputParser } from "@langchain/core/output_parsers";\nimport {\n  RunnablePassthrough,\n  RunnableSequence,\n} from "@langchain/core/runnables";\n\n// Generate Cypher statement based on natural language input\nconst cypherTemplate = `Based on the Neo4j graph schema below, write a Cypher query that would answer the user\'s question:\n{schema}\nEntities in the question map to the following database values:\n{entities_list}\nQuestion: {question}\nCypher query:`;\n\nconst cypherPrompt = ChatPromptTemplate.fromMessages([\n  [\n    "system",\n    "Given an input question, convert it to a Cypher query. No pre-amble.",\n  ],\n  ["human", cypherTemplate],\n]);\n\nconst llmWithStop = llm.bind({ stop: ["\\nCypherResult:"] });\n\nconst cypherResponse = RunnableSequence.from([\n  RunnablePassthrough.assign({ names: entityChain }),\n  RunnablePassthrough.assign({\n    entities_list: async (x) => matchToDatabase(x.names),\n    schema: async (_) => graph.getSchema(),\n  }),\n  cypherPrompt,\n  llmWithStop,\n  new StringOutputParser(),\n]);\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'const cypher = await cypherResponse.invoke({\n  question: "Who played in Casino movie?",\n});\ncypher;\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"'MATCH (:Movie {title: \"Casino\"})<-[:ACTED_IN]-(actor)\\nRETURN actor.name'\n"})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},19365:(e,n,t)=>{t.d(n,{A:()=>i});t(96540);var a=t(34164);const r={tabItem:"tabItem_Ymn6"};var s=t(74848);function i(e){let{children:n,hidden:t,className:i}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,a.A)(r.tabItem,i),hidden:t,children:n})}},11470:(e,n,t)=>{t.d(n,{A:()=>j});var a=t(96540),r=t(34164),s=t(23104),i=t(56347),o=t(205),l=t(57485),c=t(31682),u=t(89466);function p(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return p(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}(t);return function(e){const n=(0,c.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function d(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const r=(0,i.W6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(s),(0,a.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(r.location.search);n.set(s,e),r.replace({...r.location,search:n.toString()})}),[s,r])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,s=h(e),[i,l]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!d({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:s}))),[c,p]=m({queryString:t,groupId:r}),[g,b]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,s]=(0,u.Dv)(t);return[r,(0,a.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:r}),v=(()=>{const e=c??g;return d({value:e,tabValues:s})?e:null})();(0,o.A)((()=>{v&&l(v)}),[v]);return{selectedValue:i,selectValue:(0,a.useCallback)((e=>{if(!d({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),p(e),b(e)}),[p,b,s]),tabValues:s}}var b=t(92303);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=t(74848);function y(e){let{className:n,block:t,selectedValue:a,selectValue:i,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),u=e=>{const n=e.currentTarget,t=l.indexOf(n),r=o[t].value;r!==a&&(c(n),i(r))},p=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},n),children:o.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>l.push(e),onKeyDown:p,onClick:u,...s,className:(0,r.A)("tabs__item",v.tabItem,s?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function x(e){let{lazy:n,children:t,selectedValue:r}=e;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function w(e){const n=g(e);return(0,f.jsxs)("div",{className:(0,r.A)("tabs-container",v.tabList),children:[(0,f.jsx)(y,{...n,...e}),(0,f.jsx)(x,{...n,...e})]})}function j(e){const n=(0,b.A)();return(0,f.jsx)(w,{...e,children:p(e.children)},String(n))}},27846:(e,n,t)=>{t.d(n,{A:()=>o});t(96540);var a=t(11470),r=t(19365),s=t(21432),i=t(74848);function o(e){let{children:n}=e;return(0,i.jsxs)(a.A,{groupId:"npm2yarn",children:[(0,i.jsx)(r.A,{value:"npm",label:"npm",children:(0,i.jsxs)(s.A,{language:"bash",children:["npm i ",n]})}),(0,i.jsx)(r.A,{value:"yarn",label:"yarn",default:!0,children:(0,i.jsxs)(s.A,{language:"bash",children:["yarn add ",n]})}),(0,i.jsx)(r.A,{value:"pnpm",label:"pnpm",children:(0,i.jsxs)(s.A,{language:"bash",children:["pnpm add ",n]})})]})}}}]);
(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5638],{39277:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>d,default:()=>u,frontMatter:()=>l,metadata:()=>g,toc:()=>h});var s=t(74848),o=t(28453),r=t(78847),a=t(64428),c=t(51029),i=t.n(c);const l={},d="Vercel Postgres",g={id:"integrations/vectorstores/vercel_postgres",title:"Vercel Postgres",description:"LangChain.js supports using the @vercel/postgres package to use generic Postgres databases",source:"@site/docs/integrations/vectorstores/vercel_postgres.mdx",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/vercel_postgres",permalink:"/docs/integrations/vectorstores/vercel_postgres",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/vectorstores/vercel_postgres.mdx",tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Vectara",permalink:"/docs/integrations/vectorstores/vectara"},next:{title:"Voy",permalink:"/docs/integrations/vectorstores/voy"}},p={},h=[{value:"Setup",id:"setup",level:2},...r.toc,{value:"Connecting to Vercel Postgres",id:"connecting-to-vercel-postgres",level:3},{value:"Connecting to other databases",id:"connecting-to-other-databases",level:3},{value:"Usage",id:"usage",level:2}];function m(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"vercel-postgres",children:"Vercel Postgres"}),"\n",(0,s.jsxs)(n.p,{children:["LangChain.js supports using the ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/@vercel/postgres",children:(0,s.jsx)(n.code,{children:"@vercel/postgres"})})," package to use generic Postgres databases\nas vector stores, provided they support the ",(0,s.jsx)(n.a,{href:"https://github.com/pgvector/pgvector",children:(0,s.jsx)(n.code,{children:"pgvector"})})," Postgres extension."]}),"\n",(0,s.jsx)(n.p,{children:"This integration is particularly useful from web environments like Edge functions."}),"\n",(0,s.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,s.jsxs)(n.p,{children:["To work with Vercel Postgres, you need to install the ",(0,s.jsx)(n.code,{children:"@vercel/postgres"})," package:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @vercel/postgres\n"})}),"\n","\n",(0,s.jsx)(r.default,{}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/community\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This integration automatically connects using the connection string set under ",(0,s.jsx)(n.code,{children:"process.env.POSTGRES_URL"}),".\nYou can also pass a connection string manually like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'const vectorstore = await VercelPostgres.initialize(new OpenAIEmbeddings(), {\n  postgresConnectionOptions: {\n    connectionString:\n      "postgres://<username>:<password>@<hostname>:<port>/<dbname>",\n  },\n});\n'})}),"\n",(0,s.jsx)(n.h3,{id:"connecting-to-vercel-postgres",children:"Connecting to Vercel Postgres"}),"\n",(0,s.jsxs)(n.p,{children:["A simple way to get started is to create a serverless ",(0,s.jsx)(n.a,{href:"https://vercel.com/docs/storage/vercel-postgres/quickstart",children:"Vercel Postgres instance"}),".\nIf you're deploying to a Vercel project with an associated Vercel Postgres instance, the required ",(0,s.jsx)(n.code,{children:"POSTGRES_URL"})," environment variable\nwill already be populated in hosted environments."]}),"\n",(0,s.jsx)(n.h3,{id:"connecting-to-other-databases",children:"Connecting to other databases"}),"\n",(0,s.jsxs)(n.p,{children:["If you prefer to host your own Postgres instance, you can use a similar flow to LangChain's ",(0,s.jsx)(n.a,{href:"/docs/integrations/vectorstores/pgvector",children:"PGVector"}),"\nvectorstore integration and set the connection string either as an environment variable or as shown above."]}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n","\n",(0,s.jsx)(a.A,{language:"typescript",children:i()})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},51029:e=>{e.exports={content:'import { CohereEmbeddings } from "@langchain/cohere";\nimport { VercelPostgres } from "@langchain/community/vectorstores/vercel_postgres";\n\n// Config is only required if you want to override default values.\nconst config = {\n  // tableName: "testvercelvectorstorelangchain",\n  // postgresConnectionOptions: {\n  //   connectionString: "postgres://<username>:<password>@<hostname>:<port>/<dbname>",\n  // },\n  // columns: {\n  //   idColumnName: "id",\n  //   vectorColumnName: "vector",\n  //   contentColumnName: "content",\n  //   metadataColumnName: "metadata",\n  // },\n};\n\nconst vercelPostgresStore = await VercelPostgres.initialize(\n  new CohereEmbeddings(),\n  config\n);\n\nconst docHello = {\n  pageContent: "hello",\n  metadata: { topic: "nonsense" },\n};\nconst docHi = { pageContent: "hi", metadata: { topic: "nonsense" } };\nconst docMitochondria = {\n  pageContent: "Mitochondria is the powerhouse of the cell",\n  metadata: { topic: "science" },\n};\n\nconst ids = await vercelPostgresStore.addDocuments([\n  docHello,\n  docHi,\n  docMitochondria,\n]);\n\nconst results = await vercelPostgresStore.similaritySearch("hello", 2);\nconsole.log(results);\n/*\n  [\n    Document { pageContent: \'hello\', metadata: { topic: \'nonsense\' } },\n    Document { pageContent: \'hi\', metadata: { topic: \'nonsense\' } }\n  ]\n*/\n\n// Metadata filtering\nconst results2 = await vercelPostgresStore.similaritySearch(\n  "Irrelevant query, metadata filtering",\n  2,\n  {\n    topic: "science",\n  }\n);\nconsole.log(results2);\n/*\n  [\n    Document {\n      pageContent: \'Mitochondria is the powerhouse of the cell\',\n      metadata: { topic: \'science\' }\n    }\n  ]\n*/\n\n// Metadata filtering with IN-filters works as well\nconst results3 = await vercelPostgresStore.similaritySearch(\n  "Irrelevant query, metadata filtering",\n  3,\n  {\n    topic: { in: ["science", "nonsense"] },\n  }\n);\nconsole.log(results3);\n/*\n  [\n    Document {\n      pageContent: \'hello\',\n      metadata: { topic: \'nonsense\' }\n    },\n    Document {\n      pageContent: \'hi\',\n      metadata: { topic: \'nonsense\' }\n    },\n    Document {\n      pageContent: \'Mitochondria is the powerhouse of the cell\',\n      metadata: { topic: \'science\' }\n    }\n  ]\n*/\n\n// Upserting is supported as well\nawait vercelPostgresStore.addDocuments(\n  [\n    {\n      pageContent: "ATP is the powerhouse of the cell",\n      metadata: { topic: "science" },\n    },\n  ],\n  { ids: [ids[2]] }\n);\n\nconst results4 = await vercelPostgresStore.similaritySearch(\n  "What is the powerhouse of the cell?",\n  1\n);\nconsole.log(results4);\n/*\n  [\n    Document {\n      pageContent: \'ATP is the powerhouse of the cell\',\n      metadata: { topic: \'science\' }\n    }\n  ]\n*/\n\nawait vercelPostgresStore.delete({ ids: [ids[2]] });\n\nconst results5 = await vercelPostgresStore.similaritySearch(\n  "No more metadata",\n  2,\n  {\n    topic: "science",\n  }\n);\nconsole.log(results5);\n/*\n  []\n*/\n\n// Remember to call .end() to close the connection!\nawait vercelPostgresStore.end();\n',imports:[{local:"CohereEmbeddings",imported:"CohereEmbeddings",source:"@langchain/cohere"},{local:"VercelPostgres",imported:"VercelPostgres",source:"@langchain/community/vectorstores/vercel_postgres"}]}}}]);
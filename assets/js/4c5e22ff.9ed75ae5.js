(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3613],{99438:(n,e,t)=>{"use strict";t.r(e),t.d(e,{assets:()=>p,contentTitle:()=>d,default:()=>f,frontMatter:()=>l,metadata:()=>h,toc:()=>m});var o=t(74848),a=t(28453),s=t(64428),r=t(6387),c=t.n(r),i=t(78847);const l={hide_table_of_contents:!0},d="Blockchain Data",h={id:"integrations/document_loaders/web_loaders/sort_xyz_blockchain",title:"Blockchain Data",description:"This example shows how to load blockchain data, including NFT metadata and transactions for a contract address, via the sort.xyz SQL API.",source:"@site/docs/integrations/document_loaders/web_loaders/sort_xyz_blockchain.mdx",sourceDirName:"integrations/document_loaders/web_loaders",slug:"/integrations/document_loaders/web_loaders/sort_xyz_blockchain",permalink:"/docs/integrations/document_loaders/web_loaders/sort_xyz_blockchain",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/document_loaders/web_loaders/sort_xyz_blockchain.mdx",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"integrations",previous:{title:"Sonix Audio",permalink:"/docs/integrations/document_loaders/web_loaders/sonix_audio_transcription"},next:{title:"Spider",permalink:"/docs/integrations/document_loaders/web_loaders/spider"}},p={},m=[...i.toc];function u(n){const e={code:"code",h1:"h1",p:"p",pre:"pre",...(0,a.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"blockchain-data",children:"Blockchain Data"}),"\n",(0,o.jsx)(e.p,{children:"This example shows how to load blockchain data, including NFT metadata and transactions for a contract address, via the sort.xyz SQL API."}),"\n",(0,o.jsx)(e.p,{children:"You will need a free Sort API key, visiting sort.xyz to obtain one."}),"\n","\n","\n",(0,o.jsx)(i.default,{}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai\n"})}),"\n",(0,o.jsx)(s.A,{language:"typescript",children:c()})]})}function f(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(u,{...n})}):u(n)}},6387:n=>{n.exports={content:'import { SortXYZBlockchainLoader } from "langchain/document_loaders/web/sort_xyz_blockchain";\nimport { OpenAI } from "@langchain/openai";\n\n/**\n * See https://docs.sort.xyz/docs/api-keys to get your free Sort API key.\n * See https://docs.sort.xyz for more information on the available queries.\n * See https://docs.sort.xyz/reference for more information about Sort\'s REST API.\n */\n\n/**\n * Run the example.\n */\nexport const run = async () => {\n  // Initialize the OpenAI model. Use OPENAI_API_KEY from .env in /examples\n  const model = new OpenAI({ temperature: 0.9 });\n\n  const apiKey = "YOUR_SORTXYZ_API_KEY";\n  const contractAddress =\n    "0x887F3909C14DAbd9e9510128cA6cBb448E932d7f".toLowerCase();\n\n  /*\n  Load NFT metadata from the Ethereum blockchain. Hint: to load by a specific ID, see SQL query example below.\n  */\n\n  const nftMetadataLoader = new SortXYZBlockchainLoader({\n    apiKey,\n    query: {\n      type: "NFTMetadata",\n      blockchain: "ethereum",\n      contractAddress,\n    },\n  });\n\n  const nftMetadataDocs = await nftMetadataLoader.load();\n\n  const nftPrompt =\n    "Describe the character with the attributes from the following json document in a 4 sentence story. ";\n  const nftResponse = await model.invoke(\n    nftPrompt + JSON.stringify(nftMetadataDocs[0], null, 2)\n  );\n  console.log(`user > ${nftPrompt}`);\n  console.log(`chatgpt > ${nftResponse}`);\n\n  /*\n    Load the latest transactions for a contract address from the Ethereum blockchain.\n  */\n  const latestTransactionsLoader = new SortXYZBlockchainLoader({\n    apiKey,\n    query: {\n      type: "latestTransactions",\n      blockchain: "ethereum",\n      contractAddress,\n    },\n  });\n\n  const latestTransactionsDocs = await latestTransactionsLoader.load();\n\n  const latestPrompt =\n    "Describe the following json documents in only 4 sentences per document. Include as much detail as possible. ";\n  const latestResponse = await model.invoke(\n    latestPrompt + JSON.stringify(latestTransactionsDocs[0], null, 2)\n  );\n  console.log(`\\n\\nuser > ${nftPrompt}`);\n  console.log(`chatgpt > ${latestResponse}`);\n\n  /*\n    Load metadata for a specific NFT by using raw SQL and the NFT index. See https://docs.sort.xyz for forumulating SQL.\n  */\n\n  const sqlQueryLoader = new SortXYZBlockchainLoader({\n    apiKey,\n    query: `SELECT * FROM ethereum.nft_metadata WHERE contract_address = \'${contractAddress}\' AND token_id = 1 LIMIT 1`,\n  });\n\n  const sqlDocs = await sqlQueryLoader.load();\n\n  const sqlPrompt =\n    "Describe the character with the attributes from the following json document in an ad for a new coffee shop. ";\n  const sqlResponse = await model.invoke(\n    sqlPrompt + JSON.stringify(sqlDocs[0], null, 2)\n  );\n  console.log(`\\n\\nuser > ${sqlPrompt}`);\n  console.log(`chatgpt > ${sqlResponse}`);\n};\n',imports:[{local:"SortXYZBlockchainLoader",imported:"SortXYZBlockchainLoader",source:"langchain/document_loaders/web/sort_xyz_blockchain"},{local:"OpenAI",imported:"OpenAI",source:"@langchain/openai"}]}}}]);
(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7549,65],{62353:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>x,contentTitle:()=>v,default:()=>C,frontMatter:()=>A,metadata:()=>w,toc:()=>b});var o=t(74848),a=t(28453),r=t(78847),s=t(64428),i=t(71209),c=t.n(i),l=t(57888),d=t.n(l),m=t(85281),h=t.n(m),p=t(76937),u=t.n(p),g=t(89040),f=t.n(g);const A={},v="SAP HANA Cloud Vector Engine",w={id:"integrations/vectorstores/hanavector",title:"SAP HANA Cloud Vector Engine",description:"SAP HANA Cloud Vector Engine is a vector store fully integrated into the SAP HANA Cloud database.",source:"@site/docs/integrations/vectorstores/hanavector.mdx",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/hanavector",permalink:"/docs/integrations/vectorstores/hanavector",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/vectorstores/hanavector.mdx",tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Google Vertex AI Matching Engine",permalink:"/docs/integrations/vectorstores/googlevertexai"},next:{title:"HNSWLib",permalink:"/docs/integrations/vectorstores/hnswlib"}},x={},b=[{value:"Setup",id:"setup",level:2},...r.toc,{value:"Create a new index from texts",id:"create-a-new-index-from-texts",level:2},{value:"Create a new index from a loader and perform similarity searches",id:"create-a-new-index-from-a-loader-and-perform-similarity-searches",level:2},{value:"Basic Vectorstore Operations",id:"basic-vectorstore-operations",level:2},{value:"Using a VectorStore as a retriever in chains for retrieval augmented generation (RAG)",id:"using-a-vectorstore-as-a-retriever-in-chains-for-retrieval-augmented-generation-rag",level:2}];function y(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"sap-hana-cloud-vector-engine",children:"SAP HANA Cloud Vector Engine"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://www.sap.com/events/teched/news-guide/ai.html#article8",children:"SAP HANA Cloud Vector Engine"})," is a vector store fully integrated into the ",(0,o.jsx)(n.code,{children:"SAP HANA Cloud database"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,o.jsxs)(n.p,{children:["You'll first need to install either the ",(0,o.jsx)(n.a,{href:"https://www.npmjs.com/package/@sap/hana-client",children:(0,o.jsx)(n.code,{children:"@sap/hana-client"})})," or the ",(0,o.jsx)(n.a,{href:"https://www.npmjs.com/package/hdb",children:(0,o.jsx)(n.code,{children:"hdb"})})," package, and the ",(0,o.jsx)(n.a,{href:"https://www.npmjs.com/package/@langchain/community",children:(0,o.jsx)(n.code,{children:"@langchain/community"})})," package:"]}),"\n","\n",(0,o.jsx)(r.default,{}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install -S @langchain/community @sap/hana-client\n# or\nnpm install -S @langchain/community hdb\n"})}),"\n",(0,o.jsx)(n.p,{children:"You'll also need to have database connection to a HANA Cloud instance."}),"\n","\n",(0,o.jsx)(s.A,{language:"text",children:c()}),"\n",(0,o.jsx)(n.h2,{id:"create-a-new-index-from-texts",children:"Create a new index from texts"}),"\n","\n",(0,o.jsx)(s.A,{language:"typescript",children:d()}),"\n",(0,o.jsx)(n.h2,{id:"create-a-new-index-from-a-loader-and-perform-similarity-searches",children:"Create a new index from a loader and perform similarity searches"}),"\n","\n",(0,o.jsx)(s.A,{language:"typescript",children:h()}),"\n",(0,o.jsx)(n.h2,{id:"basic-vectorstore-operations",children:"Basic Vectorstore Operations"}),"\n","\n",(0,o.jsx)(s.A,{language:"typescript",children:u()}),"\n",(0,o.jsx)(n.h2,{id:"using-a-vectorstore-as-a-retriever-in-chains-for-retrieval-augmented-generation-rag",children:"Using a VectorStore as a retriever in chains for retrieval augmented generation (RAG)"}),"\n","\n",(0,o.jsx)(s.A,{language:"typescript",children:f()})]})}function C(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(y,{...e})}):y(e)}},78847:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var o=t(74848),a=t(28453);const r={},s=void 0,i={id:"mdx_components/integration_install_tooltip",title:"integration_install_tooltip",description:"See this section for general instructions on installing integration packages.",source:"@site/docs/mdx_components/integration_install_tooltip.mdx",sourceDirName:"mdx_components",slug:"/mdx_components/integration_install_tooltip",permalink:"/docs/mdx_components/integration_install_tooltip",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/mdx_components/integration_install_tooltip.mdx",tags:[],version:"current",frontMatter:{}},c={},l=[];function d(e){const n={a:"a",admonition:"admonition",p:"p",...(0,a.R)(),...e.components};return(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["See ",(0,o.jsx)(n.a,{href:"/docs/how_to/installation#installing-integration-packages",children:"this section for general instructions on installing integration packages"}),"."]})})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},76937:e=>{e.exports={content:'import { OpenAIEmbeddings } from "@langchain/openai";\nimport hanaClient from "hdb";\n// or import another node.js driver\n// import hanaClient from "@sap/haha-client";\nimport { Document } from "@langchain/core/documents";\nimport {\n  HanaDB,\n  HanaDBArgs,\n} from "@langchain/community/vectorstores/hanavector";\n\nconst connectionParams = {\n  host: process.env.HANA_HOST,\n  port: process.env.HANA_PORT,\n  user: process.env.HANA_UID,\n  password: process.env.HANA_PWD,\n  // useCesu8 : false\n};\nconst client = hanaClient.createClient(connectionParams);\n// connet to hanaDB\nawait new Promise<void>((resolve, reject) => {\n  client.connect((err: Error) => {\n    // Use arrow function here\n    if (err) {\n      reject(err);\n    } else {\n      console.log("Connected to SAP HANA successfully.");\n      resolve();\n    }\n  });\n});\nconst embeddings = new OpenAIEmbeddings();\n// define instance args\nconst args: HanaDBArgs = {\n  connection: client,\n  tableName: "testBasics",\n};\n\n// Add documents with metadata.\nconst docs: Document[] = [\n  {\n    pageContent: "foo",\n    metadata: { start: 100, end: 150, docName: "foo.txt", quality: "bad" },\n  },\n  {\n    pageContent: "bar",\n    metadata: { start: 200, end: 250, docName: "bar.txt", quality: "good" },\n  },\n];\n\n// Create a LangChain VectorStore interface for the HANA database and specify the table (collection) to use in args.\nconst vectorStore = new HanaDB(embeddings, args);\n// need to initialize once an instance is created.\nawait vectorStore.initialize();\n// Delete already existing documents from the table\nawait vectorStore.delete({ filter: {} });\nawait vectorStore.addDocuments(docs);\n// Query documents with specific metadata.\nconst filterMeta = { quality: "bad" };\nconst query = "foobar";\n// With filtering on {"quality": "bad"}, only one document should be returned\nconst results = await vectorStore.similaritySearch(query, 1, filterMeta);\nconsole.log(results);\n/*\n    [  {\n        pageContent: "foo",\n        metadata: { start: 100, end: 150, docName: "foo.txt", quality: "bad" }\n      }\n    ]\n*/\n// Delete documents with specific metadata.\nawait vectorStore.delete({ filter: filterMeta });\n// Now the similarity search with the same filter will return no results\nconst resultsAfterFilter = await vectorStore.similaritySearch(\n  query,\n  1,\n  filterMeta\n);\nconsole.log(resultsAfterFilter);\n/*\n    []\n*/\nclient.disconnect();\n',imports:[{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"},{local:"Document",imported:"Document",source:"@langchain/core/documents"},{local:"HanaDB",imported:"HanaDB",source:"@langchain/community/vectorstores/hanavector"},{local:"HanaDBArgs",imported:"HanaDBArgs",source:"@langchain/community/vectorstores/hanavector"}]}},89040:e=>{e.exports={content:'import { ChatPromptTemplate } from "@langchain/core/prompts";\nimport { ChatOpenAI, OpenAIEmbeddings } from "@langchain/openai";\nimport { createStuffDocumentsChain } from "langchain/chains/combine_documents";\nimport { createRetrievalChain } from "langchain/chains/retrieval";\nimport hanaClient from "hdb";\nimport {\n  HanaDB,\n  HanaDBArgs,\n} from "@langchain/community/vectorstores/hanavector";\n\n// Connection parameters\nconst connectionParams = {\n  host: process.env.HANA_HOST,\n  port: process.env.HANA_PORT,\n  user: process.env.HANA_UID,\n  password: process.env.HANA_PWD,\n  // useCesu8 : false\n};\nconst client = hanaClient.createClient(connectionParams);\n// connet to hanaDB\nawait new Promise<void>((resolve, reject) => {\n  client.connect((err: Error) => {\n    // Use arrow function here\n    if (err) {\n      reject(err);\n    } else {\n      console.log("Connected to SAP HANA successfully.");\n      resolve();\n    }\n  });\n});\nconst embeddings = new OpenAIEmbeddings();\n\nconst args: HanaDBArgs = {\n  connection: client,\n  tableName: "test_fromDocs",\n};\nconst vectorStore = new HanaDB(embeddings, args);\nawait vectorStore.initialize();\n// Use the store as part of a chain, under the premise that "test_fromDocs" exists and contains the chunked docs.\nconst model = new ChatOpenAI({ modelName: "gpt-3.5-turbo-1106" });\nconst questionAnsweringPrompt = ChatPromptTemplate.fromMessages([\n  [\n    "system",\n    "You are an expert in state of the union topics. You are provided multiple context items that are related to the prompt you have to answer. Use the following pieces of context to answer the question at the end.\\n\\n{context}",\n  ],\n  ["human", "{input}"],\n]);\n\nconst combineDocsChain = await createStuffDocumentsChain({\n  llm: model,\n  prompt: questionAnsweringPrompt,\n});\n\nconst chain = await createRetrievalChain({\n  retriever: vectorStore.asRetriever(),\n  combineDocsChain,\n});\n\n// Ask the first question (and verify how many text chunks have been used).\nconst response = await chain.invoke({\n  input: "What about Mexico and Guatemala?",\n});\n\nconsole.log("Chain response:");\nconsole.log(response.answer);\nconsole.log(\n  `Number of used source document chunks: ${response.context.length}`\n);\n/*\n The United States has set up joint patrols with Mexico and Guatemala to catch more human traffickers.\n Number of used source document chunks: 4\n*/\nconst responseOther = await chain.invoke({\n  input: "What about other countries?",\n});\nconsole.log("Chain response:");\nconsole.log(responseOther.answer);\n/* Ask another question on the same conversational chain. The answer should relate to the previous answer given.\n....including members of NATO, the European Union, and other allies such as Canada....\n*/\nclient.disconnect();\n',imports:[{local:"ChatPromptTemplate",imported:"ChatPromptTemplate",source:"@langchain/core/prompts"},{local:"ChatOpenAI",imported:"ChatOpenAI",source:"@langchain/openai"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"},{local:"createStuffDocumentsChain",imported:"createStuffDocumentsChain",source:"langchain/chains/combine_documents"},{local:"createRetrievalChain",imported:"createRetrievalChain",source:"langchain/chains/retrieval"},{local:"HanaDB",imported:"HanaDB",source:"@langchain/community/vectorstores/hanavector"},{local:"HanaDBArgs",imported:"HanaDBArgs",source:"@langchain/community/vectorstores/hanavector"}]}},85281:e=>{e.exports={content:'import hanaClient from "hdb";\nimport {\n  HanaDB,\n  HanaDBArgs,\n} from "@langchain/community/vectorstores/hanavector";\nimport { OpenAIEmbeddings } from "@langchain/openai";\nimport { TextLoader } from "langchain/document_loaders/fs/text";\nimport { CharacterTextSplitter } from "@langchain/textsplitters";\n\nconst connectionParams = {\n  host: process.env.HANA_HOST,\n  port: process.env.HANA_PORT,\n  user: process.env.HANA_UID,\n  password: process.env.HANA_PWD,\n  // useCesu8 : false\n};\nconst client = hanaClient.createClient(connectionParams);\n// connet to hanaDB\nawait new Promise<void>((resolve, reject) => {\n  client.connect((err: Error) => {\n    // Use arrow function here\n    if (err) {\n      reject(err);\n    } else {\n      console.log("Connected to SAP HANA successfully.");\n      resolve();\n    }\n  });\n});\nconst embeddings = new OpenAIEmbeddings();\nconst args: HanaDBArgs = {\n  connection: client,\n  tableName: "test_fromDocs",\n};\n// Load documents from file\nconst loader = new TextLoader("./state_of_the_union.txt");\nconst rawDocuments = await loader.load();\nconst splitter = new CharacterTextSplitter({\n  chunkSize: 500,\n  chunkOverlap: 0,\n});\nconst documents = await splitter.splitDocuments(rawDocuments);\n// Create a LangChain VectorStore interface for the HANA database and specify the table (collection) to use in args.\nconst vectorStore = new HanaDB(embeddings, args);\nawait vectorStore.initialize();\n// Delete already existing documents from the table\nawait vectorStore.delete({ filter: {} });\n// add the loaded document chunks\nawait vectorStore.addDocuments(documents);\n\n// similarity search (default:\u201cCosine Similarity\u201d, options:["euclidean", "cosine"])\nconst query = "What did the president say about Ketanji Brown Jackson";\nconst docs = await vectorStore.similaritySearch(query, 2);\ndocs.forEach((doc) => {\n  console.log("-".repeat(80));\n  console.log(doc.pageContent);\n});\n/*\n  --------------------------------------------------------------------------------\n  One of the most serious constitutional responsibilities a President has is nominating \n  someone to serve on the United States Supreme Court. \n\n  And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. \n  One of our nation\u2019s top legal minds, who will continue Justice Breyer\u2019s legacy of excellence.\n  --------------------------------------------------------------------------------\n  As I said last year, especially to our younger transgender Americans, I will always have your back as your President, \n  so you can be yourself and reach your God-given potential. \n\n  While it often appears that we never agree, that isn\u2019t true. I signed 80 bipartisan bills into law last year. \n  From preventing government shutdowns to protecting Asian-Americans from still-too-common hate crimes to reforming military justice\n*/\n\n// similiarity search using euclidean distance method\nconst argsL2d: HanaDBArgs = {\n  connection: client,\n  tableName: "test_fromDocs",\n  distanceStrategy: "euclidean",\n};\nconst vectorStoreL2d = new HanaDB(embeddings, argsL2d);\nconst docsL2d = await vectorStoreL2d.similaritySearch(query, 2);\ndocsL2d.forEach((docsL2d) => {\n  console.log("-".repeat(80));\n  console.log(docsL2d.pageContent);\n});\n\n// Output should be the same as the cosine similarity search method.\n\n// Maximal Marginal Relevance Search (MMR)\nconst docsMMR = await vectorStore.maxMarginalRelevanceSearch(query, {\n  k: 2,\n  fetchK: 20,\n});\ndocsMMR.forEach((docsMMR) => {\n  console.log("-".repeat(80));\n  console.log(docsMMR.pageContent);\n});\n/*\n  --------------------------------------------------------------------------------\n  One of the most serious constitutional responsibilities a President has is nominating someone \n  to serve on the United States Supreme Court. \n\n  And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. \n  One of our nation\u2019s top legal minds, who will continue Justice Breyer\u2019s legacy of excellence.\n  --------------------------------------------------------------------------------\n  Groups of citizens blocking tanks with their bodies. Everyone from students to retirees teachers turned \n  soldiers defending their homeland. \n\n  In this struggle as President Zelenskyy said in his speech to the European Parliament \u201cLight will win over darkness.\u201d \n  The Ukrainian Ambassador to the United States is here tonight. \n\n  Let each of us here tonight in this Chamber send an unmistakable signal to Ukraine and to the world.\n*/\nclient.disconnect();\n',imports:[{local:"HanaDB",imported:"HanaDB",source:"@langchain/community/vectorstores/hanavector"},{local:"HanaDBArgs",imported:"HanaDBArgs",source:"@langchain/community/vectorstores/hanavector"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"},{local:"TextLoader",imported:"TextLoader",source:"langchain/document_loaders/fs/text"},{local:"CharacterTextSplitter",imported:"CharacterTextSplitter",source:"@langchain/textsplitters"}]}},57888:e=>{e.exports={content:'import { OpenAIEmbeddings } from "@langchain/openai";\nimport hanaClient from "hdb";\nimport {\n  HanaDB,\n  HanaDBArgs,\n} from "@langchain/community/vectorstores/hanavector";\n\nconst connectionParams = {\n  host: process.env.HANA_HOST,\n  port: process.env.HANA_PORT,\n  user: process.env.HANA_UID,\n  password: process.env.HANA_PWD,\n  // useCesu8 : false\n};\nconst client = hanaClient.createClient(connectionParams);\n// connet to hanaDB\nawait new Promise<void>((resolve, reject) => {\n  client.connect((err: Error) => {\n    // Use arrow function here\n    if (err) {\n      reject(err);\n    } else {\n      console.log("Connected to SAP HANA successfully.");\n      resolve();\n    }\n  });\n});\nconst embeddings = new OpenAIEmbeddings();\nconst args: HanaDBArgs = {\n  connection: client,\n  tableName: "test_fromTexts",\n};\n// This function will create a table "test_fromTexts" if not exist, if exists,\n// then the value will be appended to the table.\nconst vectorStore = await HanaDB.fromTexts(\n  ["Bye bye", "Hello world", "hello nice world"],\n  [\n    { id: 2, name: "2" },\n    { id: 1, name: "1" },\n    { id: 3, name: "3" },\n  ],\n  embeddings,\n  args\n);\n\nconst response = await vectorStore.similaritySearch("hello world", 2);\n\nconsole.log(response);\n\n/* This result is based on no table "test_fromTexts" existing in the database.\n  [\n    { pageContent: \'Hello world\', metadata: { id: 1, name: \'1\' } },\n    { pageContent: \'hello nice world\', metadata: { id: 3, name: \'3\' } }\n  ]\n*/\nclient.disconnect();\n',imports:[{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"},{local:"HanaDB",imported:"HanaDB",source:"@langchain/community/vectorstores/hanavector"},{local:"HanaDBArgs",imported:"HanaDBArgs",source:"@langchain/community/vectorstores/hanavector"}]}},71209:e=>{e.exports={content:'OPENAI_API_KEY = "Your OpenAI API key"\nHANA_HOST = "HANA_DB_ADDRESS"\nHANA_PORT = "HANA_DB_PORT"\nHANA_UID =  "HANA_DB_USER"\nHANA_PWD = "HANA_DB_PASSWORD"',imports:[]}}}]);
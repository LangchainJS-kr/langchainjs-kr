(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5268,65],{88392:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>l,default:()=>u,frontMatter:()=>d,metadata:()=>m,toc:()=>g});var r=n(74848),i=n(28453),o=n(64428),s=n(62483),a=n.n(s),c=n(78847);const d={},l="Time-Weighted Retriever",m={id:"integrations/retrievers/time-weighted-retriever",title:"Time-Weighted Retriever",description:"A Time-Weighted Retriever is a retriever that takes into account recency in addition to similarity. The scoring algorithm is:",source:"@site/docs/integrations/retrievers/time-weighted-retriever.mdx",sourceDirName:"integrations/retrievers",slug:"/integrations/retrievers/time-weighted-retriever",permalink:"/docs/integrations/retrievers/time-weighted-retriever",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/retrievers/time-weighted-retriever.mdx",tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Tavily Search API",permalink:"/docs/integrations/retrievers/tavily"},next:{title:"Vector Store",permalink:"/docs/integrations/retrievers/vectorstore"}},h={},g=[{value:"Usage",id:"usage",level:2},...c.toc];function p(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"time-weighted-retriever",children:"Time-Weighted Retriever"}),"\n",(0,r.jsx)(t.p,{children:"A Time-Weighted Retriever is a retriever that takes into account recency in addition to similarity. The scoring algorithm is:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"let score = (1.0 - this.decayRate) ** hoursPassed + vectorRelevance;\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Notably, ",(0,r.jsx)(t.code,{children:"hoursPassed"}),' above refers to the time since the object in the retriever was last accessed, not since it was created. This means that frequently accessed objects remain "fresh" and score higher.']}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"this.decayRate"}),' is a configurable decimal number between 0 and 1. A lower number means that documents will be "remembered" for longer, while a higher number strongly weights more recently accessed documents.']}),"\n",(0,r.jsxs)(t.p,{children:["Note that setting a decay rate of exactly 0 or 1 makes ",(0,r.jsx)(t.code,{children:"hoursPassed"})," irrelevant and makes this retriever equivalent to a standard vector lookup."]}),"\n",(0,r.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsxs)(t.p,{children:["This example shows how to intialize a ",(0,r.jsx)(t.code,{children:"TimeWeightedVectorStoreRetriever"})," with a vector store.\nIt is important to note that due to required metadata, all documents must be added to the backing vector store using the ",(0,r.jsx)(t.code,{children:"addDocuments"})," method on the ",(0,r.jsx)(t.strong,{children:"retriever"}),", not the vector store itself."]}),"\n","\n","\n",(0,r.jsx)(c.default,{}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai\n"})}),"\n",(0,r.jsx)(o.A,{language:"typescript",children:a()})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},78847:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var r=n(74848),i=n(28453);const o={},s=void 0,a={id:"mdx_components/integration_install_tooltip",title:"integration_install_tooltip",description:"See this section for general instructions on installing integration packages.",source:"@site/docs/mdx_components/integration_install_tooltip.mdx",sourceDirName:"mdx_components",slug:"/mdx_components/integration_install_tooltip",permalink:"/docs/mdx_components/integration_install_tooltip",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/mdx_components/integration_install_tooltip.mdx",tags:[],version:"current",frontMatter:{}},c={},d=[];function l(e){const t={a:"a",admonition:"admonition",p:"p",...(0,i.R)(),...e.components};return(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsxs)(t.p,{children:["See ",(0,r.jsx)(t.a,{href:"/docs/how_to/installation#installing-integration-packages",children:"this section for general instructions on installing integration packages"}),"."]})})}function m(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},62483:e=>{e.exports={content:'import { TimeWeightedVectorStoreRetriever } from "langchain/retrievers/time_weighted";\nimport { MemoryVectorStore } from "langchain/vectorstores/memory";\nimport { OpenAIEmbeddings } from "@langchain/openai";\n\nconst vectorStore = new MemoryVectorStore(new OpenAIEmbeddings());\n\nconst retriever = new TimeWeightedVectorStoreRetriever({\n  vectorStore,\n  memoryStream: [],\n  searchKwargs: 2,\n});\n\nconst documents = [\n  "My name is John.",\n  "My name is Bob.",\n  "My favourite food is pizza.",\n  "My favourite food is pasta.",\n  "My favourite food is sushi.",\n].map((pageContent) => ({ pageContent, metadata: {} }));\n\n// All documents must be added using this method on the retriever (not the vector store!)\n// so that the correct access history metadata is populated\nawait retriever.addDocuments(documents);\n\nconst results1 = await retriever.invoke("What is my favourite food?");\n\nconsole.log(results1);\n\n/*\n[\n  Document { pageContent: \'My favourite food is pasta.\', metadata: {} }\n]\n */\n\nconst results2 = await retriever.invoke("What is my favourite food?");\n\nconsole.log(results2);\n\n/*\n[\n  Document { pageContent: \'My favourite food is pasta.\', metadata: {} }\n]\n */\n',imports:[{local:"TimeWeightedVectorStoreRetriever",imported:"TimeWeightedVectorStoreRetriever",source:"langchain/retrievers/time_weighted"},{local:"MemoryVectorStore",imported:"MemoryVectorStore",source:"langchain/vectorstores/memory"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"}]}}}]);
(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3714],{76524:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>d,default:()=>g,frontMatter:()=>c,metadata:()=>u,toc:()=>l});var r=n(74848),a=n(28453),o=n(64428),s=n(49627),i=n.n(s);const c={},d="Turbopuffer",u={id:"integrations/vectorstores/turbopuffer",title:"Turbopuffer",description:"Setup",source:"@site/docs/integrations/vectorstores/turbopuffer.mdx",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/turbopuffer",permalink:"/docs/integrations/vectorstores/turbopuffer",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/vectorstores/turbopuffer.mdx",tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"tigris",permalink:"/docs/integrations/vectorstores/tigris"},next:{title:"TypeORM",permalink:"/docs/integrations/vectorstores/typeorm"}},p={},l=[{value:"Setup",id:"setup",level:2},{value:"Usage",id:"usage",level:2}];function m(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"turbopuffer",children:"Turbopuffer"}),"\n",(0,r.jsx)(t.h2,{id:"setup",children:"Setup"}),"\n",(0,r.jsxs)(t.p,{children:["First you must sign up for a Turbopuffer account ",(0,r.jsx)(t.a,{href:"https://turbopuffer.com/join",children:"here"}),".\nThen, once you have an account you can create an API key."]}),"\n",(0,r.jsx)(t.p,{children:"Set your API key as an environment variable:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"export TURBOPUFFER_API_KEY=<YOUR_API_KEY>\n"})}),"\n",(0,r.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n","\n",(0,r.jsx)(t.p,{children:"Here are some examples of how to use the class. You can filter your queries by previous specified metadata, but\nkeep in mind that currently only string values are supported."}),"\n",(0,r.jsxs)(t.p,{children:["See ",(0,r.jsx)(t.a,{href:"https://turbopuffer.com/docs/reference/query#filter-parameters",children:"here for more information"})," on acceptable filter formats."]}),"\n",(0,r.jsx)(o.A,{language:"typescript",children:i()})]})}function g(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},49627:e=>{e.exports={content:'import { OpenAIEmbeddings } from "@langchain/openai";\nimport { TurbopufferVectorStore } from "@langchain/community/vectorstores/turbopuffer";\n\nconst embeddings = new OpenAIEmbeddings();\n\nconst store = new TurbopufferVectorStore(embeddings, {\n  apiKey: process.env.TURBOPUFFER_API_KEY,\n  namespace: "my-namespace",\n});\n\nconst createdAt = new Date().getTime();\n\n// Add some documents to your store.\n// Currently, only string metadata values are supported.\nconst ids = await store.addDocuments([\n  {\n    pageContent: "some content",\n    metadata: { created_at: createdAt.toString() },\n  },\n  { pageContent: "hi", metadata: { created_at: (createdAt + 1).toString() } },\n  { pageContent: "bye", metadata: { created_at: (createdAt + 2).toString() } },\n  {\n    pageContent: "what\'s this",\n    metadata: { created_at: (createdAt + 3).toString() },\n  },\n]);\n\n// Retrieve documents from the store\nconst results = await store.similaritySearch("hello", 1);\n\nconsole.log(results);\n/*\n  [\n    Document {\n      pageContent: \'hi\',\n      metadata: { created_at: \'1705519164987\' }\n    }\n  ]\n*/\n\n// Filter by metadata\n// See https://turbopuffer.com/docs/reference/query#filter-parameters for more on\n// allowed filters\nconst results2 = await store.similaritySearch("hello", 1, {\n  created_at: [["Eq", (createdAt + 3).toString()]],\n});\n\nconsole.log(results2);\n\n/*\n  [\n    Document {\n      pageContent: "what\'s this",\n      metadata: { created_at: \'1705519164989\' }\n    }\n  ]\n*/\n\n// Upsert by passing ids\nawait store.addDocuments(\n  [\n    { pageContent: "changed", metadata: { created_at: createdAt.toString() } },\n    {\n      pageContent: "hi changed",\n      metadata: { created_at: (createdAt + 1).toString() },\n    },\n    {\n      pageContent: "bye changed",\n      metadata: { created_at: (createdAt + 2).toString() },\n    },\n    {\n      pageContent: "what\'s this changed",\n      metadata: { created_at: (createdAt + 3).toString() },\n    },\n  ],\n  { ids }\n);\n\n// Filter by metadata\nconst results3 = await store.similaritySearch("hello", 10, {\n  created_at: [["Eq", (createdAt + 3).toString()]],\n});\n\nconsole.log(results3);\n\n/*\n  [\n    Document {\n      pageContent: "what\'s this changed",\n      metadata: { created_at: \'1705519164989\' }\n    }\n  ]\n*/\n\n// Remove all vectors from the namespace.\nawait store.delete({\n  deleteIndex: true,\n});\n',imports:[{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"},{local:"TurbopufferVectorStore",imported:"TurbopufferVectorStore",source:"@langchain/community/vectorstores/turbopuffer"}]}}}]);
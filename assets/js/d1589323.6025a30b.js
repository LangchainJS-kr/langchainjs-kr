(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1500,65],{89751:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>y,contentTitle:()=>g,default:()=>b,frontMatter:()=>h,metadata:()=>u,toc:()=>x});var o=n(74848),r=n(28453),i=n(64428),s=n(73712),a=n.n(s),c=n(78847),l=n(7752),m=n.n(l),d=n(44624),p=n.n(d);const h={hide_table_of_contents:!0,sidebar_label:"Memory",sidebar_position:1},g="MemoryVectorStore",u={id:"integrations/vectorstores/memory",title:"MemoryVectorStore",description:"MemoryVectorStore is an in-memory, ephemeral vectorstore that stores embeddings in-memory and does an exact, linear search for the most similar embeddings. The default similarity metric is cosine similarity, but can be changed to any of the similarity metrics supported by ml-distance.",source:"@site/docs/integrations/vectorstores/memory.mdx",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/memory",permalink:"/docs/integrations/vectorstores/memory",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/vectorstores/memory.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{hide_table_of_contents:!0,sidebar_label:"Memory",sidebar_position:1},sidebar:"integrations",previous:{title:"Vector stores",permalink:"/docs/integrations/vectorstores"},next:{title:"AnalyticDB",permalink:"/docs/integrations/vectorstores/analyticdb"}},y={},x=[{value:"Usage",id:"usage",level:2},{value:"Create a new index from texts",id:"create-a-new-index-from-texts",level:3},...c.toc,{value:"Create a new index from a loader",id:"create-a-new-index-from-a-loader",level:3},{value:"Use a custom similarity metric",id:"use-a-custom-similarity-metric",level:3}];function f(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"memoryvectorstore",children:(0,o.jsx)(t.code,{children:"MemoryVectorStore"})}),"\n",(0,o.jsxs)(t.p,{children:["MemoryVectorStore is an in-memory, ephemeral vectorstore that stores embeddings in-memory and does an exact, linear search for the most similar embeddings. The default similarity metric is cosine similarity, but can be changed to any of the similarity metrics supported by ",(0,o.jsx)(t.a,{href:"https://mljs.github.io/distance/modules/similarity.html",children:"ml-distance"}),"."]}),"\n",(0,o.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(t.h3,{id:"create-a-new-index-from-texts",children:"Create a new index from texts"}),"\n","\n","\n",(0,o.jsx)(c.default,{}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai\n"})}),"\n",(0,o.jsx)(i.A,{language:"typescript",children:a()}),"\n",(0,o.jsx)(t.h3,{id:"create-a-new-index-from-a-loader",children:"Create a new index from a loader"}),"\n","\n",(0,o.jsx)(i.A,{language:"typescript",children:m()}),"\n",(0,o.jsx)(t.h3,{id:"use-a-custom-similarity-metric",children:"Use a custom similarity metric"}),"\n","\n",(0,o.jsx)(i.A,{language:"typescript",children:p()})]})}function b(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(f,{...e})}):f(e)}},78847:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var o=n(74848),r=n(28453);const i={},s=void 0,a={id:"mdx_components/integration_install_tooltip",title:"integration_install_tooltip",description:"See this section for general instructions on installing integration packages.",source:"@site/docs/mdx_components/integration_install_tooltip.mdx",sourceDirName:"mdx_components",slug:"/mdx_components/integration_install_tooltip",permalink:"/docs/mdx_components/integration_install_tooltip",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/mdx_components/integration_install_tooltip.mdx",tags:[],version:"current",frontMatter:{}},c={},l=[];function m(e){const t={a:"a",admonition:"admonition",p:"p",...(0,r.R)(),...e.components};return(0,o.jsx)(t.admonition,{type:"tip",children:(0,o.jsxs)(t.p,{children:["See ",(0,o.jsx)(t.a,{href:"/docs/how_to/installation#installing-integration-packages",children:"this section for general instructions on installing integration packages"}),"."]})})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}},73712:e=>{e.exports={content:'import { MemoryVectorStore } from "langchain/vectorstores/memory";\nimport { OpenAIEmbeddings } from "@langchain/openai";\n\nconst vectorStore = await MemoryVectorStore.fromTexts(\n  ["Hello world", "Bye bye", "hello nice world"],\n  [{ id: 2 }, { id: 1 }, { id: 3 }],\n  new OpenAIEmbeddings()\n);\n\nconst resultOne = await vectorStore.similaritySearch("hello world", 1);\nconsole.log(resultOne);\n\n/*\n  [\n    Document {\n      pageContent: "Hello world",\n      metadata: { id: 2 }\n    }\n  ]\n*/\n',imports:[{local:"MemoryVectorStore",imported:"MemoryVectorStore",source:"langchain/vectorstores/memory"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"}]}},44624:e=>{e.exports={content:'import { MemoryVectorStore } from "langchain/vectorstores/memory";\nimport { OpenAIEmbeddings } from "@langchain/openai";\nimport { similarity } from "ml-distance";\n\nconst vectorStore = await MemoryVectorStore.fromTexts(\n  ["Hello world", "Bye bye", "hello nice world"],\n  [{ id: 2 }, { id: 1 }, { id: 3 }],\n  new OpenAIEmbeddings(),\n  { similarity: similarity.pearson }\n);\n\nconst resultOne = await vectorStore.similaritySearch("hello world", 1);\nconsole.log(resultOne);\n',imports:[{local:"MemoryVectorStore",imported:"MemoryVectorStore",source:"langchain/vectorstores/memory"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"}]}},7752:e=>{e.exports={content:'import { MemoryVectorStore } from "langchain/vectorstores/memory";\nimport { OpenAIEmbeddings } from "@langchain/openai";\nimport { TextLoader } from "langchain/document_loaders/fs/text";\n\n// Create docs with a loader\nconst loader = new TextLoader("src/document_loaders/example_data/example.txt");\nconst docs = await loader.load();\n\n// Load the docs into the vector store\nconst vectorStore = await MemoryVectorStore.fromDocuments(\n  docs,\n  new OpenAIEmbeddings()\n);\n\n// Search for the most similar document\nconst resultOne = await vectorStore.similaritySearch("hello world", 1);\n\nconsole.log(resultOne);\n\n/*\n  [\n    Document {\n      pageContent: "Hello world",\n      metadata: { id: 2 }\n    }\n  ]\n*/\n',imports:[{local:"MemoryVectorStore",imported:"MemoryVectorStore",source:"langchain/vectorstores/memory"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"},{local:"TextLoader",imported:"TextLoader",source:"langchain/document_loaders/fs/text"}]}}}]);
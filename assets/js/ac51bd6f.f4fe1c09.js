(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9151,65],{76246:(n,t,e)=>{"use strict";e.r(t),e.d(t,{assets:()=>p,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>m,toc:()=>g});var o=e(74848),i=e(28453),s=e(64428),r=e(78847),a=e(64965),c=e.n(a);const l={},d="Voy",m={id:"integrations/vectorstores/voy",title:"Voy",description:"Voy is a WASM vector similarity search engine written in Rust.",source:"@site/docs/integrations/vectorstores/voy.mdx",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/voy",permalink:"/docs/integrations/vectorstores/voy",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/vectorstores/voy.mdx",tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Vercel Postgres",permalink:"/docs/integrations/vectorstores/vercel_postgres"},next:{title:"Weaviate",permalink:"/docs/integrations/vectorstores/weaviate"}},p={},g=[{value:"Install Voy",id:"install-voy",level:3},...r.toc,{value:"Usage",id:"usage",level:2}];function u(n){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"voy",children:"Voy"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"https://github.com/tantaraio/voy",children:"Voy"})," is a WASM vector similarity search engine written in Rust.\nIt's supported in non-Node environments like browsers. You can use Voy as a vector store with LangChain.js."]}),"\n",(0,o.jsx)(t.h3,{id:"install-voy",children:"Install Voy"}),"\n","\n",(0,o.jsx)(r.default,{}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai voy-search @langchain/community\n"})}),"\n",(0,o.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n","\n",(0,o.jsx)(s.A,{language:"typescript",children:c()})]})}function h(n={}){const{wrapper:t}={...(0,i.R)(),...n.components};return t?(0,o.jsx)(t,{...n,children:(0,o.jsx)(u,{...n})}):u(n)}},78847:(n,t,e)=>{"use strict";e.r(t),e.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var o=e(74848),i=e(28453);const s={},r=void 0,a={id:"mdx_components/integration_install_tooltip",title:"integration_install_tooltip",description:"See this section for general instructions on installing integration packages.",source:"@site/docs/mdx_components/integration_install_tooltip.mdx",sourceDirName:"mdx_components",slug:"/mdx_components/integration_install_tooltip",permalink:"/docs/mdx_components/integration_install_tooltip",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/mdx_components/integration_install_tooltip.mdx",tags:[],version:"current",frontMatter:{}},c={},l=[];function d(n){const t={a:"a",admonition:"admonition",p:"p",...(0,i.R)(),...n.components};return(0,o.jsx)(t.admonition,{type:"tip",children:(0,o.jsxs)(t.p,{children:["See ",(0,o.jsx)(t.a,{href:"/docs/how_to/installation#installing-integration-packages",children:"this section for general instructions on installing integration packages"}),"."]})})}function m(n={}){const{wrapper:t}={...(0,i.R)(),...n.components};return t?(0,o.jsx)(t,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},64965:n=>{n.exports={content:'import { VoyVectorStore } from "@langchain/community/vectorstores/voy";\nimport { Voy as VoyClient } from "voy-search";\nimport { OpenAIEmbeddings } from "@langchain/openai";\nimport { Document } from "@langchain/core/documents";\n\n// Create Voy client using the library.\nconst voyClient = new VoyClient();\n// Create embeddings\nconst embeddings = new OpenAIEmbeddings();\n// Create the Voy store.\nconst store = new VoyVectorStore(voyClient, embeddings);\n\n// Add two documents with some metadata.\nawait store.addDocuments([\n  new Document({\n    pageContent: "How has life been treating you?",\n    metadata: {\n      foo: "Mike",\n    },\n  }),\n  new Document({\n    pageContent: "And I took it personally...",\n    metadata: {\n      foo: "Testing",\n    },\n  }),\n]);\n\nconst model = new OpenAIEmbeddings();\nconst query = await model.embedQuery("And I took it personally");\n\n// Perform a similarity search.\nconst resultsWithScore = await store.similaritySearchVectorWithScore(query, 1);\n\n// Print the results.\nconsole.log(JSON.stringify(resultsWithScore, null, 2));\n/*\n  [\n    [\n      {\n        "pageContent": "And I took it personally...",\n        "metadata": {\n          "foo": "Testing"\n        }\n      },\n      0\n    ]\n  ]\n*/\n',imports:[{local:"VoyVectorStore",imported:"VoyVectorStore",source:"@langchain/community/vectorstores/voy"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"},{local:"Document",imported:"Document",source:"@langchain/core/documents"}]}}}]);
"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3066],{37650:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>u,toc:()=>d});var r=n(74848),a=n(28453),i=n(78847),s=n(27846);const o={sidebar_class_name:"hidden",title:"How to generate multiple queries to retrieve data for"},l=void 0,u={id:"how_to/multiple_queries",title:"How to generate multiple queries to retrieve data for",description:"This guide assumes familiarity with the following concepts:",source:"@site/docs/how_to/multiple_queries.mdx",sourceDirName:"how_to",slug:"/how_to/multiple_queries",permalink:"/docs/how_to/multiple_queries",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/how_to/multiple_queries.mdx",tags:[],version:"current",frontMatter:{sidebar_class_name:"hidden",title:"How to generate multiple queries to retrieve data for"},sidebar:"tutorialSidebar",previous:{title:"How to generate multiple embeddings per document",permalink:"/docs/how_to/multi_vector"},next:{title:"How to try to fix errors in output parsing",permalink:"/docs/how_to/output_parser_fixing"}},c={},d=[{value:"Get started",id:"get-started",level:2},...i.toc,{value:"Customization",id:"customization",level:2},{value:"Next steps",id:"next-steps",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.admonition,{title:"Prerequisites",type:"info",children:[(0,r.jsx)(t.p,{children:"This guide assumes familiarity with the following concepts:"}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"../../docs/concepts/#vectorstores",children:"Vector stores"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"../../docs/concepts/#retrievers",children:"Retrievers"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"../../docs/tutorials/rag",children:"Retrieval-augmented generation (RAG)"})}),"\n"]})]}),"\n",(0,r.jsx)(t.p,{children:"Distance-based vector database retrieval embeds (represents) queries in\nhigh-dimensional space and finds similar embedded documents based on\n\u201cdistance\u201d. But retrieval may produce different results with subtle\nchanges in query wording or if the embeddings do not capture the\nsemantics of the data well. Prompt engineering / tuning is sometimes\ndone to manually address these problems, but can be tedious."}),"\n",(0,r.jsxs)(t.p,{children:["The\n",(0,r.jsx)(t.a,{href:"https://v02.api.js.langchain.com/classes/langchain_retrievers_multi_query.MultiQueryRetriever.html",children:(0,r.jsx)(t.code,{children:"MultiQueryRetriever"})}),"\nautomates the process of prompt tuning by using an LLM to generate\nmultiple queries from different perspectives for a given user input\nquery. For each query, it retrieves a set of relevant documents and\ntakes the unique union across all queries to get a larger set of\npotentially relevant documents. By generating multiple perspectives on\nthe same question, the ",(0,r.jsx)(t.code,{children:"MultiQueryRetriever"})," can help overcome some of\nthe limitations of the distance-based retrieval and get a richer set of\nresults."]}),"\n",(0,r.jsx)(t.h2,{id:"get-started",children:"Get started"}),"\n","\n",(0,r.jsx)(i.default,{}),"\n",(0,r.jsx)(s.A,{children:(0,r.jsx)(t.p,{children:"@langchain/anthropic @langchain/cohere"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:'import { MemoryVectorStore } from "langchain/vectorstores/memory";\nimport { CohereEmbeddings } from "@langchain/cohere";\nimport { MultiQueryRetriever } from "langchain/retrievers/multi_query";\nimport { ChatAnthropic } from "@langchain/anthropic";\n\nconst embeddings = new CohereEmbeddings();\n\nconst vectorstore = await MemoryVectorStore.fromTexts(\n  [\n    "Buildings are made out of brick",\n    "Buildings are made out of wood",\n    "Buildings are made out of stone",\n    "Cars are made out of metal",\n    "Cars are made out of plastic",\n    "mitochondria is the powerhouse of the cell",\n    "mitochondria is made of lipids",\n  ],\n  [{ id: 1 }, { id: 2 }, { id: 3 }, { id: 4 }, { id: 5 }],\n  embeddings\n);\n\nconst model = new ChatAnthropic({\n  model: "claude-3-sonnet-20240229",\n});\n\nconst retriever = MultiQueryRetriever.fromLLM({\n  llm: model,\n  retriever: vectorstore.asRetriever(),\n});\n\nconst query = "What are mitochondria made of?";\nconst retrievedDocs = await retriever.invoke(query);\n\n/*\n  Generated queries: What are the components of mitochondria?,What substances comprise the mitochondria organelle?  ,What is the molecular composition of mitochondria?\n*/\n\nconsole.log(retrievedDocs);\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-text",children:'[\n  Document {\n    pageContent: "mitochondria is made of lipids",\n    metadata: {}\n  },\n  Document {\n    pageContent: "mitochondria is the powerhouse of the cell",\n    metadata: {}\n  },\n  Document {\n    pageContent: "Buildings are made out of brick",\n    metadata: { id: 1 }\n  },\n  Document {\n    pageContent: "Buildings are made out of wood",\n    metadata: { id: 2 }\n  }\n]\n'})}),"\n",(0,r.jsx)(t.h2,{id:"customization",children:"Customization"}),"\n",(0,r.jsx)(t.p,{children:"You can also supply a custom prompt to tune what types of questions are\ngenerated. You can also pass a custom output parser to parse and split\nthe results of the LLM call into a list of queries."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:'import { LLMChain } from "langchain/chains";\nimport { pull } from "langchain/hub";\nimport { BaseOutputParser } from "@langchain/core/output_parsers";\nimport { PromptTemplate } from "@langchain/core/prompts";\n\ntype LineList = {\n  lines: string[];\n};\n\nclass LineListOutputParser extends BaseOutputParser<LineList> {\n  static lc_name() {\n    return "LineListOutputParser";\n  }\n\n  lc_namespace = ["langchain", "retrievers", "multiquery"];\n\n  async parse(text: string): Promise<LineList> {\n    const startKeyIndex = text.indexOf("<questions>");\n    const endKeyIndex = text.indexOf("</questions>");\n    const questionsStartIndex =\n      startKeyIndex === -1 ? 0 : startKeyIndex + "<questions>".length;\n    const questionsEndIndex = endKeyIndex === -1 ? text.length : endKeyIndex;\n    const lines = text\n      .slice(questionsStartIndex, questionsEndIndex)\n      .trim()\n      .split("\\n")\n      .filter((line) => line.trim() !== "");\n    return { lines };\n  }\n\n  getFormatInstructions(): string {\n    throw new Error("Not implemented.");\n  }\n}\n\n// Default prompt is available at: https://smith.langchain.com/hub/jacob/multi-vector-retriever-german\nconst prompt: PromptTemplate = await pull(\n  "jacob/multi-vector-retriever-german"\n);\n\nconst vectorstore = await MemoryVectorStore.fromTexts(\n  [\n    "Geb\xe4ude werden aus Ziegelsteinen hergestellt",\n    "Geb\xe4ude werden aus Holz hergestellt",\n    "Geb\xe4ude werden aus Stein hergestellt",\n    "Autos werden aus Metall hergestellt",\n    "Autos werden aus Kunststoff hergestellt",\n    "Mitochondrien sind die Energiekraftwerke der Zelle",\n    "Mitochondrien bestehen aus Lipiden",\n  ],\n  [{ id: 1 }, { id: 2 }, { id: 3 }, { id: 4 }, { id: 5 }],\n  embeddings\n);\nconst model = new ChatAnthropic({});\nconst llmChain = new LLMChain({\n  llm: model,\n  prompt,\n  outputParser: new LineListOutputParser(),\n});\nconst retriever = new MultiQueryRetriever({\n  retriever: vectorstore.asRetriever(),\n  llmChain,\n});\n\nconst query = "What are mitochondria made of?";\nconst retrievedDocs = await retriever.invoke(query);\n\n/*\n  Generated queries: Was besteht ein Mitochondrium?,Aus welchen Komponenten setzt sich ein Mitochondrium zusammen?  ,Welche Molek\xfcle finden sich in einem Mitochondrium?\n*/\n\nconsole.log(retrievedDocs);\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-text",children:'[\n  Document {\n    pageContent: "Mitochondrien bestehen aus Lipiden",\n    metadata: {}\n  },\n  Document {\n    pageContent: "Mitochondrien sind die Energiekraftwerke der Zelle",\n    metadata: {}\n  },\n  Document {\n    pageContent: "Geb\xe4ude werden aus Stein hergestellt",\n    metadata: { id: 3 }\n  },\n  Document {\n    pageContent: "Autos werden aus Metall hergestellt",\n    metadata: { id: 4 }\n  },\n  Document {\n    pageContent: "Geb\xe4ude werden aus Holz hergestellt",\n    metadata: { id: 2 }\n  },\n  Document {\n    pageContent: "Geb\xe4ude werden aus Ziegelsteinen hergestellt",\n    metadata: { id: 1 }\n  }\n]\n'})}),"\n",(0,r.jsx)(t.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,r.jsxs)(t.p,{children:["You\u2019ve now learned how to use the ",(0,r.jsx)(t.code,{children:"MultiQueryRetriever"})," to query a\nvector store with automatically generated queries."]}),"\n",(0,r.jsxs)(t.p,{children:["See the individual sections for deeper dives on specific retrievers, the\n",(0,r.jsx)(t.a,{href:"../../docs/tutorials/rag",children:"broader tutorial on RAG"}),", or this section to\nlearn how to ",(0,r.jsx)(t.a,{href:"../../docs/how_to/custom_retriever/",children:"create your own custom retriever over any data\nsource"}),"."]})]})}function m(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},19365:(e,t,n)=>{n.d(t,{A:()=>s});n(96540);var r=n(34164);const a={tabItem:"tabItem_Ymn6"};var i=n(74848);function s(e){let{children:t,hidden:n,className:s}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,r.A)(a.tabItem,s),hidden:n,children:t})}},11470:(e,t,n)=>{n.d(t,{A:()=>j});var r=n(96540),a=n(34164),i=n(23104),s=n(56347),o=n(205),l=n(57485),u=n(31682),c=n(89466);function d(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??function(e){return d(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}(n);return function(e){const t=(0,u.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function p(e){let{queryString:t=!1,groupId:n}=e;const a=(0,s.W6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l.aZ)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(a.location.search);t.set(i,e),a.replace({...a.location,search:t.toString()})}),[i,a])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,i=h(e),[s,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:i}))),[u,d]=p({queryString:n,groupId:a}),[g,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,i]=(0,c.Dv)(n);return[a,(0,r.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:a}),v=(()=>{const e=u??g;return m({value:e,tabValues:i})?e:null})();(0,o.A)((()=>{v&&l(v)}),[v]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),f(e)}),[d,f,i]),tabValues:i}}var f=n(92303);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=n(74848);function x(e){let{className:t,block:n,selectedValue:r,selectValue:s,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:u}=(0,i.a_)(),c=e=>{const t=e.currentTarget,n=l.indexOf(t),a=o[n].value;a!==r&&(u(t),s(a))},d=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":n},t),children:o.map((e=>{let{value:t,label:n,attributes:i}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>l.push(e),onKeyDown:d,onClick:c,...i,className:(0,a.A)("tabs__item",v.tabItem,i?.className,{"tabs__item--active":r===t}),children:n??t},t)}))})}function w(e){let{lazy:t,children:n,selectedValue:a}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:i.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a})))})}function y(e){const t=g(e);return(0,b.jsxs)("div",{className:(0,a.A)("tabs-container",v.tabList),children:[(0,b.jsx)(x,{...t,...e}),(0,b.jsx)(w,{...t,...e})]})}function j(e){const t=(0,f.A)();return(0,b.jsx)(y,{...e,children:d(e.children)},String(t))}},27846:(e,t,n)=>{n.d(t,{A:()=>o});n(96540);var r=n(11470),a=n(19365),i=n(21432),s=n(74848);function o(e){let{children:t}=e;return(0,s.jsxs)(r.A,{groupId:"npm2yarn",children:[(0,s.jsx)(a.A,{value:"npm",label:"npm",children:(0,s.jsxs)(i.A,{language:"bash",children:["npm i ",t]})}),(0,s.jsx)(a.A,{value:"yarn",label:"yarn",default:!0,children:(0,s.jsxs)(i.A,{language:"bash",children:["yarn add ",t]})}),(0,s.jsx)(a.A,{value:"pnpm",label:"pnpm",children:(0,s.jsxs)(i.A,{language:"bash",children:["pnpm add ",t]})})]})}}}]);
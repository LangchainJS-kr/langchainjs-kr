(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2194],{29181:(e,n,r)=>{"use strict";r.r(n),r.d(n,{assets:()=>h,contentTitle:()=>l,default:()=>g,frontMatter:()=>d,metadata:()=>p,toc:()=>m});var s=r(74848),o=r(28453),t=r(64428),a=r(54566),i=r.n(a),c=r(78847);const d={hide_table_of_contents:!0},l="SerpAPI Loader",p={id:"integrations/document_loaders/web_loaders/serpapi",title:"SerpAPI Loader",description:"This guide shows how to use SerpAPI with LangChain to load web search results.",source:"@site/docs/integrations/document_loaders/web_loaders/serpapi.mdx",sourceDirName:"integrations/document_loaders/web_loaders",slug:"/integrations/document_loaders/web_loaders/serpapi",permalink:"/docs/integrations/document_loaders/web_loaders/serpapi",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/document_loaders/web_loaders/serpapi.mdx",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"integrations",previous:{title:"SearchApi Loader",permalink:"/docs/integrations/document_loaders/web_loaders/searchapi"},next:{title:"Sitemap Loader",permalink:"/docs/integrations/document_loaders/web_loaders/sitemap"}},h={},m=[{value:"Overview",id:"overview",level:2},{value:"Setup",id:"setup",level:2},{value:"Usage",id:"usage",level:2},...c.toc];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"serpapi-loader",children:"SerpAPI Loader"}),"\n",(0,s.jsx)(n.p,{children:"This guide shows how to use SerpAPI with LangChain to load web search results."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://serpapi.com/",children:"SerpAPI"})," is a real-time API that provides access to search results from various search engines. It is commonly used for tasks like competitor analysis and rank tracking. It empowers businesses to scrape, extract, and make sense of data from all search engines' result pages."]}),"\n",(0,s.jsxs)(n.p,{children:["This guide shows how to load web search results using the ",(0,s.jsx)(n.code,{children:"SerpAPILoader"})," in LangChain. The ",(0,s.jsx)(n.code,{children:"SerpAPILoader"})," simplifies the process of loading and processing web search results from SerpAPI."]}),"\n",(0,s.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,s.jsxs)(n.p,{children:["You'll need to sign up and retrieve your ",(0,s.jsx)(n.a,{href:"https://serpapi.com/dashboard",children:"SerpAPI API key"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(n.p,{children:["Here's an example of how to use the ",(0,s.jsx)(n.code,{children:"SerpAPILoader"}),":"]}),"\n","\n","\n",(0,s.jsx)(c.default,{}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai\n"})}),"\n",(0,s.jsx)(t.A,{language:"typescript",children:i()}),"\n",(0,s.jsxs)(n.p,{children:["In this example, the ",(0,s.jsx)(n.code,{children:"SerpAPILoader"})," is used to load web search results, which are then stored in memory using ",(0,s.jsx)(n.code,{children:"MemoryVectorStore"}),". A retrieval chain is then used to retrieve the most relevant documents from the memory and answer the question based on these documents. This demonstrates how the ",(0,s.jsx)(n.code,{children:"SerpAPILoader"})," can streamline the process of loading and processing web search results."]})]})}function g(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},54566:e=>{e.exports={content:'import { ChatOpenAI, OpenAIEmbeddings } from "@langchain/openai";\nimport { MemoryVectorStore } from "langchain/vectorstores/memory";\nimport { SerpAPILoader } from "langchain/document_loaders/web/serpapi";\nimport { ChatPromptTemplate } from "@langchain/core/prompts";\nimport { createStuffDocumentsChain } from "langchain/chains/combine_documents";\nimport { createRetrievalChain } from "langchain/chains/retrieval";\n\n// Initialize the necessary components\nconst llm = new ChatOpenAI();\nconst embeddings = new OpenAIEmbeddings();\nconst apiKey = "Your SerpAPI API key";\n\n// Define your question and query\nconst question = "Your question here";\nconst query = "Your query here";\n\n// Use SerpAPILoader to load web search results\nconst loader = new SerpAPILoader({ q: query, apiKey });\nconst docs = await loader.load();\n\n// Use MemoryVectorStore to store the loaded documents in memory\nconst vectorStore = await MemoryVectorStore.fromDocuments(docs, embeddings);\n\nconst questionAnsweringPrompt = ChatPromptTemplate.fromMessages([\n  [\n    "system",\n    "Answer the user\'s questions based on the below context:\\n\\n{context}",\n  ],\n  ["human", "{input}"],\n]);\n\nconst combineDocsChain = await createStuffDocumentsChain({\n  llm,\n  prompt: questionAnsweringPrompt,\n});\n\nconst chain = await createRetrievalChain({\n  retriever: vectorStore.asRetriever(),\n  combineDocsChain,\n});\n\nconst res = await chain.invoke({\n  input: question,\n});\n\nconsole.log(res.answer);\n',imports:[{local:"ChatOpenAI",imported:"ChatOpenAI",source:"@langchain/openai"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"},{local:"MemoryVectorStore",imported:"MemoryVectorStore",source:"langchain/vectorstores/memory"},{local:"SerpAPILoader",imported:"SerpAPILoader",source:"langchain/document_loaders/web/serpapi"},{local:"ChatPromptTemplate",imported:"ChatPromptTemplate",source:"@langchain/core/prompts"},{local:"createStuffDocumentsChain",imported:"createStuffDocumentsChain",source:"langchain/chains/combine_documents"},{local:"createRetrievalChain",imported:"createRetrievalChain",source:"langchain/chains/retrieval"}]}}}]);
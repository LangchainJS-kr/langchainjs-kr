(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9526,65],{46086:(n,e,t)=>{"use strict";t.r(e),t.d(e,{assets:()=>h,contentTitle:()=>g,default:()=>d,frontMatter:()=>l,metadata:()=>p,toc:()=>u});var o=t(74848),a=t(28453),s=t(64428),i=t(56534),r=t.n(i),c=t(78847);const l={hide_table_of_contents:!0},g="Searxng Search tool",p={id:"integrations/tools/searxng",title:"Searxng Search tool",description:"The SearxngSearch tool connects your agents and chains to the internet.",source:"@site/docs/integrations/tools/searxng.mdx",sourceDirName:"integrations/tools",slug:"/integrations/tools/searxng",permalink:"/docs/integrations/tools/searxng",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/tools/searxng.mdx",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"integrations",previous:{title:"SearchApi tool",permalink:"/docs/integrations/tools/searchapi"},next:{title:"StackExchange Tool",permalink:"/docs/integrations/tools/stackexchange"}},h={},u=[{value:"Usage",id:"usage",level:2},...c.toc];function m(n){const e={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"searxng-search-tool",children:"Searxng Search tool"}),"\n",(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"SearxngSearch"})," tool connects your agents and chains to the internet."]}),"\n",(0,o.jsx)(e.p,{children:"A wrapper around the SearxNG API, this tool is useful for performing meta-search engine queries using the SearxNG API. It is particularly helpful in answering questions about current events."}),"\n",(0,o.jsx)(e.h2,{id:"usage",children:"Usage"}),"\n","\n","\n",(0,o.jsx)(c.default,{}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai\n"})}),"\n",(0,o.jsx)(s.A,{language:"typescript",children:r()})]})}function d(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(m,{...n})}):m(n)}},78847:(n,e,t)=>{"use strict";t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var o=t(74848),a=t(28453);const s={},i=void 0,r={id:"mdx_components/integration_install_tooltip",title:"integration_install_tooltip",description:"See this section for general instructions on installing integration packages.",source:"@site/docs/mdx_components/integration_install_tooltip.mdx",sourceDirName:"mdx_components",slug:"/mdx_components/integration_install_tooltip",permalink:"/docs/mdx_components/integration_install_tooltip",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/mdx_components/integration_install_tooltip.mdx",tags:[],version:"current",frontMatter:{}},c={},l=[];function g(n){const e={a:"a",admonition:"admonition",p:"p",...(0,a.R)(),...n.components};return(0,o.jsx)(e.admonition,{type:"tip",children:(0,o.jsxs)(e.p,{children:["See ",(0,o.jsx)(e.a,{href:"/docs/how_to/installation#installing-integration-packages",children:"this section for general instructions on installing integration packages"}),"."]})})}function p(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(g,{...n})}):g(n)}},56534:n=>{n.exports={content:'import { ChatOpenAI } from "@langchain/openai";\nimport { AgentExecutor } from "langchain/agents";\nimport { BaseMessageChunk } from "@langchain/core/messages";\nimport { AgentAction, AgentFinish } from "@langchain/core/agents";\nimport { RunnableSequence } from "@langchain/core/runnables";\nimport { ChatPromptTemplate } from "@langchain/core/prompts";\nimport { SearxngSearch } from "@langchain/community/tools/searxng_search";\n\nconst model = new ChatOpenAI({\n  maxTokens: 1000,\n  model: "gpt-4",\n});\n\n// `apiBase` will be automatically parsed from .env file, set "SEARXNG_API_BASE" in .env,\nconst tools = [\n  new SearxngSearch({\n    params: {\n      format: "json", // Do not change this, format other than "json" is will throw error\n      engines: "google",\n    },\n    // Custom Headers to support rapidAPI authentication Or any instance that requires custom headers\n    headers: {},\n  }),\n];\nconst prefix = ChatPromptTemplate.fromMessages([\n  [\n    "ai",\n    "Answer the following questions as best you can. In your final answer, use a bulleted list markdown format.",\n  ],\n  ["human", "{input}"],\n]);\n// Replace this with your actual output parser.\nconst customOutputParser = (\n  input: BaseMessageChunk\n): AgentAction | AgentFinish => ({\n  log: "test",\n  returnValues: {\n    output: input,\n  },\n});\n// Replace this placeholder agent with your actual implementation.\nconst agent = RunnableSequence.from([prefix, model, customOutputParser]);\nconst executor = AgentExecutor.fromAgentAndTools({\n  agent,\n  tools,\n});\nconsole.log("Loaded agent.");\nconst input = `What is Langchain? Describe in 50 words`;\nconsole.log(`Executing with input "${input}"...`);\nconst result = await executor.invoke({ input });\nconsole.log(result);\n/**\n * Langchain is a framework for developing applications powered by language models, such as chatbots, Generative Question-Answering, summarization, and more. It provides a standard interface, integrations with other tools, and end-to-end chains for common applications. Langchain enables data-aware and powerful applications.\n */\n',imports:[{local:"ChatOpenAI",imported:"ChatOpenAI",source:"@langchain/openai"},{local:"AgentExecutor",imported:"AgentExecutor",source:"langchain/agents"},{local:"BaseMessageChunk",imported:"BaseMessageChunk",source:"@langchain/core/messages"},{local:"AgentAction",imported:"AgentAction",source:"@langchain/core/agents"},{local:"AgentFinish",imported:"AgentFinish",source:"@langchain/core/agents"},{local:"RunnableSequence",imported:"RunnableSequence",source:"@langchain/core/runnables"},{local:"ChatPromptTemplate",imported:"ChatPromptTemplate",source:"@langchain/core/prompts"},{local:"SearxngSearch",imported:"SearxngSearch",source:"@langchain/community/tools/searxng_search"}]}}}]);
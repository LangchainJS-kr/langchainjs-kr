(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[590,65],{4704:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>c,default:()=>g,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var o=n(74848),a=n(28453),i=n(64428),s=n(7742),r=n.n(s),m=n(78847);const l={hide_table_of_contents:!0},c="Mot\xf6rhead Memory",d={id:"integrations/chat_memory/motorhead_memory",title:"Mot\xf6rhead Memory",description:"Mot\xf6rhead is a memory server implemented in Rust. It automatically handles incremental summarization in the background and allows for stateless applications.",source:"@site/docs/integrations/chat_memory/motorhead_memory.mdx",sourceDirName:"integrations/chat_memory",slug:"/integrations/chat_memory/motorhead_memory",permalink:"/docs/integrations/chat_memory/motorhead_memory",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/chat_memory/motorhead_memory.mdx",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0}},h={},p=[{value:"Setup",id:"setup",level:2},{value:"Usage",id:"usage",level:2},...m.toc];function u(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"mot\xf6rhead-memory",children:"Mot\xf6rhead Memory"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"https://github.com/getmetal/motorhead",children:"Mot\xf6rhead"})," is a memory server implemented in Rust. It automatically handles incremental summarization in the background and allows for stateless applications."]}),"\n",(0,o.jsx)(t.h2,{id:"setup",children:"Setup"}),"\n",(0,o.jsxs)(t.p,{children:["See instructions at ",(0,o.jsx)(t.a,{href:"https://github.com/getmetal/motorhead",children:"Mot\xf6rhead"})," for running the server locally, or ",(0,o.jsx)(t.a,{href:"https://getmetal.io",children:"https://getmetal.io"})," to get API keys for the hosted version."]}),"\n",(0,o.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n","\n","\n",(0,o.jsx)(m.default,{}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai\n"})}),"\n",(0,o.jsx)(i.A,{language:"typescript",children:r()})]})}function g(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},78847:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var o=n(74848),a=n(28453);const i={},s=void 0,r={id:"mdx_components/integration_install_tooltip",title:"integration_install_tooltip",description:"See this section for general instructions on installing integration packages.",source:"@site/docs/mdx_components/integration_install_tooltip.mdx",sourceDirName:"mdx_components",slug:"/mdx_components/integration_install_tooltip",permalink:"/docs/mdx_components/integration_install_tooltip",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/mdx_components/integration_install_tooltip.mdx",tags:[],version:"current",frontMatter:{}},m={},l=[];function c(e){const t={a:"a",admonition:"admonition",p:"p",...(0,a.R)(),...e.components};return(0,o.jsx)(t.admonition,{type:"tip",children:(0,o.jsxs)(t.p,{children:["See ",(0,o.jsx)(t.a,{href:"/docs/how_to/installation#installing-integration-packages",children:"this section for general instructions on installing integration packages"}),"."]})})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},7742:e=>{e.exports={content:'import { ChatOpenAI } from "@langchain/openai";\nimport { ConversationChain } from "langchain/chains";\nimport { MotorheadMemory } from "@langchain/community/memory/motorhead_memory";\n\n// Managed Example (visit https://getmetal.io to get your keys)\n// const managedMemory = new MotorheadMemory({\n//   memoryKey: "chat_history",\n//   sessionId: "test",\n//   apiKey: "MY_API_KEY",\n//   clientId: "MY_CLIENT_ID",\n// });\n\n// Self Hosted Example\nconst memory = new MotorheadMemory({\n  memoryKey: "chat_history",\n  sessionId: "test",\n  url: "localhost:8080", // Required for self hosted\n});\n\nconst model = new ChatOpenAI({\n  model: "gpt-3.5-turbo",\n  temperature: 0,\n});\n\nconst chain = new ConversationChain({ llm: model, memory });\n\nconst res1 = await chain.invoke({ input: "Hi! I\'m Jim." });\nconsole.log({ res1 });\n/*\n{\n  res1: {\n    text: "Hello Jim! It\'s nice to meet you. My name is AI. How may I assist you today?"\n  }\n}\n*/\n\nconst res2 = await chain.invoke({ input: "What did I just say my name was?" });\nconsole.log({ res2 });\n\n/*\n{\n  res1: {\n    text: "You said your name was Jim."\n  }\n}\n*/\n',imports:[{local:"ChatOpenAI",imported:"ChatOpenAI",source:"@langchain/openai"},{local:"ConversationChain",imported:"ConversationChain",source:"langchain/chains"},{local:"MotorheadMemory",imported:"MotorheadMemory",source:"@langchain/community/memory/motorhead_memory"}]}}}]);
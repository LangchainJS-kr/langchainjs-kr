"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9563],{90835:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>h,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var t=s(74848),a=s(28453),o=s(27846),i=s(63142);const r={sidebar_position:1,title:"\ucc57\ubd07 \ub9cc\ub4e4\uae30",sidebar_class_name:"hidden",pagination_prev:null,pagination_next:null},l=void 0,c={id:"tutorials/chatbot",title:"\ucc57\ubd07 \ub9cc\ub4e4\uae30",description:"Overview",source:"@site/docs/tutorials/chatbot.mdx",sourceDirName:"tutorials",slug:"/tutorials/chatbot",permalink:"/docs/tutorials/chatbot",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/tutorials/chatbot.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"\ucc57\ubd07 \ub9cc\ub4e4\uae30",sidebar_class_name:"hidden",pagination_prev:null,pagination_next:null},sidebar:"tutorialSidebar"},h={},d=[{value:"Overview",id:"overview",level:2},{value:"Concepts",id:"concepts",level:2},{value:"Setup",id:"setup",level:2},{value:"Installation",id:"installation",level:3},{value:"LangSmith",id:"langsmith",level:3},{value:"Quickstart",id:"quickstart",level:2},{value:"Message History",id:"message-history",level:2},{value:"Managing Conversation History",id:"managing-conversation-history",level:2},{value:"Streaming",id:"streaming",level:2},{value:"Next Steps",id:"next-steps",level:2}];function m(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"We\u2019ll go over an example of how to design and implement an LLM-powered\nchatbot. This chatbot will be able to have a conversation and remember\nprevious interactions."}),"\n",(0,t.jsx)(n.p,{children:"Note that this chatbot that we build will only use the language model to\nhave a conversation. There are several other related concepts that you\nmay be looking for:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"../../docs/tutorials/qa_chat_history",children:"Conversational RAG"}),": Enable a\nchatbot experience over an external source of data"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"../../docs/tutorials/agents",children:"Agents"}),": Build a chatbot that can take\nactions"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This tutorial will cover the basics which will be helpful for those two\nmore advanced topics, but feel free to skip directly to there should you\nchoose."}),"\n",(0,t.jsx)(n.h2,{id:"concepts",children:"Concepts"}),"\n",(0,t.jsx)(n.p,{children:"Here are a few of the high-level components we\u2019ll be working with:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"../../docs/concepts/#chat-models",children:(0,t.jsx)(n.code,{children:"Chat Models"})}),". The chatbot\ninterface is based around messages rather than raw text, and\ntherefore is best suited to Chat Models rather than text LLMs."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"../../docs/concepts/#prompt-templates",children:(0,t.jsx)(n.code,{children:"Prompt Templates"})}),", which\nsimplify the process of assembling prompts that combine default\nmessages, user input, chat history, and (optionally) additional\nretrieved context."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"../../docs/concepts/#chat-history",children:(0,t.jsx)(n.code,{children:"Chat History"})}),", which allows a\nchatbot to \u201cremember\u201d past interactions and take them into account\nwhen responding to followup questions."]}),"\n",(0,t.jsxs)(n.li,{children:["Debugging and tracing your application using\n",(0,t.jsx)(n.a,{href:"../../docs/concepts/#langsmith",children:"LangSmith"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"We\u2019ll cover how to fit the above components together to create a\npowerful conversational chatbot."}),"\n",(0,t.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,t.jsx)(n.h3,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.p,{children:"To install LangChain run:"}),"\n","\n",(0,t.jsx)(o.A,{children:(0,t.jsx)(n.p,{children:"langchain"})}),"\n",(0,t.jsxs)(n.p,{children:["For more details, see our ",(0,t.jsx)(n.a,{href:"../../docs/how_to/installation",children:"Installation\nguide"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"langsmith",children:"LangSmith"}),"\n",(0,t.jsxs)(n.p,{children:["Many of the applications you build with LangChain will contain multiple\nsteps with multiple invocations of LLM calls. As these applications get\nmore and more complex, it becomes crucial to be able to inspect what\nexactly is going on inside your chain or agent. The best way to do this\nis with ",(0,t.jsx)(n.a,{href:"https://smith.langchain.com",children:"LangSmith"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"After you sign up at the link above, make sure to set your environment\nvariables to start logging traces:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'export LANGCHAIN_TRACING_V2="true"\nexport LANGCHAIN_API_KEY="..."\n'})}),"\n",(0,t.jsx)(n.h2,{id:"quickstart",children:"Quickstart"}),"\n",(0,t.jsx)(n.p,{children:"First up, let\u2019s learn how to use a language model by itself. LangChain\nsupports many different language models that you can use\ninterchangably - select the one you want to use below!"}),"\n","\n",(0,t.jsx)(i.A,{openaiParams:'model="gpt-3.5-turbo"'}),"\n",(0,t.jsxs)(n.p,{children:["Let\u2019s first use the model directly. ",(0,t.jsx)(n.code,{children:"ChatModel"}),"s are instances of\nLangChain \u201cRunnables\u201d, which means they expose a standard interface for\ninteracting with them. To just simply call the model, we can pass in a\nlist of messages to the ",(0,t.jsx)(n.code,{children:".invoke"})," method."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { HumanMessage } from "@langchain/core/messages";\n\nawait model.invoke([new HumanMessage({ content: "Hi! I\'m Bob" })]);\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:'AIMessage {\n  lc_serializable: true,\n  lc_kwargs: {\n    content: "Hello Bob, it\'s nice to meet you! I\'m an AI assistant created by Anthropic. How are you doing today?",\n    tool_calls: [],\n    invalid_tool_calls: [],\n    additional_kwargs: {\n      id: "msg_015Qvu91azZviks5VzGvYT7z",\n      type: "message",\n      role: "assistant",\n      model: "claude-3-sonnet-20240229",\n      stop_sequence: null,\n      usage: { input_tokens: 12, output_tokens: 30 },\n      stop_reason: "end_turn"\n    },\n    response_metadata: {}\n  },\n  lc_namespace: [ "langchain_core", "messages" ],\n  content: "Hello Bob, it\'s nice to meet you! I\'m an AI assistant created by Anthropic. How are you doing today?",\n  name: undefined,\n  additional_kwargs: {\n    id: "msg_015Qvu91azZviks5VzGvYT7z",\n    type: "message",\n    role: "assistant",\n    model: "claude-3-sonnet-20240229",\n    stop_sequence: null,\n    usage: { input_tokens: 12, output_tokens: 30 },\n    stop_reason: "end_turn"\n  },\n  response_metadata: {\n    id: "msg_015Qvu91azZviks5VzGvYT7z",\n    model: "claude-3-sonnet-20240229",\n    stop_sequence: null,\n    usage: { input_tokens: 12, output_tokens: 30 },\n    stop_reason: "end_turn"\n  },\n  tool_calls: [],\n  invalid_tool_calls: []\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"The model on its own does not have any concept of state. For example, if\nyou ask a followup question:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'await model.invoke([new HumanMessage({ content: "What\'s my name?" })]);\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:'AIMessage {\n  lc_serializable: true,\n  lc_kwargs: {\n    content: "I\'m afraid I don\'t actually know your name. I\'m Claude, an AI assistant created by Anthropic.",\n    tool_calls: [],\n    invalid_tool_calls: [],\n    additional_kwargs: {\n      id: "msg_01TNDCwsU7ruVoqJwjKqNrzJ",\n      type: "message",\n      role: "assistant",\n      model: "claude-3-sonnet-20240229",\n      stop_sequence: null,\n      usage: { input_tokens: 12, output_tokens: 27 },\n      stop_reason: "end_turn"\n    },\n    response_metadata: {}\n  },\n  lc_namespace: [ "langchain_core", "messages" ],\n  content: "I\'m afraid I don\'t actually know your name. I\'m Claude, an AI assistant created by Anthropic.",\n  name: undefined,\n  additional_kwargs: {\n    id: "msg_01TNDCwsU7ruVoqJwjKqNrzJ",\n    type: "message",\n    role: "assistant",\n    model: "claude-3-sonnet-20240229",\n    stop_sequence: null,\n    usage: { input_tokens: 12, output_tokens: 27 },\n    stop_reason: "end_turn"\n  },\n  response_metadata: {\n    id: "msg_01TNDCwsU7ruVoqJwjKqNrzJ",\n    model: "claude-3-sonnet-20240229",\n    stop_sequence: null,\n    usage: { input_tokens: 12, output_tokens: 27 },\n    stop_reason: "end_turn"\n  },\n  tool_calls: [],\n  invalid_tool_calls: []\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Let\u2019s take a look at the example ",(0,t.jsx)(n.a,{href:"https://smith.langchain.com/public/e5a0ae1b-32b9-4beb-836d-38f40bfa6762/r",children:"LangSmith\ntrace"})]}),"\n",(0,t.jsx)(n.p,{children:"We can see that it doesn\u2019t take the previous conversation turn into\ncontext, and cannot answer the question. This makes for a terrible\nchatbot experience!"}),"\n",(0,t.jsx)(n.p,{children:"To get around this, we need to pass the entire conversation history into\nthe model. Let\u2019s see what happens when we do that:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { AIMessage } from "@langchain/core/messages";\n\nawait model.invoke([\n  new HumanMessage({ content: "Hi! I\'m Bob" }),\n  new AIMessage({ content: "Hello Bob! How can I assist you today?" }),\n  new HumanMessage({ content: "What\'s my name?" }),\n]);\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:'AIMessage {\n  lc_serializable: true,\n  lc_kwargs: {\n    content: "You said your name is Bob.",\n    tool_calls: [],\n    invalid_tool_calls: [],\n    additional_kwargs: {\n      id: "msg_01AEQMme3Z1MFKHW8PeDBJ7g",\n      type: "message",\n      role: "assistant",\n      model: "claude-3-sonnet-20240229",\n      stop_sequence: null,\n      usage: { input_tokens: 33, output_tokens: 10 },\n      stop_reason: "end_turn"\n    },\n    response_metadata: {}\n  },\n  lc_namespace: [ "langchain_core", "messages" ],\n  content: "You said your name is Bob.",\n  name: undefined,\n  additional_kwargs: {\n    id: "msg_01AEQMme3Z1MFKHW8PeDBJ7g",\n    type: "message",\n    role: "assistant",\n    model: "claude-3-sonnet-20240229",\n    stop_sequence: null,\n    usage: { input_tokens: 33, output_tokens: 10 },\n    stop_reason: "end_turn"\n  },\n  response_metadata: {\n    id: "msg_01AEQMme3Z1MFKHW8PeDBJ7g",\n    model: "claude-3-sonnet-20240229",\n    stop_sequence: null,\n    usage: { input_tokens: 33, output_tokens: 10 },\n    stop_reason: "end_turn"\n  },\n  tool_calls: [],\n  invalid_tool_calls: []\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"And now we can see that we get a good response!"}),"\n",(0,t.jsx)(n.p,{children:"This is the basic idea underpinning a chatbot\u2019s ability to interact\nconversationally. So how do we best implement this?"}),"\n",(0,t.jsx)(n.h2,{id:"message-history",children:"Message History"}),"\n",(0,t.jsx)(n.p,{children:"We can use a Message History class to wrap our model and make it\nstateful. This will keep track of inputs and outputs of the model, and\nstore them in some datastore. Future interactions will then load those\nmessages and pass them into the chain as part of the input. Let\u2019s see\nhow to use this!"}),"\n",(0,t.jsxs)(n.p,{children:["We import the relevant classes and set up our chain which wraps the\nmodel and adds in this message history. A key part here is the function\nwe pass into as the ",(0,t.jsx)(n.code,{children:"getSessionHistory()"}),". This function is expected to\ntake in a ",(0,t.jsx)(n.code,{children:"sessionId"})," and return a Message History object. This\n",(0,t.jsx)(n.code,{children:"sessionId"})," is used to distinguish between separate conversations, and\nshould be passed in as part of the config when calling the new chain."]}),"\n",(0,t.jsx)(n.p,{children:"Let\u2019s also create a simple chain by adding a prompt to help with\nformatting:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// We use an ephemeral, in-memory chat history for this demo.\nimport { InMemoryChatMessageHistory } from "@langchain/core/chat_history";\nimport { ChatPromptTemplate } from "@langchain/core/prompts";\nimport { RunnableWithMessageHistory } from "@langchain/core/runnables";\n\nconst messageHistories: Record<string, InMemoryChatMessageHistory> = {};\n\nconst prompt = ChatPromptTemplate.fromMessages([\n  [\n    "system",\n    `You are a helpful assistant who remembers all details the user shares with you.`,\n  ],\n  ["placeholder", "{chat_history}"],\n  ["human", "{input}"],\n]);\n\nconst chain = prompt.pipe(model);\n\nconst withMessageHistory = new RunnableWithMessageHistory({\n  runnable: chain,\n  getMessageHistory: async (sessionId) => {\n    if (messageHistories[sessionId] === undefined) {\n      messageHistories[sessionId] = new InMemoryChatMessageHistory();\n    }\n    return messageHistories[sessionId];\n  },\n  inputMessagesKey: "input",\n  historyMessagesKey: "chat_history",\n});\n'})}),"\n",(0,t.jsxs)(n.p,{children:["We now need to create a ",(0,t.jsx)(n.code,{children:"config"})," that we pass into the runnable every\ntime. This config contains information that is not part of the input\ndirectly, but is still useful. In this case, we want to include a\n",(0,t.jsx)(n.code,{children:"session_id"}),". This should look like:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'const config = {\n  configurable: {\n    sessionId: "abc2",\n  },\n};\n\nconst response = await withMessageHistory.invoke(\n  {\n    input: "Hi! I\'m Bob",\n  },\n  config\n);\n\nresponse.content;\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"\"Hi Bob, nice to meet you! I'm an AI assistant. I'll remember that your name is Bob as we continue ou\"... 110 more characters\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'const followupResponse = await withMessageHistory.invoke(\n  {\n    input: "What\'s my name?",\n  },\n  config\n);\n\nfollowupResponse.content;\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:'"Your name is Bob. You introduced yourself as Bob at the start of our conversation."\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Great! Our chatbot now remembers things about us. If we change the\nconfig to reference a different ",(0,t.jsx)(n.code,{children:"session_id"}),", we can see that it starts\nthe conversation fresh."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'const config = {\n  configurable: {\n    sessionId: "abc3",\n  },\n};\n\nconst response = await withMessageHistory.invoke(\n  {\n    input: "What\'s my name?",\n  },\n  config\n);\n\nresponse.content;\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"\"I'm afraid I don't actually know your name. As an AI assistant without any prior context about you, \"... 61 more characters\n"})}),"\n",(0,t.jsx)(n.p,{children:"However, we can always go back to the original conversation (since we\nare persisting it in a database)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'const config = {\n  configurable: {\n    sessionId: "abc2",\n  },\n};\n\nconst response = await withMessageHistory.invoke(\n  {\n    input: "What\'s my name?",\n  },\n  config\n);\n\nresponse.content;\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:'`Your name is Bob. I clearly remember you telling me "Hi! I\'m Bob" when we started talking.`\n'})}),"\n",(0,t.jsx)(n.p,{children:"This is how we can support a chatbot having conversations with many\nusers!"}),"\n",(0,t.jsx)(n.h2,{id:"managing-conversation-history",children:"Managing Conversation History"}),"\n",(0,t.jsx)(n.p,{children:"One important concept to understand when building chatbots is how to\nmanage conversation history. If left unmanaged, the list of messages\nwill grow unbounded and potentially overflow the context window of the\nLLM. Therefore, it is important to add a step that limits the size of\nthe messages you are passing in."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Importantly, you will want to do this BEFORE the prompt template but\nAFTER you load previous messages from Message History."})}),"\n",(0,t.jsxs)(n.p,{children:["We can do this by adding a simple step in front of the prompt that\nmodifies the ",(0,t.jsx)(n.code,{children:"chat_history"})," key appropriately, and then wrap that new\nchain in the Message History class. First, let\u2019s define a function that\nwill modify the messages passed in. Let\u2019s make it so that it selects the\n10 most recent messages. We can then create a new chain by adding that\nat the start."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import type { BaseMessage } from "@langchain/core/messages";\nimport {\n  RunnablePassthrough,\n  RunnableSequence,\n} from "@langchain/core/runnables";\n\nconst filterMessages = ({ chat_history }: { chat_history: BaseMessage[] }) => {\n  return chat_history.slice(-10);\n};\n\nconst chain = RunnableSequence.from([\n  RunnablePassthrough.assign({\n    chat_history: filterMessages,\n  }),\n  prompt,\n  model,\n]);\n'})}),"\n",(0,t.jsx)(n.p,{children:"Let\u2019s now try it out! If we create a list of messages more than 10\nmessages long, we can see what it no longer remembers information in the\nearly messages."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'const messages = [\n  new HumanMessage({ content: "hi! I\'m bob" }),\n  new AIMessage({ content: "hi!" }),\n  new HumanMessage({ content: "I like vanilla ice cream" }),\n  new AIMessage({ content: "nice" }),\n  new HumanMessage({ content: "whats 2 + 2" }),\n  new AIMessage({ content: "4" }),\n  new HumanMessage({ content: "thanks" }),\n  new AIMessage({ content: "No problem!" }),\n  new HumanMessage({ content: "having fun?" }),\n  new AIMessage({ content: "yes!" }),\n  new HumanMessage({ content: "That\'s great!" }),\n  new AIMessage({ content: "yes it is!" }),\n];\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'const response = await chain.invoke({\n  chat_history: messages,\n  input: "what\'s my name?",\n});\nresponse.content;\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"\"I'm afraid I don't actually know your name. You haven't provided that detail to me yet.\"\n"})}),"\n",(0,t.jsx)(n.p,{children:"But if we ask about information that is within the last ten messages, it\nstill remembers it"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'const response = await chain.invoke({\n  chat_history: messages,\n  input: "what\'s my fav ice cream",\n});\nresponse.content;\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:'"You said earlier that you like vanilla ice cream."\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Let\u2019s now wrap this chain in a ",(0,t.jsx)(n.code,{children:"RunnableWithMessageHistory"})," constructor.\nFor demo purposes, we will also slightly modify our\n",(0,t.jsx)(n.code,{children:"getMessageHistory()"})," method to always start new sessions with the\npreviously declared list of 10 messages to simulate several conversation\nturns:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'const messageHistories: Record<string, InMemoryChatMessageHistory> = {};\n\nconst withMessageHistory = new RunnableWithMessageHistory({\n  runnable: chain,\n  getMessageHistory: async (sessionId) => {\n    if (messageHistories[sessionId] === undefined) {\n      const messageHistory = new InMemoryChatMessageHistory();\n      await messageHistory.addMessages(messages);\n      messageHistories[sessionId] = messageHistory;\n    }\n    return messageHistories[sessionId];\n  },\n  inputMessagesKey: "input",\n  historyMessagesKey: "chat_history",\n});\n\nconst config = {\n  configurable: {\n    sessionId: "abc4",\n  },\n};\n\nconst response = await withMessageHistory.invoke(\n  {\n    input: "whats my name?",\n  },\n  config\n);\n\nresponse.content;\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"\"I'm afraid I don't actually know your name since you haven't provided it to me yet.  I don't have pe\"... 66 more characters\n"})}),"\n",(0,t.jsx)(n.p,{children:"There\u2019s now two new messages in the chat history. This means that even\nmore information that used to be accessible in our conversation history\nis no longer available!"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'const response = await withMessageHistory.invoke(\n  {\n    input: "whats my favorite ice cream?",\n  },\n  config\n);\n\nresponse.content;\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"\"I'm sorry, I don't have any information about your favorite ice cream flavor since you haven't share\"... 167 more characters\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If you take a look at LangSmith, you can see exactly what is happening\nunder the hood in the ",(0,t.jsx)(n.a,{href:"https://smith.langchain.com/public/ebc2e1e7-0703-43f7-a476-8cb8cbd7f61a/r",children:"LangSmith\ntrace"}),".\nNavigate to the chat model call to see exactly which messages are\ngetting filtered out."]}),"\n",(0,t.jsx)(n.h2,{id:"streaming",children:"Streaming"}),"\n",(0,t.jsxs)(n.p,{children:["Now we\u2019ve got a functional chatbot. However, one ",(0,t.jsx)(n.em,{children:"really"})," important UX\nconsideration for chatbot application is streaming. LLMs can sometimes\ntake a while to respond, and so in order to improve the user experience\none thing that most application do is stream back each token as it is\ngenerated. This allows the user to see progress."]}),"\n",(0,t.jsx)(n.p,{children:"It\u2019s actually super easy to do this!"}),"\n",(0,t.jsxs)(n.p,{children:["All chains expose a ",(0,t.jsx)(n.code,{children:".stream()"})," method, and ones that use message\nhistory are no different. We can simply use that method to get back a\nstreaming response."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'const config = {\n  configurable: {\n    sessionId: "abc6",\n  },\n};\n\nconst stream = await withMessageHistory.stream(\n  {\n    input: "hi! I\'m todd. tell me a joke",\n  },\n  config\n);\n\nfor await (const chunk of stream) {\n  console.log("|", chunk.content);\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"|\n| Hi\n|  Tod\n| d!\n|  Here\n| 's\n|  a\n|  silly\n|  joke\n|  for\n|  you\n| :\n|\n\nWhy\n|  di\n| d the\n|  tom\n| ato\n|  turn\n|  re\n| d?\n|  Because\n|  it\n|  saw\n|  the\n|  sal\n| a\n| d\n| dressing\n| !\n|\n|\n"})}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsx)(n.p,{children:"Now that you understand the basics of how to create a chatbot in\nLangChain, some more advanced tutorials you may be interested in are:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"../../docs/tutorials/qa_chat_history",children:"Conversational RAG"}),": Enable a\nchatbot experience over an external source of data"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"../../docs/tutorials/agents",children:"Agents"}),": Build a chatbot that can take\nactions"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"If you want to dive deeper on specifics, some things worth checking out\nare:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"../../docs/how_to/streaming",children:"Streaming"}),": streaming is ",(0,t.jsx)(n.em,{children:"crucial"})," for\nchat applications"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"../../docs/how_to/message_history",children:"How to add message history"}),": for\na deeper dive into all things related to message history"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},63142:(e,n,s)=>{s.d(n,{A:()=>m});s(96540);var t=s(11470),a=s(19365),o=s(21432),i=s(27846),r=s(27293),l=s(74848);function c(e){let{children:n}=e;return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(r.A,{type:"tip",children:(0,l.jsxs)("p",{children:["See"," ",(0,l.jsx)("a",{href:"/docs/get_started/installation#installing-integration-packages",children:"this section for general instructions on installing integration packages"}),"."]})}),(0,l.jsx)(i.A,{children:n})]})}const h={openaiParams:'{\n  model: "gpt-3.5-turbo",\n  temperature: 0\n}',anthropicParams:'{\n  model: "claude-3-sonnet-20240229",\n  temperature: 0\n}',fireworksParams:'{\n  model: "accounts/fireworks/models/firefunction-v1",\n  temperature: 0\n}',mistralParams:'{\n  model: "mistral-large-latest",\n  temperature: 0\n}',groqParams:'{\n  model: "mixtral-8x7b-32768",\n  temperature: 0\n}',vertexParams:'{\n  model: "gemini-1.5-pro",\n  temperature: 0\n}'},d=["openai","anthropic","mistral","groq","vertex"];function m(e){const{customVarName:n,additionalDependencies:s}=e,i=n??"model",r=e.openaiParams??h.openaiParams,m=e.anthropicParams??h.anthropicParams,p=e.fireworksParams??h.fireworksParams,u=e.mistralParams??h.mistralParams,g=e.groqParams??h.groqParams,x=e.vertexParams??h.vertexParams,y=e.providers??["openai","anthropic","fireworks","mistral","groq","vertex"],w={openai:{value:"openai",label:"OpenAI",default:!0,text:`import { ChatOpenAI } from "@langchain/openai";\n\nconst ${i} = new ChatOpenAI(${r});`,envs:"OPENAI_API_KEY=your-api-key",dependencies:"@langchain/openai"},anthropic:{value:"anthropic",label:"Anthropic",default:!1,text:`import { ChatAnthropic } from "@langchain/anthropic";\n\nconst ${i} = new ChatAnthropic(${m});`,envs:"ANTHROPIC_API_KEY=your-api-key",dependencies:"@langchain/anthropic"},fireworks:{value:"fireworks",label:"FireworksAI",default:!1,text:`import { ChatFireworks } from "@langchain/community/chat_models/fireworks";\n\nconst ${i} = new ChatFireworks(${p});`,envs:"FIREWORKS_API_KEY=your-api-key",dependencies:"@langchain/community"},mistral:{value:"mistral",label:"MistralAI",default:!1,text:`import { ChatMistralAI } from "@langchain/mistralai";\n\nconst ${i} = new ChatMistralAI(${u});`,envs:"MISTRAL_API_KEY=your-api-key",dependencies:"@langchain/mistralai"},groq:{value:"groq",label:"Groq",default:!1,text:`import { ChatGroq } from "@langchain/groq";\n\nconst ${i} = new ChatGroq(${g});`,envs:"GROQ_API_KEY=your-api-key",dependencies:"@langchain/groq"},vertex:{value:"vertex",label:"VertexAI",default:!1,text:`import { ChatVertexAI } from "@langchain/google-vertexai";\n\nconst ${i} = new ChatVertexAI(${x});`,envs:"GOOGLE_APPLICATION_CREDENTIALS=credentials.json",dependencies:"@langchain/google-vertexai"}},f=(e.onlyWso?d:y).map((e=>w[e]));return(0,l.jsxs)("div",{children:[(0,l.jsx)("h3",{children:"Pick your chat model:"}),(0,l.jsx)(t.A,{groupId:"modelTabs",children:f.map((e=>(0,l.jsxs)(a.A,{value:e.value,label:e.label,children:[(0,l.jsx)("h4",{children:"Install dependencies"}),(0,l.jsx)(c,{children:[e.dependencies,s].join(" ")}),(0,l.jsx)("h4",{children:"Add environment variables"}),(0,l.jsx)(o.A,{language:"bash",children:e.envs}),(0,l.jsx)("h4",{children:"Instantiate the model"}),(0,l.jsx)(o.A,{language:"typescript",children:e.text})]},e.value)))})]})}},27846:(e,n,s)=>{s.d(n,{A:()=>r});s(96540);var t=s(11470),a=s(19365),o=s(21432),i=s(74848);function r(e){let{children:n}=e;return(0,i.jsxs)(t.A,{groupId:"npm2yarn",children:[(0,i.jsx)(a.A,{value:"npm",label:"npm",children:(0,i.jsxs)(o.A,{language:"bash",children:["npm i ",n]})}),(0,i.jsx)(a.A,{value:"yarn",label:"yarn",default:!0,children:(0,i.jsxs)(o.A,{language:"bash",children:["yarn add ",n]})}),(0,i.jsx)(a.A,{value:"pnpm",label:"pnpm",children:(0,i.jsxs)(o.A,{language:"bash",children:["pnpm add ",n]})})]})}}}]);
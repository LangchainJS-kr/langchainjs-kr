"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1029],{47485:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>m,contentTitle:()=>d,default:()=>l,frontMatter:()=>a,metadata:()=>r,toc:()=>o});var t=i(74848),s=i(28453);const a={},d="Minimax",r={id:"integrations/text_embedding/minimax",title:"Minimax",description:"The MinimaxEmbeddings class uses the Minimax API to generate embeddings for a given text.",source:"@site/docs/integrations/text_embedding/minimax.mdx",sourceDirName:"integrations/text_embedding",slug:"/integrations/text_embedding/minimax",permalink:"/docs/integrations/text_embedding/minimax",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/text_embedding/minimax.mdx",tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Llama CPP",permalink:"/docs/integrations/text_embedding/llama_cpp"},next:{title:"Mistral AI",permalink:"/docs/integrations/text_embedding/mistralai"}},m={},o=[];function c(e){const n={a:"a",code:"code",h1:"h1",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"minimax",children:"Minimax"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"MinimaxEmbeddings"})," class uses the Minimax API to generate embeddings for a given text."]}),"\n",(0,t.jsx)(n.h1,{id:"setup",children:"Setup"}),"\n",(0,t.jsxs)(n.p,{children:["To use Minimax model, you'll need a ",(0,t.jsx)(n.a,{href:"https://api.minimax.chat",children:"Minimax account"}),", an ",(0,t.jsx)(n.a,{href:"https://api.minimax.chat/user-center/basic-information/interface-key",children:"API key"}),", and a ",(0,t.jsx)(n.a,{href:"https://api.minimax.chat/user-center/basic-information",children:"Group ID"})]}),"\n",(0,t.jsx)(n.h1,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { MinimaxEmbeddings } from "langchain/embeddings/minimax";\n\nexport const run = async () => {\n  /* Embed queries */\n  const embeddings = new MinimaxEmbeddings();\n  const res = await embeddings.embedQuery("Hello world");\n  console.log(res);\n  /* Embed documents */\n  const documentRes = await embeddings.embedDocuments([\n    "Hello world",\n    "Bye bye",\n  ]);\n  console.log({ documentRes });\n};\n'})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);
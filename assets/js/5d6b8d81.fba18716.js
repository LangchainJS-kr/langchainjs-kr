(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2097,65],{59969:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>b,contentTitle:()=>h,default:()=>y,frontMatter:()=>u,metadata:()=>g,toc:()=>f});var o=t(74848),s=t(28453),a=t(64428),i=t(78847),r=t(48593),c=t.n(r),l=t(9443),d=t.n(l),m=t(70649),p=t.n(m);const u={},h="Zep",g={id:"integrations/vectorstores/zep",title:"Zep",description:"Zep is a long-term memory service for AI Assistant apps.",source:"@site/docs/integrations/vectorstores/zep.mdx",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/zep",permalink:"/docs/integrations/vectorstores/zep",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/vectorstores/zep.mdx",tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Xata",permalink:"/docs/integrations/vectorstores/xata"},next:{title:"Retrievers",permalink:"/docs/integrations/retrievers"}},b={},f=[{value:"Why Zep&#39;s VectorStore? \ud83e\udd16\ud83d\ude80",id:"why-zeps-vectorstore-",level:2},{value:"Supported Search Types",id:"supported-search-types",level:3},{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Example: Creating a ZepVectorStore from Documents &amp; Querying",id:"example-creating-a-zepvectorstore-from-documents--querying",level:3},...i.toc,{value:"Example: Querying a ZepVectorStore using a metadata filter",id:"example-querying-a-zepvectorstore-using-a-metadata-filter",level:3},{value:"Example: Using a LangChain Embedding Class such as <code>OpenAIEmbeddings</code>",id:"example-using-a-langchain-embedding-class-such-as-openaiembeddings",level:3}];function x(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"zep",children:"Zep"}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://www.getzep.com",children:"Zep"})," is a long-term memory service for AI Assistant apps.\nWith Zep, you can provide AI assistants with the ability to recall past conversations, no matter how distant,\nwhile also reducing hallucinations, latency, and cost."]}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["Interested in Zep Cloud? See ",(0,o.jsx)(n.a,{href:"https://help.getzep.com/sdks",children:"Zep Cloud Installation Guide"}),", ",(0,o.jsx)(n.a,{href:"https://help.getzep.com/langchain/examples/vectorstore-example",children:"Zep Cloud Vector Store Example"})]}),"\n"]}),"\n","\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Note:"})," The ",(0,o.jsx)(n.code,{children:"ZepVectorStore"})," works with ",(0,o.jsx)(n.code,{children:"Documents"})," and is intended to be used as a ",(0,o.jsx)(n.code,{children:"Retriever"}),".\nIt offers separate functionality to Zep's ",(0,o.jsx)(n.code,{children:"ZepMemory"})," class, which is designed for persisting, enriching\nand searching your user's chat history."]}),"\n",(0,o.jsx)(n.h2,{id:"why-zeps-vectorstore-",children:"Why Zep's VectorStore? \ud83e\udd16\ud83d\ude80"}),"\n",(0,o.jsx)(n.p,{children:"Zep automatically embeds documents added to the Zep Vector Store using low-latency models local to the Zep server.\nThe Zep TS/JS client can be used in non-Node edge environments. These two together with Zep's chat memory functionality\nmake Zep ideal for building conversational LLM apps where latency and performance are important."}),"\n",(0,o.jsx)(n.h3,{id:"supported-search-types",children:"Supported Search Types"}),"\n",(0,o.jsx)(n.p,{children:"Zep supports both similarity search and Maximal Marginal Relevance (MMR) search. MMR search is particularly useful\nfor Retrieval Augmented Generation applications as it re-ranks results to ensure diversity in the returned documents."}),"\n",(0,o.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,o.jsxs)(n.p,{children:["Follow the ",(0,o.jsx)(n.a,{href:"https://docs.getzep.com/deployment/quickstart/",children:"Zep Quickstart Guide"})," to install and get started with Zep."]}),"\n",(0,o.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsxs)(n.p,{children:["You'll need your Zep API URL and optionally an API key to use the Zep VectorStore. See the ",(0,o.jsx)(n.a,{href:"https://docs.getzep.com",children:"Zep docs"})," for more information."]}),"\n",(0,o.jsxs)(n.p,{children:["In the examples below, we're using Zep's auto-embedding feature which automatically embed documents on the Zep server using\nlow-latency embedding models. Since LangChain requires passing in a ",(0,o.jsx)(n.code,{children:"Embeddings"})," instance, we pass in ",(0,o.jsx)(n.code,{children:"FakeEmbeddings"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Note:"})," If you pass in an ",(0,o.jsx)(n.code,{children:"Embeddings"})," instance other than ",(0,o.jsx)(n.code,{children:"FakeEmbeddings"}),", this class will be used to embed documents.\nYou must also set your document collection to ",(0,o.jsx)(n.code,{children:"isAutoEmbedded === false"}),". See the ",(0,o.jsx)(n.code,{children:"OpenAIEmbeddings"})," example below."]}),"\n",(0,o.jsx)(n.h3,{id:"example-creating-a-zepvectorstore-from-documents--querying",children:"Example: Creating a ZepVectorStore from Documents & Querying"}),"\n","\n",(0,o.jsx)(i.default,{}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai @langchain/community\n"})}),"\n","\n",(0,o.jsx)(a.A,{language:"typescript",children:c()}),"\n",(0,o.jsx)(n.h3,{id:"example-querying-a-zepvectorstore-using-a-metadata-filter",children:"Example: Querying a ZepVectorStore using a metadata filter"}),"\n","\n",(0,o.jsx)(a.A,{language:"typescript",children:d()}),"\n",(0,o.jsxs)(n.h3,{id:"example-using-a-langchain-embedding-class-such-as-openaiembeddings",children:["Example: Using a LangChain Embedding Class such as ",(0,o.jsx)(n.code,{children:"OpenAIEmbeddings"})]}),"\n","\n",(0,o.jsx)(a.A,{language:"typescript",children:p()})]})}function y(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(x,{...e})}):x(e)}},78847:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var o=t(74848),s=t(28453);const a={},i=void 0,r={id:"mdx_components/integration_install_tooltip",title:"integration_install_tooltip",description:"See this section for general instructions on installing integration packages.",source:"@site/docs/mdx_components/integration_install_tooltip.mdx",sourceDirName:"mdx_components",slug:"/mdx_components/integration_install_tooltip",permalink:"/docs/mdx_components/integration_install_tooltip",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/mdx_components/integration_install_tooltip.mdx",tags:[],version:"current",frontMatter:{}},c={},l=[];function d(e){const n={a:"a",admonition:"admonition",p:"p",...(0,s.R)(),...e.components};return(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["See ",(0,o.jsx)(n.a,{href:"/docs/how_to/installation#installing-integration-packages",children:"this section for general instructions on installing integration packages"}),"."]})})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},48593:e=>{e.exports={content:'import { ZepVectorStore } from "@langchain/community/vectorstores/zep";\nimport { FakeEmbeddings } from "@langchain/core/utils/testing";\nimport { TextLoader } from "langchain/document_loaders/fs/text";\nimport { randomUUID } from "crypto";\n\nconst loader = new TextLoader("src/document_loaders/example_data/example.txt");\nconst docs = await loader.load();\nexport const run = async () => {\n  const collectionName = `collection${randomUUID().split("-")[0]}`;\n\n  const zepConfig = {\n    apiUrl: "http://localhost:8000", // this should be the URL of your Zep implementation\n    collectionName,\n    embeddingDimensions: 1536, // this much match the width of the embeddings you\'re using\n    isAutoEmbedded: true, // If true, the vector store will automatically embed documents when they are added\n  };\n\n  const embeddings = new FakeEmbeddings();\n\n  const vectorStore = await ZepVectorStore.fromDocuments(\n    docs,\n    embeddings,\n    zepConfig\n  );\n\n  // Wait for the documents to be embedded\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const c = await vectorStore.client.document.getCollection(collectionName);\n    console.log(\n      `Embedding status: ${c.document_embedded_count}/${c.document_count} documents embedded`\n    );\n    // eslint-disable-next-line no-promise-executor-return\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n    if (c.status === "ready") {\n      break;\n    }\n  }\n\n  const results = await vectorStore.similaritySearchWithScore("bar", 3);\n\n  console.log("Similarity Results:");\n  console.log(JSON.stringify(results));\n\n  const results2 = await vectorStore.maxMarginalRelevanceSearch("bar", {\n    k: 3,\n  });\n\n  console.log("MMR Results:");\n  console.log(JSON.stringify(results2));\n};\n',imports:[{local:"ZepVectorStore",imported:"ZepVectorStore",source:"@langchain/community/vectorstores/zep"},{local:"FakeEmbeddings",imported:"FakeEmbeddings",source:"@langchain/core/utils/testing"},{local:"TextLoader",imported:"TextLoader",source:"langchain/document_loaders/fs/text"}]}},9443:e=>{e.exports={content:'import { ZepVectorStore } from "@langchain/community/vectorstores/zep";\nimport { FakeEmbeddings } from "@langchain/core/utils/testing";\nimport { randomUUID } from "crypto";\nimport { Document } from "@langchain/core/documents";\n\nconst docs = [\n  new Document({\n    metadata: { album: "Led Zeppelin IV", year: 1971 },\n    pageContent:\n      "Stairway to Heaven is one of the most iconic songs by Led Zeppelin.",\n  }),\n  new Document({\n    metadata: { album: "Led Zeppelin I", year: 1969 },\n    pageContent:\n      "Dazed and Confused was a standout track on Led Zeppelin\'s debut album.",\n  }),\n  new Document({\n    metadata: { album: "Physical Graffiti", year: 1975 },\n    pageContent:\n      "Kashmir, from Physical Graffiti, showcases Led Zeppelin\'s unique blend of rock and world music.",\n  }),\n  new Document({\n    metadata: { album: "Houses of the Holy", year: 1973 },\n    pageContent:\n      "The Rain Song is a beautiful, melancholic piece from Houses of the Holy.",\n  }),\n  new Document({\n    metadata: { band: "Black Sabbath", album: "Paranoid", year: 1970 },\n    pageContent:\n      "Paranoid is Black Sabbath\'s second studio album and includes some of their most notable songs.",\n  }),\n  new Document({\n    metadata: {\n      band: "Iron Maiden",\n      album: "The Number of the Beast",\n      year: 1982,\n    },\n    pageContent:\n      "The Number of the Beast is often considered Iron Maiden\'s best album.",\n  }),\n  new Document({\n    metadata: { band: "Metallica", album: "Master of Puppets", year: 1986 },\n    pageContent:\n      "Master of Puppets is widely regarded as Metallica\'s finest work.",\n  }),\n  new Document({\n    metadata: { band: "Megadeth", album: "Rust in Peace", year: 1990 },\n    pageContent:\n      "Rust in Peace is Megadeth\'s fourth studio album and features intricate guitar work.",\n  }),\n];\n\nexport const run = async () => {\n  const collectionName = `collection${randomUUID().split("-")[0]}`;\n\n  const zepConfig = {\n    apiUrl: "http://localhost:8000", // this should be the URL of your Zep implementation\n    collectionName,\n    embeddingDimensions: 1536, // this much match the width of the embeddings you\'re using\n    isAutoEmbedded: true, // If true, the vector store will automatically embed documents when they are added\n  };\n\n  const embeddings = new FakeEmbeddings();\n\n  const vectorStore = await ZepVectorStore.fromDocuments(\n    docs,\n    embeddings,\n    zepConfig\n  );\n\n  // Wait for the documents to be embedded\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const c = await vectorStore.client.document.getCollection(collectionName);\n    console.log(\n      `Embedding status: ${c.document_embedded_count}/${c.document_count} documents embedded`\n    );\n    // eslint-disable-next-line no-promise-executor-return\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n    if (c.status === "ready") {\n      break;\n    }\n  }\n\n  vectorStore\n    .similaritySearchWithScore("sad music", 3, {\n      where: { jsonpath: "$[*] ? (@.year == 1973)" }, // We should see a single result: The Rain Song\n    })\n    .then((results) => {\n      console.log(`\\n\\nSimilarity Results:\\n${JSON.stringify(results)}`);\n    })\n    .catch((e) => {\n      if (e.name === "NotFoundError") {\n        console.log("No results found");\n      } else {\n        throw e;\n      }\n    });\n\n  // We\'re not filtering here, but rather demonstrating MMR at work.\n  // We could also add a filter to the MMR search, as we did with the similarity search above.\n  vectorStore\n    .maxMarginalRelevanceSearch("sad music", {\n      k: 3,\n    })\n    .then((results) => {\n      console.log(`\\n\\nMMR Results:\\n${JSON.stringify(results)}`);\n    })\n    .catch((e) => {\n      if (e.name === "NotFoundError") {\n        console.log("No results found");\n      } else {\n        throw e;\n      }\n    });\n};\n',imports:[{local:"ZepVectorStore",imported:"ZepVectorStore",source:"@langchain/community/vectorstores/zep"},{local:"FakeEmbeddings",imported:"FakeEmbeddings",source:"@langchain/core/utils/testing"},{local:"Document",imported:"Document",source:"@langchain/core/documents"}]}},70649:e=>{e.exports={content:'import { ZepVectorStore } from "@langchain/community/vectorstores/zep";\nimport { OpenAIEmbeddings } from "@langchain/openai";\nimport { TextLoader } from "langchain/document_loaders/fs/text";\nimport { randomUUID } from "crypto";\n\nconst loader = new TextLoader("src/document_loaders/example_data/example.txt");\nconst docs = await loader.load();\nexport const run = async () => {\n  const collectionName = `collection${randomUUID().split("-")[0]}`;\n\n  const zepConfig = {\n    apiUrl: "http://localhost:8000", // this should be the URL of your Zep implementation\n    collectionName,\n    embeddingDimensions: 1536, // this much match the width of the embeddings you\'re using\n    isAutoEmbedded: false, // set to false to disable auto-embedding\n  };\n\n  const embeddings = new OpenAIEmbeddings();\n\n  const vectorStore = await ZepVectorStore.fromDocuments(\n    docs,\n    embeddings,\n    zepConfig\n  );\n\n  const results = await vectorStore.similaritySearchWithScore("bar", 3);\n\n  console.log("Similarity Results:");\n  console.log(JSON.stringify(results));\n\n  const results2 = await vectorStore.maxMarginalRelevanceSearch("bar", {\n    k: 3,\n  });\n\n  console.log("MMR Results:");\n  console.log(JSON.stringify(results2));\n};\n',imports:[{local:"ZepVectorStore",imported:"ZepVectorStore",source:"@langchain/community/vectorstores/zep"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"},{local:"TextLoader",imported:"TextLoader",source:"langchain/document_loaders/fs/text"}]}}}]);
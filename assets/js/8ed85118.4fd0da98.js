(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5455],{98902:(e,s,n)=>{"use strict";n.r(s),n.d(s,{assets:()=>g,contentTitle:()=>c,default:()=>u,frontMatter:()=>d,metadata:()=>l,toc:()=>m});var t=n(74848),i=n(28453),o=n(64428),a=n(14685),r=n.n(a);const d={},c="IORedis",l={id:"integrations/stores/ioredis_storage",title:"IORedis",description:"This example demonstrates how to setup chat history storage using the RedisByteStore BaseStore integration.",source:"@site/docs/integrations/stores/ioredis_storage.mdx",sourceDirName:"integrations/stores",slug:"/integrations/stores/ioredis_storage",permalink:"/docs/integrations/stores/ioredis_storage",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/stores/ioredis_storage.mdx",tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Stores",permalink:"/docs/integrations/stores/"},next:{title:"Upstash Redis",permalink:"/docs/integrations/stores/upstash_redis_storage"}},g={},m=[{value:"Setup",id:"setup",level:2},{value:"Usage",id:"usage",level:2}];function h(e){const s={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h1,{id:"ioredis",children:"IORedis"}),"\n",(0,t.jsxs)(s.p,{children:["This example demonstrates how to setup chat history storage using the ",(0,t.jsx)(s.code,{children:"RedisByteStore"})," ",(0,t.jsx)(s.code,{children:"BaseStore"})," integration."]}),"\n",(0,t.jsx)(s.h2,{id:"setup",children:"Setup"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install ioredis\n"})}),"\n",(0,t.jsx)(s.h2,{id:"usage",children:"Usage"}),"\n","\n",(0,t.jsx)(o.A,{language:"typescript",children:r()})]})}function u(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},14685:e=>{e.exports={content:'import { Redis } from "ioredis";\nimport { RedisByteStore } from "@langchain/community/storage/ioredis";\nimport { AIMessage, HumanMessage } from "@langchain/core/messages";\n\n// Define the client and store\nconst client = new Redis({});\nconst store = new RedisByteStore({\n  client,\n});\n// Define our encoder/decoder for converting between strings and Uint8Arrays\nconst encoder = new TextEncoder();\nconst decoder = new TextDecoder();\n/**\n * Here you would define your LLM and chat chain, call\n * the LLM and eventually get a list of messages.\n * For this example, we\'ll assume we already have a list.\n */\nconst messages = Array.from({ length: 5 }).map((_, index) => {\n  if (index % 2 === 0) {\n    return new AIMessage("ai stuff...");\n  }\n  return new HumanMessage("human stuff...");\n});\n// Set your messages in the store\n// The key will be prefixed with `message:id:` and end\n// with the index.\nawait store.mset(\n  messages.map((message, index) => [\n    `message:id:${index}`,\n    encoder.encode(JSON.stringify(message)),\n  ])\n);\n// Now you can get your messages from the store\nconst retrievedMessages = await store.mget(["message:id:0", "message:id:1"]);\n// Make sure to decode the values\nconsole.log(retrievedMessages.map((v) => decoder.decode(v)));\n/**\n[\n  \'{"id":["langchain","AIMessage"],"kwargs":{"content":"ai stuff..."}}\',\n  \'{"id":["langchain","HumanMessage"],"kwargs":{"content":"human stuff..."}}\'\n]\n */\n// Or, if you want to get back all the keys you can call\n// the `yieldKeys` method.\n// Optionally, you can pass a key prefix to only get back\n// keys which match that prefix.\nconst yieldedKeys = [];\nfor await (const key of store.yieldKeys("message:id:")) {\n  yieldedKeys.push(key);\n}\n// The keys are not encoded, so no decoding is necessary\nconsole.log(yieldedKeys);\n/**\n[\n  \'message:id:2\',\n  \'message:id:1\',\n  \'message:id:3\',\n  \'message:id:0\',\n  \'message:id:4\'\n]\n */\n// Finally, let\'s delete the keys from the store\n// and close the Redis connection.\nawait store.mdelete(yieldedKeys);\nclient.disconnect();\n',imports:[{local:"RedisByteStore",imported:"RedisByteStore",source:"@langchain/community/storage/ioredis"},{local:"AIMessage",imported:"AIMessage",source:"@langchain/core/messages"},{local:"HumanMessage",imported:"HumanMessage",source:"@langchain/core/messages"}]}}}]);
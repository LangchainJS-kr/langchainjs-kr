"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6377],{47664:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var i=t(74848),a=t(28453);const r={sidebar_position:5},o="Contribute Integrations",s={id:"contributing/integrations",title:"Contribute Integrations",description:"To begin, make sure you have all the dependencies outlined in guide on Contributing Code.",source:"@site/docs/contributing/integrations.mdx",sourceDirName:"contributing",slug:"/contributing/integrations",permalink:"/docs/contributing/integrations",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/contributing/integrations.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5}},c={},l=[{value:"Community package",id:"community-package",level:2},{value:"Partner package in LangChain repo",id:"partner-package-in-langchain-repo",level:2},{value:"Set up a new package",id:"set-up-a-new-package",level:3},{value:"Dependencies",id:"dependencies",level:3},{value:"Write Unit and Integration Tests",id:"write-unit-and-integration-tests",level:3},{value:"Write documentation",id:"write-documentation",level:3},{value:"(If Necessary) Deprecate community integration",id:"if-necessary-deprecate-community-integration",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"contribute-integrations",children:"Contribute Integrations"}),"\n",(0,i.jsxs)(n.p,{children:["To begin, make sure you have all the dependencies outlined in guide on ",(0,i.jsx)(n.a,{href:"/docs/contributing/code/",children:"Contributing Code"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"There are a few different places you can contribute integrations for LangChain:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Community"}),": For lighter-weight integrations that are primarily maintained by LangChain and the Open Source Community."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Partner Packages"}),": For independent packages that are co-maintained by LangChain and a partner."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"For the most part, new integrations should be added to the Community package. Partner packages require more maintenance as separate packages, so please confirm with the LangChain team before creating a new partner package."}),"\n",(0,i.jsxs)(n.p,{children:["In the following sections, we'll walk through how to contribute to each of these packages from a fake company, ",(0,i.jsx)(n.code,{children:"Parrot Link AI"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"community-package",children:"Community package"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"@langchain/community"})," package is in ",(0,i.jsx)(n.code,{children:"libs/langchain-community"})," and contains most integrations."]}),"\n",(0,i.jsxs)(n.p,{children:["It can be installed with e.g. ",(0,i.jsx)(n.code,{children:"npm install @langchain/community"}),", and exported members can be imported with code like"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { ChatParrotLink } from "@langchain/community/chat_models/parrot_link";\nimport { ParrotLinkLLM } from "@langchain/community/llms/parrot_link";\nimport { ParrotLinkVectorStore } from "@langchain/community/vectorstores/parrot_link";\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"@langchain/community"})," package relies on manually-installed dependent packages, so you will see errors\nif you try to import a package that is not installed. In our fake example, if you tried to import ",(0,i.jsx)(n.code,{children:"ParrotLinkLLM"})," without installing ",(0,i.jsx)(n.code,{children:"parrot-link-sdk"}),", you would see an error telling you that the package failed to import."]}),"\n",(0,i.jsxs)(n.p,{children:["Let's say we wanted to implement a chat model for Parrot Link AI. We would create a new file in ",(0,i.jsx)(n.code,{children:"libs/langchain-community/src/chat_models/parrot_link.ts"})," with something like the following code:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import {\n  SimpleChatModel,\n} from "@langchain/core/language_models/chat_models";\n\nexport class ChatParrotLink extends SimpleChatModel {\n\n  ...\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Tests are colocated in the ",(0,i.jsx)(n.code,{children:"src/"})," directory, so you could write them in files like the below:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Unit tests: ",(0,i.jsx)(n.code,{children:"libs/langchain-community/src/chat_models/tests/parrot_link.test.ts"})]}),"\n",(0,i.jsxs)(n.li,{children:["Integration tests: ",(0,i.jsx)(n.code,{children:"libs/langchain-community/src/chat_models/tests/parrot_link.int.test.ts"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Unit tests should not have any external API calls or require any environment variables."}),"\n",(0,i.jsx)(n.p,{children:"You should add documentation to:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"docs/core_docs/docs/integrations/chat/parrot_link.mdx"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"partner-package-in-langchain-repo",children:"Partner package in LangChain repo"}),"\n",(0,i.jsxs)(n.p,{children:["Partner packages can be hosted in the ",(0,i.jsx)(n.code,{children:"LangChain"})," monorepo."]}),"\n",(0,i.jsxs)(n.p,{children:["Partner packages in the ",(0,i.jsx)(n.code,{children:"LangChain"})," repo should be placed under ",(0,i.jsx)(n.code,{children:"libs/langchain-{partner}"})]}),"\n",(0,i.jsxs)(n.p,{children:["A package is\ninstalled by users with ",(0,i.jsx)(n.code,{children:"npm install @langchain/{partner}"}),", and the package members\ncan be imported with code like:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { X } from "@langchain/{partner}";\n'})}),"\n",(0,i.jsx)(n.h3,{id:"set-up-a-new-package",children:"Set up a new package"}),"\n",(0,i.jsxs)(n.p,{children:["To set up a new partner package, you can use ",(0,i.jsx)(n.a,{href:"https://github.com/langchain-ai/langchainjs/blob/main/libs/create-langchain-integration/",children:(0,i.jsx)(n.code,{children:"create-langchain-integration"})}),",\na utility that will automatically scaffold a repo with support for both ESM + CJS entrypoints. You can run it like this within the ",(0,i.jsx)(n.code,{children:"libs/"})," folder:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd libs/\nnpx create-langchain-integration\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Then, follow the prompts to name your package.\nThe default package will include stubs for a Chat Model, an LLM, and/or a Vector Store. You should delete any of the files you won't use and remove them from ",(0,i.jsx)(n.code,{children:"index.ts"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"dependencies",children:"Dependencies"}),"\n",(0,i.jsxs)(n.p,{children:["If your package needs dependencies, such as your company's SDK, you can add them to your package's ",(0,i.jsx)(n.code,{children:"package.json"})," file as normal:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install parrot-link-sdk\n"})}),"\n",(0,i.jsx)(n.h3,{id:"write-unit-and-integration-tests",children:"Write Unit and Integration Tests"}),"\n",(0,i.jsxs)(n.p,{children:["Some basic tests are presented in the ",(0,i.jsx)(n.code,{children:"src/tests/"})," directory. You should add more tests to cover your package's functionality."]}),"\n",(0,i.jsxs)(n.p,{children:["For information on running and implementing tests, see the ",(0,i.jsx)(n.a,{href:"/docs/contributing/testing/",children:"Testing guide"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"write-documentation",children:"Write documentation"}),"\n",(0,i.jsxs)(n.p,{children:["Documentation is generated from Jupyter notebooks or ",(0,i.jsx)(n.code,{children:".mdx"})," files in the ",(0,i.jsx)(n.code,{children:"docs/"})," directory. You should place the notebooks with examples\nto the relevant ",(0,i.jsx)(n.code,{children:"docs/core_docs/docs/integrations"})," directory in the monorepo root."]}),"\n",(0,i.jsx)(n.h3,{id:"if-necessary-deprecate-community-integration",children:"(If Necessary) Deprecate community integration"}),"\n",(0,i.jsxs)(n.p,{children:["Note: this is only necessary if you're migrating an existing community integration into\na partner package. If the component you're integrating is net-new to LangChain (i.e.\nnot already in the ",(0,i.jsx)(n.code,{children:"community"})," package), you can skip this step."]}),"\n",(0,i.jsxs)(n.p,{children:["Let's pretend we migrated our ",(0,i.jsx)(n.code,{children:"ChatParrotLink"})," chat model from the community package to\nthe partner package. We would need to deprecate the old model in the community package.\nWe can do this using a ",(0,i.jsx)(n.code,{children:"@deprecated"})," TSDoc comment."]}),"\n",(0,i.jsx)(n.p,{children:"Before our change, our chat model might look like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"class ChatParrotLink extends SimpleChatModel {\n  ...\n"})}),"\n",(0,i.jsx)(n.p,{children:"After our change, it would look like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"/** @deprecated Install and import from `@langchain/parrot-link` instead. */\nclass ChatParrotLink extends SimpleChatModel {\n  ...\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You should do this for ",(0,i.jsx)(n.em,{children:"each"})," component that you're migrating to the partner package."]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);
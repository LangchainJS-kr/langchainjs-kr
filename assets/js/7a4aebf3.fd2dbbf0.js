"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[438],{85640:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var r=t(74848),a=t(28453),s=t(27846);const o={sidebar_class_name:"hidden",title:'How to do "self-querying" retrieval'},i=void 0,l={id:"how_to/self_query",title:'How to do "self-querying" retrieval',description:"This guide assumes familiarity with the following concepts:",source:"@site/docs/how_to/self_query.mdx",sourceDirName:"how_to",slug:"/how_to/self_query",permalink:"/docs/how_to/self_query",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/how_to/self_query.mdx",tags:[],version:"current",frontMatter:{sidebar_class_name:"hidden",title:'How to do "self-querying" retrieval'},sidebar:"tutorialSidebar",previous:{title:"How to route execution within a chain",permalink:"/docs/how_to/routing"},next:{title:"How to chain runnables",permalink:"/docs/how_to/sequence"}},c={},u=[{value:"Get started",id:"get-started",level:2},{value:"Creating our self-querying retriever",id:"creating-our-self-querying-retriever",level:3},{value:"Testing it out",id:"testing-it-out",level:3},{value:"Next steps",id:"next-steps",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.admonition,{title:"Prerequisites",type:"info",children:[(0,r.jsx)(n.p,{children:"This guide assumes familiarity with the following concepts:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"../../docs/concepts#retrievers",children:"Retrievers"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"../../docs/concepts#vectorstores",children:"Vector stores"})}),"\n"]})]}),"\n",(0,r.jsx)(n.p,{children:"A self-querying retriever is one that, as the name suggests, has the\nability to query itself. Specifically, given any natural language query,\nthe retriever uses an LLM to write a structured query and then applies\nthat structured query to its underlying vector store. This allows the\nretriever to not only use the user-input query for semantic similarity\ncomparison with the contents of stored documents but to also extract\nfilters from the user query on the metadata of stored documents and to\nexecute those filters."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:t(61351).A+"",width:"4000",height:"1248"})}),"\n",(0,r.jsxs)(n.p,{children:["Head to ",(0,r.jsx)(n.a,{href:"../../docs/integrations/retrievers/self_query",children:"Integrations"}),"\nfor documentation on vector stores with built-in support for\nself-querying."]}),"\n",(0,r.jsx)(n.h2,{id:"get-started",children:"Get started"}),"\n",(0,r.jsx)(n.p,{children:"For demonstration purposes, we\u2019ll use an in-memory, unoptimized vector\nstore. You should swap it out for a supported production-ready vector\nstore when seriously building."}),"\n",(0,r.jsxs)(n.p,{children:["The self-query retriever requires you to have the\n",(0,r.jsx)(n.a,{href:"https://www.npmjs.com/package/peggy",children:(0,r.jsx)(n.code,{children:"peggy"})})," package installed as a\npeer dep, and we\u2019ll also use OpenAI for this example:"]}),"\n","\n",(0,r.jsx)(s.A,{children:(0,r.jsx)(n.p,{children:"peggy @langchain/openai"})}),"\n",(0,r.jsx)(n.p,{children:"We\u2019ve created a small demo set of documents that contain summaries of\nmovies:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import "peggy";\nimport { Document } from "@langchain/core/documents";\n\n/**\n * First, we create a bunch of documents. You can load your own documents here instead.\n * Each document has a pageContent and a metadata field. Make sure your metadata matches the AttributeInfo below.\n */\nconst docs = [\n  new Document({\n    pageContent:\n      "A bunch of scientists bring back dinosaurs and mayhem breaks loose",\n    metadata: {\n      year: 1993,\n      rating: 7.7,\n      genre: "science fiction",\n      length: 122,\n    },\n  }),\n  new Document({\n    pageContent:\n      "Leo DiCaprio gets lost in a dream within a dream within a dream within a ...",\n    metadata: {\n      year: 2010,\n      director: "Christopher Nolan",\n      rating: 8.2,\n      length: 148,\n    },\n  }),\n  new Document({\n    pageContent:\n      "A psychologist / detective gets lost in a series of dreams within dreams within dreams and Inception reused the idea",\n    metadata: { year: 2006, director: "Satoshi Kon", rating: 8.6 },\n  }),\n  new Document({\n    pageContent:\n      "A bunch of normal-sized women are supremely wholesome and some men pine after them",\n    metadata: {\n      year: 2019,\n      director: "Greta Gerwig",\n      rating: 8.3,\n      length: 135,\n    },\n  }),\n  new Document({\n    pageContent: "Toys come alive and have a blast doing so",\n    metadata: { year: 1995, genre: "animated", length: 77 },\n  }),\n  new Document({\n    pageContent: "Three men walk into the Zone, three men walk out of the Zone",\n    metadata: {\n      year: 1979,\n      director: "Andrei Tarkovsky",\n      genre: "science fiction",\n      rating: 9.9,\n    },\n  }),\n];\n'})}),"\n",(0,r.jsx)(n.h3,{id:"creating-our-self-querying-retriever",children:"Creating our self-querying retriever"}),"\n",(0,r.jsx)(n.p,{children:"Now we can instantiate our retriever. To do this we\u2019ll need to provide\nsome information upfront about the metadata fields that our documents\nsupport and a short description of the document contents."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { OpenAIEmbeddings, OpenAI } from "@langchain/openai";\nimport { FunctionalTranslator } from "@langchain/core/structured_query";\nimport { MemoryVectorStore } from "langchain/vectorstores/memory";\nimport { SelfQueryRetriever } from "langchain/retrievers/self_query";\nimport type { AttributeInfo } from "langchain/chains/query_constructor";\n\n/**\n * We define the attributes we want to be able to query on.\n * in this case, we want to be able to query on the genre, year, director, rating, and length of the movie.\n * We also provide a description of each attribute and the type of the attribute.\n * This is used to generate the query prompts.\n */\nconst attributeInfo: AttributeInfo[] = [\n  {\n    name: "genre",\n    description: "The genre of the movie",\n    type: "string or array of strings",\n  },\n  {\n    name: "year",\n    description: "The year the movie was released",\n    type: "number",\n  },\n  {\n    name: "director",\n    description: "The director of the movie",\n    type: "string",\n  },\n  {\n    name: "rating",\n    description: "The rating of the movie (1-10)",\n    type: "number",\n  },\n  {\n    name: "length",\n    description: "The length of the movie in minutes",\n    type: "number",\n  },\n];\n\n/**\n * Next, we instantiate a vector store. This is where we store the embeddings of the documents.\n * We also need to provide an embeddings object. This is used to embed the documents.\n */\nconst embeddings = new OpenAIEmbeddings();\nconst llm = new OpenAI();\nconst documentContents = "Brief summary of a movie";\nconst vectorStore = await MemoryVectorStore.fromDocuments(docs, embeddings);\nconst selfQueryRetriever = SelfQueryRetriever.fromLLM({\n  llm,\n  vectorStore,\n  documentContents,\n  attributeInfo,\n  /**\n   * We need to use a translator that translates the queries into a\n   * filter format that the vector store can understand. We provide a basic translator\n   * translator here, but you can create your own translator by extending BaseTranslator\n   * abstract class. Note that the vector store needs to support filtering on the metadata\n   * attributes you want to query on.\n   */\n  structuredQueryTranslator: new FunctionalTranslator(),\n});\n'})}),"\n",(0,r.jsx)(n.h3,{id:"testing-it-out",children:"Testing it out"}),"\n",(0,r.jsx)(n.p,{children:"And now we can actually try using our retriever!"}),"\n",(0,r.jsx)(n.p,{children:"We can ask questions like \u201cWhich movies are less than 90 minutes?\u201d or\n\u201cWhich movies are rated higher than 8.5?\u201d. We can also ask questions\nlike \u201cWhich movies are either comedy or drama and are less than 90\nminutes?\u201d. The translator within the retriever will automatically\nconvert these questions into vector store filters that can be used to\nretrieve documents."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'await selfQueryRetriever.invoke("Which movies are less than 90 minutes?");\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:'[\n  Document {\n    pageContent: "Toys come alive and have a blast doing so",\n    metadata: { year: 1995, genre: "animated", length: 77 }\n  }\n]\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'await selfQueryRetriever.invoke("Which movies are rated higher than 8.5?");\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:'[\n  Document {\n    pageContent: "A psychologist / detective gets lost in a series of dreams within dreams within dreams and Inception"... 16 more characters,\n    metadata: { year: 2006, director: "Satoshi Kon", rating: 8.6 }\n  },\n  Document {\n    pageContent: "Three men walk into the Zone, three men walk out of the Zone",\n    metadata: {\n      year: 1979,\n      director: "Andrei Tarkovsky",\n      genre: "science fiction",\n      rating: 9.9\n    }\n  }\n]\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'await selfQueryRetriever.invoke("Which movies are directed by Greta Gerwig?");\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:'[\n  Document {\n    pageContent: "A bunch of normal-sized women are supremely wholesome and some men pine after them",\n    metadata: { year: 2019, director: "Greta Gerwig", rating: 8.3, length: 135 }\n  }\n]\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'await selfQueryRetriever.invoke(\n  "Which movies are either comedy or drama and are less than 90 minutes?"\n);\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:'[\n  Document {\n    pageContent: "Toys come alive and have a blast doing so",\n    metadata: { year: 1995, genre: "animated", length: 77 }\n  }\n]\n'})}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,r.jsxs)(n.p,{children:["You\u2019ve now seen how to use the ",(0,r.jsx)(n.code,{children:"SelfQueryRetriever"})," to to generate\nvector store filters based on an original question."]}),"\n",(0,r.jsxs)(n.p,{children:["Next, you can check out the list of ",(0,r.jsx)(n.a,{href:"../../docs/integrations/retrievers/self_query/",children:"vector stores that currently\nsupport self-querying"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},19365:(e,n,t)=>{t.d(n,{A:()=>o});t(96540);var r=t(34164);const a={tabItem:"tabItem_Ymn6"};var s=t(74848);function o(e){let{children:n,hidden:t,className:o}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,r.A)(a.tabItem,o),hidden:t,children:n})}},11470:(e,n,t)=>{t.d(n,{A:()=>j});var r=t(96540),a=t(34164),s=t(23104),o=t(56347),i=t(205),l=t(57485),c=t(31682),u=t(89466);function d(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:a}}=e;return{value:n,label:t,attributes:r,default:a}}))}(t);return function(e){const n=(0,c.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:t}=e;const a=(0,o.W6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(s),(0,r.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(a.location.search);n.set(s,e),a.replace({...a.location,search:n.toString()})}),[s,a])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,s=h(e),[o,l]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:s}))),[c,d]=p({queryString:t,groupId:a}),[g,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,s]=(0,u.Dv)(t);return[a,(0,r.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:a}),y=(()=>{const e=c??g;return m({value:e,tabValues:s})?e:null})();(0,i.A)((()=>{y&&l(y)}),[y]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),f(e)}),[d,f,s]),tabValues:s}}var f=t(92303);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=t(74848);function b(e){let{className:n,block:t,selectedValue:r,selectValue:o,tabValues:i}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),u=e=>{const n=e.currentTarget,t=l.indexOf(n),a=i[t].value;a!==r&&(c(n),o(a))},d=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},n),children:i.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,v.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>l.push(e),onKeyDown:d,onClick:u,...s,className:(0,a.A)("tabs__item",y.tabItem,s?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function w(e){let{lazy:n,children:t,selectedValue:a}=e;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function x(e){const n=g(e);return(0,v.jsxs)("div",{className:(0,a.A)("tabs-container",y.tabList),children:[(0,v.jsx)(b,{...n,...e}),(0,v.jsx)(w,{...n,...e})]})}function j(e){const n=(0,f.A)();return(0,v.jsx)(x,{...e,children:d(e.children)},String(n))}},27846:(e,n,t)=>{t.d(n,{A:()=>i});t(96540);var r=t(11470),a=t(19365),s=t(21432),o=t(74848);function i(e){let{children:n}=e;return(0,o.jsxs)(r.A,{groupId:"npm2yarn",children:[(0,o.jsx)(a.A,{value:"npm",label:"npm",children:(0,o.jsxs)(s.A,{language:"bash",children:["npm i ",n]})}),(0,o.jsx)(a.A,{value:"yarn",label:"yarn",default:!0,children:(0,o.jsxs)(s.A,{language:"bash",children:["yarn add ",n]})}),(0,o.jsx)(a.A,{value:"pnpm",label:"pnpm",children:(0,o.jsxs)(s.A,{language:"bash",children:["pnpm add ",n]})})]})}},61351:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/self_querying-9250153d059cdb0585bc60dd8dd07909.jpeg"}}]);
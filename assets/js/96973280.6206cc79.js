"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5245,65],{65610:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>p});var o=t(74848),s=t(28453),r=t(78847);const a={sidebar_class_name:"node-only",keywords:["OpenSearchVectorStore"]},i="OpenSearch",c={id:"integrations/vectorstores/opensearch",title:"OpenSearch",description:"Only available on Node.js.",source:"@site/docs/integrations/vectorstores/opensearch.mdx",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/opensearch",permalink:"/docs/integrations/vectorstores/opensearch",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/vectorstores/opensearch.mdx",tags:[],version:"current",frontMatter:{sidebar_class_name:"node-only",keywords:["OpenSearchVectorStore"]},sidebar:"integrations",previous:{title:"Neon Postgres",permalink:"/docs/integrations/vectorstores/neon"},next:{title:"PGVector",permalink:"/docs/integrations/vectorstores/pgvector"}},l={},p=[{value:"Setup",id:"setup",level:2},...r.toc,{value:"Index docs",id:"index-docs",level:2},{value:"Query docs",id:"query-docs",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"opensearch",children:"OpenSearch"}),"\n",(0,o.jsx)(n.admonition,{title:"Compatibility",type:"tip",children:(0,o.jsx)(n.p,{children:"Only available on Node.js."})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://opensearch.org/",children:"OpenSearch"})," is a fork of ",(0,o.jsx)(n.a,{href:"https://www.elastic.co/elasticsearch/",children:"Elasticsearch"})," that is fully compatible with the Elasticsearch API. Read more about their support for Approximate Nearest Neighbors ",(0,o.jsx)(n.a,{href:"https://opensearch.org/docs/latest/search-plugins/knn/approximate-knn/",children:"here"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Langchain.js accepts ",(0,o.jsx)(n.a,{href:"https://opensearch.org/docs/latest/clients/javascript/index/",children:"@opensearch-project/opensearch"})," as the client for OpenSearch vectorstore."]}),"\n",(0,o.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n","\n",(0,o.jsx)(r.default,{}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install -S @langchain/openai @opensearch-project/opensearch\n"})}),"\n",(0,o.jsxs)(n.p,{children:["You'll also need to have an OpenSearch instance running. You can use the ",(0,o.jsx)(n.a,{href:"https://opensearch.org/docs/latest/opensearch/install/docker/",children:"official Docker image"})," to get started. You can also find an example docker-compose file ",(0,o.jsx)(n.a,{href:"https://github.com/langchain-ai/langchainjs/blob/main/examples/src/indexes/vector_stores/opensearch/docker-compose.yml",children:"here"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"index-docs",children:"Index docs"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'import { Client } from "@opensearch-project/opensearch";\nimport { Document } from "langchain/document";\nimport { OpenAIEmbeddings } from "@langchain/openai";\nimport { OpenSearchVectorStore } from "langchain/vectorstores/opensearch";\n\nconst client = new Client({\n  nodes: [process.env.OPENSEARCH_URL ?? "http://127.0.0.1:9200"],\n});\n\nconst docs = [\n  new Document({\n    metadata: { foo: "bar" },\n    pageContent: "opensearch is also a vector db",\n  }),\n  new Document({\n    metadata: { foo: "bar" },\n    pageContent: "the quick brown fox jumped over the lazy dog",\n  }),\n  new Document({\n    metadata: { baz: "qux" },\n    pageContent: "lorem ipsum dolor sit amet",\n  }),\n  new Document({\n    metadata: { baz: "qux" },\n    pageContent:\n      "OpenSearch is a scalable, flexible, and extensible open-source software suite for search, analytics, and observability applications",\n  }),\n];\n\nawait OpenSearchVectorStore.fromDocuments(docs, new OpenAIEmbeddings(), {\n  client,\n  indexName: process.env.OPENSEARCH_INDEX, // Will default to `documents`\n});\n'})}),"\n",(0,o.jsx)(n.h2,{id:"query-docs",children:"Query docs"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'import { Client } from "@opensearch-project/opensearch";\nimport { VectorDBQAChain } from "langchain/chains";\nimport { OpenAIEmbeddings } from "@langchain/openai";\nimport { OpenAI } from "@langchain/openai";\nimport { OpenSearchVectorStore } from "langchain/vectorstores/opensearch";\n\nconst client = new Client({\n  nodes: [process.env.OPENSEARCH_URL ?? "http://127.0.0.1:9200"],\n});\n\nconst vectorStore = new OpenSearchVectorStore(new OpenAIEmbeddings(), {\n  client,\n});\n\n/* Search the vector DB independently with meta filters */\nconst results = await vectorStore.similaritySearch("hello world", 1);\nconsole.log(JSON.stringify(results, null, 2));\n/* [\n    {\n      "pageContent": "Hello world",\n      "metadata": {\n        "id": 2\n      }\n    }\n  ] */\n\n/* Use as part of a chain (currently no metadata filters) */\nconst model = new OpenAI();\nconst chain = VectorDBQAChain.fromLLM(model, vectorStore, {\n  k: 1,\n  returnSourceDocuments: true,\n});\nconst response = await chain.call({ query: "What is opensearch?" });\n\nconsole.log(JSON.stringify(response, null, 2));\n/*\n  {\n    "text": " Opensearch is a collection of technologies that allow search engines to publish search results in a standard format, making it easier for users to search across multiple sites.",\n    "sourceDocuments": [\n      {\n        "pageContent": "What\'s this?",\n        "metadata": {\n          "id": 3\n        }\n      }\n    ]\n  }\n  */\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},78847:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var o=t(74848),s=t(28453);const r={},a=void 0,i={id:"mdx_components/integration_install_tooltip",title:"integration_install_tooltip",description:"See this section for general instructions on installing integration packages.",source:"@site/docs/mdx_components/integration_install_tooltip.mdx",sourceDirName:"mdx_components",slug:"/mdx_components/integration_install_tooltip",permalink:"/docs/mdx_components/integration_install_tooltip",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/mdx_components/integration_install_tooltip.mdx",tags:[],version:"current",frontMatter:{}},c={},l=[];function p(e){const n={a:"a",admonition:"admonition",p:"p",...(0,s.R)(),...e.components};return(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["See ",(0,o.jsx)(n.a,{href:"/docs/how_to/installation#installing-integration-packages",children:"this section for general instructions on installing integration packages"}),"."]})})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}}}]);
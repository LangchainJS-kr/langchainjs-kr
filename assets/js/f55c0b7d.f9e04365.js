(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5695],{66188:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>m,default:()=>S,frontMatter:()=>p,metadata:()=>g,toc:()=>h});var o=t(74848),s=t(28453),a=t(78847),r=t(64428),i=(t(65098),t(21755)),c=t.n(i),l=t(94276),d=t.n(l);const p={},m="PGVector",g={id:"integrations/vectorstores/pgvector",title:"PGVector",description:"To enable vector search in a generic PostgreSQL database, LangChain.js supports using the pgvector Postgres extension.",source:"@site/docs/integrations/vectorstores/pgvector.mdx",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/pgvector",permalink:"/docs/integrations/vectorstores/pgvector",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/vectorstores/pgvector.mdx",tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"OpenSearch",permalink:"/docs/integrations/vectorstores/opensearch"},next:{title:"Pinecone",permalink:"/docs/integrations/vectorstores/pinecone"}},u={},h=[{value:"Setup",id:"setup",level:2},{value:"Setup a <code>pgvector</code> self hosted instance with <code>docker-compose</code>",id:"setup-a-pgvector-self-hosted-instance-with-docker-compose",level:3},...a.toc,{value:"Usage",id:"usage",level:2},{value:"Advanced: reusing connections",id:"advanced-reusing-connections",level:3}];function v(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"pgvector",children:"PGVector"}),"\n",(0,o.jsxs)(n.p,{children:["To enable vector search in a generic PostgreSQL database, LangChain.js supports using the ",(0,o.jsx)(n.a,{href:"https://github.com/pgvector/pgvector",children:(0,o.jsx)(n.code,{children:"pgvector"})})," Postgres extension."]}),"\n",(0,o.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,o.jsxs)(n.p,{children:["To work with PGVector, you need to install the ",(0,o.jsx)(n.code,{children:"pg"})," package:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install pg\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"setup-a-pgvector-self-hosted-instance-with-docker-compose",children:["Setup a ",(0,o.jsx)(n.code,{children:"pgvector"})," self hosted instance with ",(0,o.jsx)(n.code,{children:"docker-compose"})]}),"\n","\n",(0,o.jsx)(a.default,{}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai @langchain/community\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"pgvector"})," provides a prebuilt Docker image that can be used to quickly setup a self-hosted Postgres instance.\nCreate a file below named ",(0,o.jsx)(n.code,{children:"docker-compose.yml"}),":"]}),"\n","\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yml",children:'# Run this command to start the database:\n# docker-compose up --build\nversion: "3"\nservices:\n  db:\n    hostname: 127.0.0.1\n    image: ankane/pgvector\n    ports:\n      - 5432:5432\n    restart: always\n    environment:\n      - POSTGRES_DB=api\n      - POSTGRES_USER=myuser\n      - POSTGRES_PASSWORD=ChangeMe\n    volumes:\n      - ./init.sql:/docker-entrypoint-initdb.d/init.sql\n'})}),"\n",(0,o.jsxs)(n.p,{children:["And then in the same directory, run ",(0,o.jsx)(n.code,{children:"docker compose up"})," to start the container."]}),"\n",(0,o.jsxs)(n.p,{children:["You can find more information on how to setup ",(0,o.jsx)(n.code,{children:"pgvector"})," in the ",(0,o.jsx)(n.a,{href:"https://github.com/pgvector/pgvector",children:"official repository"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(n.admonition,{title:"Security",type:"danger",children:(0,o.jsxs)(n.p,{children:["User-generated data such as usernames should not be used as input for table and column names.",(0,o.jsx)(n.br,{}),"\n",(0,o.jsx)(n.strong,{children:"This may lead to SQL Injection!"})]})}),"\n","\n",(0,o.jsxs)(n.p,{children:["One complete example of using ",(0,o.jsx)(n.code,{children:"PGVectorStore"})," is the following:"]}),"\n",(0,o.jsx)(r.A,{language:"typescript",children:c()}),"\n",(0,o.jsxs)(n.p,{children:["You can also specify a ",(0,o.jsx)(n.code,{children:"collectionTableName"})," and a ",(0,o.jsx)(n.code,{children:"collectionName"})," to partition vectors between multiple users or namespaces."]}),"\n",(0,o.jsx)(n.h3,{id:"advanced-reusing-connections",children:"Advanced: reusing connections"}),"\n",(0,o.jsxs)(n.p,{children:["You can reuse connections by creating a pool, then creating new ",(0,o.jsx)(n.code,{children:"PGVectorStore"})," instances directly via the constructor."]}),"\n",(0,o.jsxs)(n.p,{children:["Note that you should call ",(0,o.jsx)(n.code,{children:".initialize()"})," to set up your database at least once to set up your tables properly\nbefore using the constructor."]}),"\n","\n",(0,o.jsx)(r.A,{language:"typescript",children:d()})]})}function S(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(v,{...e})}):v(e)}},21755:e=>{e.exports={content:'import { OpenAIEmbeddings } from "@langchain/openai";\nimport {\n  DistanceStrategy,\n  PGVectorStore,\n} from "@langchain/community/vectorstores/pgvector";\nimport { PoolConfig } from "pg";\n\n// First, follow set-up instructions at\n// https://js.langchain.com/docs/modules/indexes/vector_stores/integrations/pgvector\n\nconst config = {\n  postgresConnectionOptions: {\n    type: "postgres",\n    host: "127.0.0.1",\n    port: 5433,\n    user: "myuser",\n    password: "ChangeMe",\n    database: "api",\n  } as PoolConfig,\n  tableName: "testlangchain",\n  columns: {\n    idColumnName: "id",\n    vectorColumnName: "vector",\n    contentColumnName: "content",\n    metadataColumnName: "metadata",\n  },\n  // supported distance strategies: cosine (default), innerProduct, or euclidean\n  distanceStrategy: "cosine" as DistanceStrategy,\n};\n\nconst pgvectorStore = await PGVectorStore.initialize(\n  new OpenAIEmbeddings(),\n  config\n);\n\nawait pgvectorStore.addDocuments([\n  { pageContent: "what\'s this", metadata: { a: 2 } },\n  { pageContent: "Cat drinks milk", metadata: { a: 1 } },\n]);\n\nconst results = await pgvectorStore.similaritySearch("water", 1);\n\nconsole.log(results);\n\n/*\n  [ Document { pageContent: \'Cat drinks milk\', metadata: { a: 1 } } ]\n*/\n\n// Filtering is supported\nconst results2 = await pgvectorStore.similaritySearch("water", 1, {\n  a: 2,\n});\n\nconsole.log(results2);\n\n/*\n  [ Document { pageContent: \'what\'s this\', metadata: { a: 2 } } ]\n*/\n\n// Filtering on multiple values using "in" is supported too\nconst results3 = await pgvectorStore.similaritySearch("water", 1, {\n  a: {\n    in: [2],\n  },\n});\n\nconsole.log(results3);\n\n/*\n  [ Document { pageContent: \'what\'s this\', metadata: { a: 2 } } ]\n*/\n\nawait pgvectorStore.delete({\n  filter: {\n    a: 1,\n  },\n});\n\nconst results4 = await pgvectorStore.similaritySearch("water", 1);\n\nconsole.log(results4);\n\n/*\n  [ Document { pageContent: \'what\'s this\', metadata: { a: 2 } } ]\n*/\n\nawait pgvectorStore.end();\n',imports:[{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"},{local:"DistanceStrategy",imported:"DistanceStrategy",source:"@langchain/community/vectorstores/pgvector"},{local:"PGVectorStore",imported:"PGVectorStore",source:"@langchain/community/vectorstores/pgvector"}]}},94276:e=>{e.exports={content:'import { OpenAIEmbeddings } from "@langchain/openai";\nimport { PGVectorStore } from "@langchain/community/vectorstores/pgvector";\nimport pg from "pg";\n\n// First, follow set-up instructions at\n// https://js.langchain.com/docs/modules/indexes/vector_stores/integrations/pgvector\n\nconst reusablePool = new pg.Pool({\n  host: "127.0.0.1",\n  port: 5433,\n  user: "myuser",\n  password: "ChangeMe",\n  database: "api",\n});\n\nconst originalConfig = {\n  pool: reusablePool,\n  tableName: "testlangchain",\n  collectionName: "sample",\n  collectionTableName: "collections",\n  columns: {\n    idColumnName: "id",\n    vectorColumnName: "vector",\n    contentColumnName: "content",\n    metadataColumnName: "metadata",\n  },\n};\n\n// Set up the DB.\n// Can skip this step if you\'ve already initialized the DB.\n// await PGVectorStore.initialize(new OpenAIEmbeddings(), originalConfig);\n\nconst pgvectorStore = new PGVectorStore(new OpenAIEmbeddings(), originalConfig);\n\nawait pgvectorStore.addDocuments([\n  { pageContent: "what\'s this", metadata: { a: 2 } },\n  { pageContent: "Cat drinks milk", metadata: { a: 1 } },\n]);\n\nconst results = await pgvectorStore.similaritySearch("water", 1);\n\nconsole.log(results);\n\n/*\n  [ Document { pageContent: \'Cat drinks milk\', metadata: { a: 1 } } ]\n*/\n\nconst pgvectorStore2 = new PGVectorStore(new OpenAIEmbeddings(), {\n  pool: reusablePool,\n  tableName: "testlangchain",\n  collectionTableName: "collections",\n  collectionName: "some_other_collection",\n  columns: {\n    idColumnName: "id",\n    vectorColumnName: "vector",\n    contentColumnName: "content",\n    metadataColumnName: "metadata",\n  },\n});\n\nconst results2 = await pgvectorStore2.similaritySearch("water", 1);\n\nconsole.log(results2);\n\n/*\n  []\n*/\n\nawait reusablePool.end();\n',imports:[{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"},{local:"PGVectorStore",imported:"PGVectorStore",source:"@langchain/community/vectorstores/pgvector"}]}},65098:e=>{e.exports={content:"export default {services:{db:{image:'pgvector/pgvector:pg16',ports:['5433:5432'],volumes:['./data:/var/lib/postgresql/data'],environment:['POSTGRES_PASSWORD=ChangeMe','POSTGRES_USER=myuser','POSTGRES_DB=api']}}};",imports:[]}}}]);
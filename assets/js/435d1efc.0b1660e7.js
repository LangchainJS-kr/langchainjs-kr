(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[360],{83023:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>u,default:()=>p,frontMatter:()=>d,metadata:()=>l,toc:()=>m});var a=t(74848),r=t(28453),s=t(78847),i=t(64428),o=t(23740),c=t.n(o);const d={},u="Supabase Hybrid Search",l={id:"integrations/retrievers/supabase-hybrid",title:"Supabase Hybrid Search",description:"Langchain supports hybrid search with a Supabase Postgres database. The hybrid search combines the postgres pgvector extension (similarity search) and Full-Text Search (keyword search) to retrieve documents. You can add documents via SupabaseVectorStore addDocuments function. SupabaseHybridKeyWordSearch accepts embedding, supabase client, number of results for similarity search, and number of results for keyword search as parameters. The getRelevantDocuments function produces a list of documents that has duplicates removed and is sorted by relevance score.",source:"@site/docs/integrations/retrievers/supabase-hybrid.mdx",sourceDirName:"integrations/retrievers",slug:"/integrations/retrievers/supabase-hybrid",permalink:"/docs/integrations/retrievers/supabase-hybrid",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/retrievers/supabase-hybrid.mdx",tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Weaviate Self Query Retriever",permalink:"/docs/integrations/retrievers/self_query/weaviate"},next:{title:"Tavily Search API",permalink:"/docs/integrations/retrievers/tavily"}},h={},m=[{value:"Setup",id:"setup",level:2},{value:"Install the library with",id:"install-the-library-with",level:3},{value:"Create a table and search functions in your database",id:"create-a-table-and-search-functions-in-your-database",level:3},{value:"Usage",id:"usage",level:2},...s.toc];function b(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"supabase-hybrid-search",children:"Supabase Hybrid Search"}),"\n",(0,a.jsxs)(n.p,{children:["Langchain supports hybrid search with a Supabase Postgres database. The hybrid search combines the postgres ",(0,a.jsx)(n.code,{children:"pgvector"})," extension (similarity search) and Full-Text Search (keyword search) to retrieve documents. You can add documents via SupabaseVectorStore ",(0,a.jsx)(n.code,{children:"addDocuments"})," function. SupabaseHybridKeyWordSearch accepts embedding, supabase client, number of results for similarity search, and number of results for keyword search as parameters. The ",(0,a.jsx)(n.code,{children:"getRelevantDocuments"})," function produces a list of documents that has duplicates removed and is sorted by relevance score."]}),"\n",(0,a.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,a.jsx)(n.h3,{id:"install-the-library-with",children:"Install the library with"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install -S @supabase/supabase-js\n"})}),"\n",(0,a.jsx)(n.h3,{id:"create-a-table-and-search-functions-in-your-database",children:"Create a table and search functions in your database"}),"\n",(0,a.jsx)(n.p,{children:"Run this in your database:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Enable the pgvector extension to work with embedding vectors\ncreate extension vector;\n\n-- Create a table to store your documents\ncreate table documents (\n  id bigserial primary key,\n  content text, -- corresponds to Document.pageContent\n  metadata jsonb, -- corresponds to Document.metadata\n  embedding vector(1536) -- 1536 works for OpenAI embeddings, change if needed\n);\n\n-- Create a function to similarity search for documents\ncreate function match_documents (\n  query_embedding vector(1536),\n  match_count int DEFAULT null,\n  filter jsonb DEFAULT '{}'\n) returns table (\n  id bigint,\n  content text,\n  metadata jsonb,\n  similarity float\n)\nlanguage plpgsql\nas $$\n#variable_conflict use_column\nbegin\n  return query\n  select\n    id,\n    content,\n    metadata,\n    1 - (documents.embedding <=> query_embedding) as similarity\n  from documents\n  where metadata @> filter\n  order by documents.embedding <=> query_embedding\n  limit match_count;\nend;\n$$;\n\n-- Create a function to keyword search for documents\ncreate function kw_match_documents(query_text text, match_count int)\nreturns table (id bigint, content text, metadata jsonb, similarity real)\nas $$\n\nbegin\nreturn query execute\nformat('select id, content, metadata, ts_rank(to_tsvector(content), plainto_tsquery($1)) as similarity\nfrom documents\nwhere to_tsvector(content) @@ plainto_tsquery($1)\norder by similarity desc\nlimit $2')\nusing query_text, match_count;\nend;\n$$ language plpgsql;\n"})}),"\n",(0,a.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n","\n",(0,a.jsx)(s.default,{}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai @langchain/community\n"})}),"\n","\n",(0,a.jsx)(i.A,{language:"typescript",children:c()})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(b,{...e})}):b(e)}},23740:e=>{e.exports={content:'import { OpenAIEmbeddings } from "@langchain/openai";\nimport { createClient } from "@supabase/supabase-js";\nimport { SupabaseHybridSearch } from "@langchain/community/retrievers/supabase";\n\nexport const run = async () => {\n  const client = createClient(\n    process.env.SUPABASE_URL || "",\n    process.env.SUPABASE_PRIVATE_KEY || ""\n  );\n\n  const embeddings = new OpenAIEmbeddings();\n\n  const retriever = new SupabaseHybridSearch(embeddings, {\n    client,\n    //  Below are the defaults, expecting that you set up your supabase table and functions according to the guide above. Please change if necessary.\n    similarityK: 2,\n    keywordK: 2,\n    tableName: "documents",\n    similarityQueryName: "match_documents",\n    keywordQueryName: "kw_match_documents",\n  });\n\n  const results = await retriever.invoke("hello bye");\n\n  console.log(results);\n};\n',imports:[{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"},{local:"SupabaseHybridSearch",imported:"SupabaseHybridSearch",source:"@langchain/community/retrievers/supabase"}]}}}]);
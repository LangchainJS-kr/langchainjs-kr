"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9473],{71976:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var s=t(74848),a=t(28453);const o={sidebar_class_name:"hidden",title:"How to stream from a question-answering chain"},i=void 0,r={id:"how_to/qa_streaming",title:"How to stream from a question-answering chain",description:"This guide assumes familiarity with the following:",source:"@site/docs/how_to/qa_streaming.mdx",sourceDirName:"how_to",slug:"/how_to/qa_streaming",permalink:"/docs/how_to/qa_streaming",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/how_to/qa_streaming.mdx",tags:[],version:"current",frontMatter:{sidebar_class_name:"hidden",title:"How to stream from a question-answering chain"},sidebar:"tutorialSidebar",previous:{title:"How to return sources",permalink:"/docs/how_to/qa_sources"},next:{title:"How to construct filters",permalink:"/docs/how_to/query_constructing_filters"}},c={},l=[{value:"Setup",id:"setup",level:2},{value:"Dependencies",id:"dependencies",level:3},{value:"LangSmith",id:"langsmith",level:3},{value:"Chain with sources",id:"chain-with-sources",level:2},{value:"Streaming final outputs",id:"streaming-final-outputs",level:2},{value:"Next steps",id:"next-steps",level:2}];function h(n){const e={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.admonition,{title:"Prerequisites",type:"info",children:[(0,s.jsx)(e.p,{children:"This guide assumes familiarity with the following:"}),(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"../../docs/tutorials/rag/",children:"Retrieval-augmented generation"})}),"\n"]})]}),"\n",(0,s.jsx)(e.p,{children:"Often in Q&A applications it\u2019s important to show users the sources that\nwere used to generate the answer. The simplest way to do this is for the\nchain to return the Documents that were retrieved in each generation."}),"\n",(0,s.jsxs)(e.p,{children:["We\u2019ll be using the ",(0,s.jsx)(e.a,{href:"https://lilianweng.github.io/posts/2023-06-23-agent/",children:"LLM Powered Autonomous\nAgents"})," blog post\nby Lilian Weng for retrieval content this notebook."]}),"\n",(0,s.jsx)(e.h2,{id:"setup",children:"Setup"}),"\n",(0,s.jsx)(e.h3,{id:"dependencies",children:"Dependencies"}),"\n",(0,s.jsxs)(e.p,{children:["We\u2019ll use an OpenAI chat model and embeddings and a Memory vector store\nin this walkthrough, but everything shown here works with any\n",(0,s.jsx)(e.a,{href:"../../docs/concepts/#chat-models",children:"ChatModel"})," or\n",(0,s.jsx)(e.a,{href:"../../docs/concepts#llms",children:"LLM"}),",\n",(0,s.jsx)(e.a,{href:"../../docs/concepts#embedding-models",children:"Embeddings"}),", and\n",(0,s.jsx)(e.a,{href:"../../docs/concepts#vectorstores",children:"VectorStore"})," or\n",(0,s.jsx)(e.a,{href:"../../docs/concepts#retrievers",children:"Retriever"}),"."]}),"\n",(0,s.jsx)(e.p,{children:"We\u2019ll use the following packages:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"npm install --save langchain @langchain/openai cheerio\n"})}),"\n",(0,s.jsxs)(e.p,{children:["We need to set environment variable ",(0,s.jsx)(e.code,{children:"OPENAI_API_KEY"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"export OPENAI_API_KEY=YOUR_KEY\n"})}),"\n",(0,s.jsx)(e.h3,{id:"langsmith",children:"LangSmith"}),"\n",(0,s.jsxs)(e.p,{children:["Many of the applications you build with LangChain will contain multiple\nsteps with multiple invocations of LLM calls. As these applications get\nmore and more complex, it becomes crucial to be able to inspect what\nexactly is going on inside your chain or agent. The best way to do this\nis with ",(0,s.jsx)(e.a,{href:"https://smith.langchain.com/",children:"LangSmith"}),"."]}),"\n",(0,s.jsx)(e.p,{children:"Note that LangSmith is not needed, but it is helpful. If you do want to\nuse LangSmith, after you sign up at the link above, make sure to set\nyour environment variables to start logging traces:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"export LANGCHAIN_TRACING_V2=true\nexport LANGCHAIN_API_KEY=YOUR_KEY\n"})}),"\n",(0,s.jsx)(e.h2,{id:"chain-with-sources",children:"Chain with sources"}),"\n",(0,s.jsxs)(e.p,{children:["Here is Q&A app with sources we built over the ",(0,s.jsx)(e.a,{href:"https://lilianweng.github.io/posts/2023-06-23-agent/",children:"LLM Powered Autonomous\nAgents"})," blog post\nby Lilian Weng in the ",(0,s.jsx)(e.a,{href:"../../docs/how_to/qa_sources/",children:"Returning sources"}),"\nguide:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:'import "cheerio";\nimport { CheerioWebBaseLoader } from "langchain/document_loaders/web/cheerio";\nimport { RecursiveCharacterTextSplitter } from "langchain/text_splitter";\nimport { MemoryVectorStore } from "langchain/vectorstores/memory";\nimport { OpenAIEmbeddings, ChatOpenAI } from "@langchain/openai";\nimport { pull } from "langchain/hub";\nimport { ChatPromptTemplate } from "@langchain/core/prompts";\nimport { formatDocumentsAsString } from "langchain/util/document";\nimport {\n  RunnableSequence,\n  RunnablePassthrough,\n  RunnableMap,\n} from "@langchain/core/runnables";\nimport { StringOutputParser } from "@langchain/core/output_parsers";\n\nconst loader = new CheerioWebBaseLoader(\n  "https://lilianweng.github.io/posts/2023-06-23-agent/"\n);\n\nconst docs = await loader.load();\n\nconst textSplitter = new RecursiveCharacterTextSplitter({\n  chunkSize: 1000,\n  chunkOverlap: 200,\n});\nconst splits = await textSplitter.splitDocuments(docs);\nconst vectorStore = await MemoryVectorStore.fromDocuments(\n  splits,\n  new OpenAIEmbeddings()\n);\n\n// Retrieve and generate using the relevant snippets of the blog.\nconst retriever = vectorStore.asRetriever();\nconst prompt = await pull<ChatPromptTemplate>("rlm/rag-prompt");\nconst llm = new ChatOpenAI({ model: "gpt-3.5-turbo", temperature: 0 });\n\nconst ragChainFromDocs = RunnableSequence.from([\n  RunnablePassthrough.assign({\n    context: (input) => formatDocumentsAsString(input.context),\n  }),\n  prompt,\n  llm,\n  new StringOutputParser(),\n]);\n\nlet ragChainWithSource = new RunnableMap({\n  steps: { context: retriever, question: new RunnablePassthrough() },\n});\nragChainWithSource = ragChainWithSource.assign({ answer: ragChainFromDocs });\n\nawait ragChainWithSource.invoke("What is Task Decomposition");\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-text",children:'{\n  question: "What is Task Decomposition",\n  context: [\n    Document {\n      pageContent: "Fig. 1. Overview of a LLM-powered autonomous agent system.\\n" +\n        "Component One: Planning#\\n" +\n        "A complicated ta"... 898 more characters,\n      metadata: {\n        source: "https://lilianweng.github.io/posts/2023-06-23-agent/",\n        loc: { lines: [Object] }\n      }\n    },\n    Document {\n      pageContent: \'Task decomposition can be done (1) by LLM with simple prompting like "Steps for XYZ.\\\\n1.", "What are\'... 887 more characters,\n      metadata: {\n        source: "https://lilianweng.github.io/posts/2023-06-23-agent/",\n        loc: { lines: [Object] }\n      }\n    },\n    Document {\n      pageContent: "Agent System Overview\\n" +\n        "                \\n" +\n        "                    Component One: Planning\\n" +\n        "                 "... 850 more characters,\n      metadata: {\n        source: "https://lilianweng.github.io/posts/2023-06-23-agent/",\n        loc: { lines: [Object] }\n      }\n    },\n    Document {\n      pageContent: "Resources:\\n" +\n        "1. Internet access for searches and information gathering.\\n" +\n        "2. Long Term memory management"... 456 more characters,\n      metadata: {\n        source: "https://lilianweng.github.io/posts/2023-06-23-agent/",\n        loc: { lines: [Object] }\n      }\n    }\n  ],\n  answer: "Task decomposition is a technique used to break down complex tasks into smaller and simpler steps fo"... 230 more characters\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:["Let\u2019s see what this prompt actually looks like. You can also view it ",(0,s.jsx)(e.a,{href:"https://smith.langchain.com/hub/rlm/rag-prompt",children:"in\nthe LangChain prompt\nhub"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:'console.log(prompt.promptMessages.map((msg) => msg.prompt.template).join("\\n"));\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-text",children:"You are an assistant for question-answering tasks. Use the following pieces of retrieved context to answer the question. If you don't know the answer, just say that you don't know. Use three sentences maximum and keep the answer concise.\nQuestion: {question}\nContext: {context}\nAnswer:\n"})}),"\n",(0,s.jsx)(e.h2,{id:"streaming-final-outputs",children:"Streaming final outputs"}),"\n",(0,s.jsxs)(e.p,{children:["With ",(0,s.jsx)(e.a,{href:"../../docs/concepts#langchain-expression-language",children:"LCEL"}),", we can\nstream outputs as they are generated:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:'for await (const chunk of await ragChainWithSource.stream(\n  "What is task decomposition?"\n)) {\n  console.log(chunk);\n}\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-text",children:'{ question: "What is task decomposition?" }\n{\n  context: [\n    Document {\n      pageContent: "Fig. 1. Overview of a LLM-powered autonomous agent system.\\n" +\n        "Component One: Planning#\\n" +\n        "A complicated ta"... 898 more characters,\n      metadata: {\n        source: "https://lilianweng.github.io/posts/2023-06-23-agent/",\n        loc: { lines: [Object] }\n      }\n    },\n    Document {\n      pageContent: \'Task decomposition can be done (1) by LLM with simple prompting like "Steps for XYZ.\\\\n1.", "What are\'... 887 more characters,\n      metadata: {\n        source: "https://lilianweng.github.io/posts/2023-06-23-agent/",\n        loc: { lines: [Object] }\n      }\n    },\n    Document {\n      pageContent: "Agent System Overview\\n" +\n        "                \\n" +\n        "                    Component One: Planning\\n" +\n        "                 "... 850 more characters,\n      metadata: {\n        source: "https://lilianweng.github.io/posts/2023-06-23-agent/",\n        loc: { lines: [Object] }\n      }\n    },\n    Document {\n      pageContent: "(3) Task execution: Expert models execute on the specific tasks and log results.\\n" +\n        "Instruction:\\n" +\n        "\\n" +\n        "With "... 539 more characters,\n      metadata: {\n        source: "https://lilianweng.github.io/posts/2023-06-23-agent/",\n        loc: { lines: [Object] }\n      }\n    }\n  ]\n}\n{ answer: "" }\n{ answer: "Task" }\n{ answer: " decomposition" }\n{ answer: " is" }\n{ answer: " a" }\n{ answer: " technique" }\n{ answer: " used" }\n{ answer: " to" }\n{ answer: " break" }\n{ answer: " down" }\n{ answer: " complex" }\n{ answer: " tasks" }\n{ answer: " into" }\n{ answer: " smaller" }\n{ answer: " and" }\n{ answer: " simpler" }\n{ answer: " steps" }\n{ answer: "." }\n{ answer: " It" }\n{ answer: " can" }\n{ answer: " be" }\n{ answer: " done" }\n{ answer: " through" }\n{ answer: " various" }\n{ answer: " methods" }\n{ answer: " such" }\n{ answer: " as" }\n{ answer: " using" }\n{ answer: " prompting" }\n{ answer: " techniques" }\n{ answer: "," }\n{ answer: " task" }\n{ answer: "-specific" }\n{ answer: " instructions" }\n{ answer: "," }\n{ answer: " or" }\n{ answer: " human" }\n{ answer: " inputs" }\n{ answer: "." }\n{ answer: " Another" }\n{ answer: " approach" }\n{ answer: " involves" }\n{ answer: " outsourcing" }\n{ answer: " the" }\n{ answer: " planning" }\n{ answer: " step" }\n{ answer: " to" }\n{ answer: " an" }\n{ answer: " external" }\n{ answer: " classical" }\n{ answer: " planner" }\n{ answer: "." }\n{ answer: "" }\n'})}),"\n",(0,s.jsx)(e.p,{children:"We can add some logic to compile our stream as it\u2019s being returned:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:'const output = {};\nlet currentKey: string | null = null;\n\nfor await (const chunk of await ragChainWithSource.stream(\n  "What is task decomposition?"\n)) {\n  for (const key of Object.keys(chunk)) {\n    if (output[key] === undefined) {\n      output[key] = chunk[key];\n    } else {\n      output[key] += chunk[key];\n    }\n\n    if (key !== currentKey) {\n      console.log(`\\n\\n${key}: ${JSON.stringify(chunk[key])}`);\n    } else {\n      console.log(chunk[key]);\n    }\n    currentKey = key;\n  }\n}\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-text",children:'\n\nquestion: "What is task decomposition?"\n\n\ncontext: [{"pageContent":"Fig. 1. Overview of a LLM-powered autonomous agent system.\\nComponent One: Planning#\\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.\\nTask Decomposition#\\nChain of thought (CoT; Wei et al. 2022) has become a standard prompting technique for enhancing model performance on complex tasks. The model is instructed to \u201cthink step by step\u201d to utilize more test-time computation to decompose hard tasks into smaller and simpler steps. CoT transforms big tasks into multiple manageable tasks and shed lights into an interpretation of the model\u2019s thinking process.\\nTree of Thoughts (Yao et al. 2023) extends CoT by exploring multiple reasoning possibilities at each step. It first decomposes the problem into multiple thought steps and generates multiple thoughts per step, creating a tree structure. The search process can be BFS (breadth-first search) or DFS (depth-first search) with each state evaluated by a classifier (via a prompt) or majority vote.","metadata":{"source":"https://lilianweng.github.io/posts/2023-06-23-agent/","loc":{"lines":{"from":176,"to":181}}}},{"pageContent":"Task decomposition can be done (1) by LLM with simple prompting like \\"Steps for XYZ.\\\\n1.\\", \\"What are the subgoals for achieving XYZ?\\", (2) by using task-specific instructions; e.g. \\"Write a story outline.\\" for writing a novel, or (3) with human inputs.\\nAnother quite distinct approach, LLM+P (Liu et al. 2023), involves relying on an external classical planner to do long-horizon planning. This approach utilizes the Planning Domain Definition Language (PDDL) as an intermediate interface to describe the planning problem. In this process, LLM (1) translates the problem into \u201cProblem PDDL\u201d, then (2) requests a classical planner to generate a PDDL plan based on an existing \u201cDomain PDDL\u201d, and finally (3) translates the PDDL plan back into natural language. Essentially, the planning step is outsourced to an external tool, assuming the availability of domain-specific PDDL and a suitable planner which is common in certain robotic setups but not in many other domains.\\nSelf-Reflection#","metadata":{"source":"https://lilianweng.github.io/posts/2023-06-23-agent/","loc":{"lines":{"from":182,"to":184}}}},{"pageContent":"Agent System Overview\\n                \\n                    Component One: Planning\\n                        \\n                \\n                    Task Decomposition\\n                \\n                    Self-Reflection\\n                \\n                \\n                    Component Two: Memory\\n                        \\n                \\n                    Types of Memory\\n                \\n                    Maximum Inner Product Search (MIPS)\\n                \\n                \\n                    Component Three: Tool Use\\n                \\n                    Case Studies\\n                        \\n                \\n                    Scientific Discovery Agent\\n                \\n                    Generative Agents Simulation\\n                \\n                    Proof-of-Concept Examples\\n                \\n                \\n                    Challenges\\n                \\n                    Citation\\n                \\n                    References","metadata":{"source":"https://lilianweng.github.io/posts/2023-06-23-agent/","loc":{"lines":{"from":112,"to":146}}}},{"pageContent":"(3) Task execution: Expert models execute on the specific tasks and log results.\\nInstruction:\\n\\nWith the input and the inference results, the AI assistant needs to describe the process and results. The previous stages can be formed as - User Input: {{ User Input }}, Task Planning: {{ Tasks }}, Model Selection: {{ Model Assignment }}, Task Execution: {{ Predictions }}. You must first answer the user\'s request in a straightforward manner. Then describe the task process and show your analysis and model inference results to the user in the first person. If inference results contain a file path, must tell the user the complete file path.","metadata":{"source":"https://lilianweng.github.io/posts/2023-06-23-agent/","loc":{"lines":{"from":277,"to":280}}}}]\n\n\nanswer: ""\nTask\n decomposition\n is\n a\n technique\n used\n to\n break\n down\n complex\n tasks\n into\n smaller\n and\n simpler\n steps\n.\n It\n can\n be\n done\n through\n various\n methods\n such\n as\n using\n prompting\n techniques\n,\n task\n-specific\n instructions\n,\n or\n human\n inputs\n.\n Another\n approach\n involves\n outsourcing\n the\n planning\n step\n to\n an\n external\n classical\n planner\n.\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-text",children:'"answer"\n'})}),"\n",(0,s.jsx)(e.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,s.jsx)(e.p,{children:"You\u2019ve now learned how to stream responses from a QA chain."}),"\n",(0,s.jsxs)(e.p,{children:["Next, check out some of the other how-to guides around RAG, such as ",(0,s.jsx)(e.a,{href:"../../docs/how_to/qa_chat_history_how_to",children:"how\nto add chat history"}),"."]})]})}function p(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(h,{...n})}):h(n)}}}]);
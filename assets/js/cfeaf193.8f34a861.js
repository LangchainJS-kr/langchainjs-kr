(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8573],{55874:(e,n,s)=>{"use strict";s.r(n),s.d(n,{assets:()=>p,contentTitle:()=>h,default:()=>f,frontMatter:()=>m,metadata:()=>u,toc:()=>y});var t=s(74848),o=s(28453),r=s(64428),i=s(78847),a=s(34783),c=s.n(a),l=s(16392),d=s.n(l);const m={hide_table_of_contents:!0},h="Firestore Chat Memory",u={id:"integrations/chat_memory/firestore",title:"Firestore Chat Memory",description:"For longer-term persistence across chat sessions, you can swap out the default in-memory chatHistory that backs chat memory classes like BufferMemory for a firestore.",source:"@site/docs/integrations/chat_memory/firestore.mdx",sourceDirName:"integrations/chat_memory",slug:"/integrations/chat_memory/firestore",permalink:"/docs/integrations/chat_memory/firestore",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/chat_memory/firestore.mdx",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0}},p={},y=[{value:"Setup",id:"setup",level:2},...i.toc,{value:"Usage",id:"usage",level:2},{value:"Nested Collections",id:"nested-collections",level:3},{value:"Firestore Rules",id:"firestore-rules",level:2}];function g(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"firestore-chat-memory",children:"Firestore Chat Memory"}),"\n",(0,t.jsxs)(n.p,{children:["For longer-term persistence across chat sessions, you can swap out the default in-memory ",(0,t.jsx)(n.code,{children:"chatHistory"})," that backs chat memory classes like ",(0,t.jsx)(n.code,{children:"BufferMemory"})," for a firestore."]}),"\n",(0,t.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,t.jsx)(n.p,{children:"First, install the Firebase admin package in your project:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install firebase-admin\n"})}),"\n","\n",(0,t.jsx)(i.default,{}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai @langchain/community\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Visit the ",(0,t.jsx)(n.code,{children:"Project Settings"})," page from your Firebase project and select the ",(0,t.jsx)(n.code,{children:"Service accounts"})," tab."]}),"\n",(0,t.jsxs)(n.p,{children:["Inside the ",(0,t.jsx)(n.code,{children:"Service accounts"})," tab, click the ",(0,t.jsx)(n.code,{children:"Generate new private key"})," button inside the ",(0,t.jsx)(n.code,{children:"Firebase Admin SDK"})," section to download a JSON file containing your service account's credentials."]}),"\n",(0,t.jsxs)(n.p,{children:["Using the downloaded JSON file, pass in the ",(0,t.jsx)(n.code,{children:"projectId"}),", ",(0,t.jsx)(n.code,{children:"privateKey"}),", and ",(0,t.jsx)(n.code,{children:"clientEmail"})," to the ",(0,t.jsx)(n.code,{children:"config"})," object of the ",(0,t.jsx)(n.code,{children:"FirestoreChatMessageHistory"})," class, like shown below:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { FirestoreChatMessageHistory } from "@langchain/community/stores/message/firestore";\nimport admin from "firebase-admin";\n\nconst messageHistory = new FirestoreChatMessageHistory({\n  collections: ["chats"],\n  docs: ["user-id"],\n  sessionId: "user-id",\n  userId: "a@example.com",\n  config: {\n    projectId: "YOUR-PROJECT-ID",\n    credential: admin.credential.cert({\n      projectId: "YOUR-PROJECT-ID",\n      privateKey:\n        "-----BEGIN PRIVATE KEY-----\\nCHANGE-ME\\n-----END PRIVATE KEY-----\\n",\n      clientEmail: "CHANGE-ME@CHANGE-ME-TOO.iam.gserviceaccount.com",\n    }),\n  },\n});\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Here, the ",(0,t.jsx)(n.code,{children:"collections"})," field should match the names and ordering of the ",(0,t.jsx)(n.code,{children:"collections"})," in your database.\nThe same goes for ",(0,t.jsx)(n.code,{children:"docs"}),", it should match the names and ordering of the ",(0,t.jsx)(n.code,{children:"docs"})," in your database."]}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n","\n",(0,t.jsx)(r.A,{language:"typescript",children:c()}),"\n",(0,t.jsx)(n.h3,{id:"nested-collections",children:"Nested Collections"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"FirestoreChatMessageHistory"})," class supports nested collections, and dynamic collection/doc names."]}),"\n",(0,t.jsx)(n.p,{children:"The example below shows how to add and retrieve messages from a database with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"/chats/{chat-id}/bots/{bot-id}/messages/{message-id}\n"})}),"\n","\n",(0,t.jsx)(r.A,{language:"typescript",children:d()}),"\n",(0,t.jsx)(n.h2,{id:"firestore-rules",children:"Firestore Rules"}),"\n",(0,t.jsx)(n.p,{children:'If your collection name is "chathistory," you can configure Firestore rules as follows.'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"      match /chathistory/{sessionId} {\n       allow read: if request.auth.uid == resource.data.createdBy;\n       allow write: if request.auth.uid == request.resource.data.createdBy;\n\t\t\t }\n\t\t\t match /chathistory/{sessionId}/messages/{messageId} {\n       allow read: if request.auth.uid == resource.data.createdBy;\n       allow write: if request.auth.uid == request.resource.data.createdBy;\n\t\t    }\n"})})]})}function f(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(g,{...e})}):g(e)}},34783:e=>{e.exports={content:'import { BufferMemory } from "langchain/memory/index";\nimport { FirestoreChatMessageHistory } from "@langchain/community/stores/message/firestore";\nimport { ChatOpenAI } from "@langchain/openai";\nimport { ConversationChain } from "langchain/chains";\nimport admin from "firebase-admin";\n\nconst memory = new BufferMemory({\n  chatHistory: new FirestoreChatMessageHistory({\n    collections: ["langchain"],\n    docs: ["lc-example"],\n    sessionId: "lc-example-id",\n    userId: "a@example.com",\n    config: {\n      projectId: "YOUR-PROJECT-ID",\n      credential: admin.credential.cert({\n        projectId: "YOUR-PROJECT-ID",\n        privateKey:\n          "-----BEGIN PRIVATE KEY-----\\nnCHANGE-ME\\n-----END PRIVATE KEY-----\\n",\n        clientEmail: "CHANGE-ME@CHANGE-ME-TOO.iam.gserviceaccount.com",\n      }),\n    },\n  }),\n});\n\nconst model = new ChatOpenAI();\nconst chain = new ConversationChain({ llm: model, memory });\n\nconst res1 = await chain.invoke({ input: "Hi! I\'m Jim." });\nconsole.log({ res1 });\n/*\n{ res1: { text: "Hello Jim! It\'s nice to meet you. My name is AI. How may I assist you today?" } }\n*/\n\nconst res2 = await chain.invoke({ input: "What did I just say my name was?" });\nconsole.log({ res2 });\n\n/*\n{ res1: { text: "You said your name was Jim." } }\n*/\n',imports:[{local:"BufferMemory",imported:"BufferMemory",source:"langchain/memory/index"},{local:"FirestoreChatMessageHistory",imported:"FirestoreChatMessageHistory",source:"@langchain/community/stores/message/firestore"},{local:"ChatOpenAI",imported:"ChatOpenAI",source:"@langchain/openai"},{local:"ConversationChain",imported:"ConversationChain",source:"langchain/chains"}]}},16392:e=>{e.exports={content:'import { BufferMemory } from "langchain/memory/index";\nimport { FirestoreChatMessageHistory } from "@langchain/community/stores/message/firestore";\nimport { ChatOpenAI } from "@langchain/openai";\nimport { ConversationChain } from "langchain/chains";\nimport admin from "firebase-admin";\n\nconst memory = new BufferMemory({\n  chatHistory: new FirestoreChatMessageHistory({\n    collections: ["chats", "bots"],\n    docs: ["chat-id", "bot-id"],\n    sessionId: "user-id",\n    userId: "a@example.com",\n    config: {\n      projectId: "YOUR-PROJECT-ID",\n      credential: admin.credential.cert({\n        projectId: "YOUR-PROJECT-ID",\n        privateKey:\n          "-----BEGIN PRIVATE KEY-----\\nnCHANGE-ME\\n-----END PRIVATE KEY-----\\n",\n        clientEmail: "CHANGE-ME@CHANGE-ME-TOO.iam.gserviceaccount.com",\n      }),\n    },\n  }),\n});\n\nconst model = new ChatOpenAI();\nconst chain = new ConversationChain({ llm: model, memory });\n\nconst res1 = await chain.invoke({ input: "Hi! I\'m Jim." });\nconsole.log({ res1 });\n/*\n{ res1: { response: \'Hello Jim! How can I assist you today?\' } }\n*/\n\nconst res2 = await chain.invoke({ input: "What did I just say my name was?" });\nconsole.log({ res2 });\n\n/*\n{ res2: { response: \'You just said that your name is Jim.\' } }\n*/\n',imports:[{local:"BufferMemory",imported:"BufferMemory",source:"langchain/memory/index"},{local:"FirestoreChatMessageHistory",imported:"FirestoreChatMessageHistory",source:"@langchain/community/stores/message/firestore"},{local:"ChatOpenAI",imported:"ChatOpenAI",source:"@langchain/openai"},{local:"ConversationChain",imported:"ConversationChain",source:"langchain/chains"}]}}}]);
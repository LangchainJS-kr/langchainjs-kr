"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4824],{8900:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>h});var a=t(74848),r=t(28453),s=t(78847),o=t(27846);const i={sidebar_class_name:"hidden",keywords:["RunnableLambda","LCEL"],title:"How to run custom functions"},l=void 0,c={id:"how_to/functions",title:"How to run custom functions",description:"This guide assumes familiarity with the following concepts:",source:"@site/docs/how_to/functions.mdx",sourceDirName:"how_to",slug:"/how_to/functions",permalink:"/docs/how_to/functions",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/how_to/functions.mdx",tags:[],version:"current",frontMatter:{sidebar_class_name:"hidden",keywords:["RunnableLambda","LCEL"],title:"How to run custom functions"},sidebar:"tutorialSidebar",previous:{title:"Few Shot Prompt Templates",permalink:"/docs/how_to/few_shot"},next:{title:"How to construct knowledge graphs",permalink:"/docs/how_to/graph_constructing"}},u={},h=[{value:"Using the constructor",id:"using-the-constructor",level:2},...s.toc,{value:"Automatic coercion in chains",id:"automatic-coercion-in-chains",level:2},{value:"Passing run metadata",id:"passing-run-metadata",level:2},{value:"Next steps",id:"next-steps",level:2}];function d(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(e.admonition,{title:"Prerequisites",type:"info",children:[(0,a.jsx)(e.p,{children:"This guide assumes familiarity with the following concepts:"}),(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"../../docs/concepts/#langchain-expression-language",children:"LangChain Expression Language\n(LCEL)"})}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"../../docs/how_to/sequence/",children:"Chaining runnables"})}),"\n"]})]}),"\n",(0,a.jsxs)(e.p,{children:["You can use arbitrary functions as\n",(0,a.jsx)(e.a,{href:"https://v02.api.js.langchain.com/classes/langchain_core_runnables.Runnable.html",children:"Runnables"}),".\nThis is useful for formatting or when you need functionality not\nprovided by other LangChain components, and custom functions used as\nRunnables are called\n",(0,a.jsx)(e.a,{href:"https://v02.api.js.langchain.com/classes/langchain_core_runnables.RunnableLambda.html",children:(0,a.jsx)(e.code,{children:"RunnableLambdas"})}),"."]}),"\n",(0,a.jsx)(e.p,{children:"Note that all inputs to these functions need to be a SINGLE argument. If\nyou have a function that accepts multiple arguments, you should write a\nwrapper that accepts a single dict input and unpacks it into multiple\nargument."}),"\n",(0,a.jsx)(e.p,{children:"This guide will cover:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["How to explicitly create a runnable from a custom function using the\n",(0,a.jsx)(e.code,{children:"RunnableLambda"})," constructor"]}),"\n",(0,a.jsx)(e.li,{children:"Coercion of custom functions into runnables when used in chains"}),"\n",(0,a.jsx)(e.li,{children:"How to accept and use run metadata in your custom function"}),"\n",(0,a.jsx)(e.li,{children:"How to stream with custom functions by having them return generators"}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"using-the-constructor",children:"Using the constructor"}),"\n",(0,a.jsxs)(e.p,{children:["Below, we explicitly wrap our custom logic using a ",(0,a.jsx)(e.code,{children:"RunnableLambda"}),"\nmethod:"]}),"\n","\n",(0,a.jsx)(s.default,{}),"\n",(0,a.jsx)(o.A,{children:(0,a.jsx)(e.p,{children:"@langchain/openai"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:'import { StringOutputParser } from "@langchain/core/output_parsers";\nimport { ChatPromptTemplate } from "@langchain/core/prompts";\nimport { RunnableLambda } from "@langchain/core/runnables";\nimport { ChatOpenAI } from "@langchain/openai";\n\nconst lengthFunction = (input: { foo: string }): { length: string } => {\n  return {\n    length: input.foo.length.toString(),\n  };\n};\n\nconst model = new ChatOpenAI({ model: "gpt-4o" });\n\nconst prompt = ChatPromptTemplate.fromTemplate("What is {length} squared?");\n\nconst chain = RunnableLambda.from(lengthFunction)\n  .pipe(prompt)\n  .pipe(model)\n  .pipe(new StringOutputParser());\n\nawait chain.invoke({ foo: "bar" });\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:'"3 squared is \\\\(3^2\\\\), which means multiplying 3 by itself. \\n" +\n  "\\n" +\n  "\\\\[3^2 = 3 \\\\times 3 = 9\\\\]\\n" +\n  "\\n" +\n  "So, 3 squared"... 6 more characters\n'})}),"\n",(0,a.jsx)(e.h2,{id:"automatic-coercion-in-chains",children:"Automatic coercion in chains"}),"\n",(0,a.jsxs)(e.p,{children:["When using custom functions in chains with\n",(0,a.jsx)(e.a,{href:"https://v02.api.js.langchain.com/classes/langchain_core_runnables.RunnableSequence.html#from",children:(0,a.jsx)(e.code,{children:"RunnableSequence.from"})}),"\nstatic method, you can omit the explicit ",(0,a.jsx)(e.code,{children:"RunnableLambda"})," creation and\nrely on coercion."]}),"\n",(0,a.jsx)(e.p,{children:"Here\u2019s a simple example with a function that takes the output from the\nmodel and returns the first five letters of it:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:'import { RunnableSequence } from "@langchain/core/runnables";\n\nconst prompt = ChatPromptTemplate.fromTemplate(\n  "Tell me a short story about {topic}"\n);\n\nconst model = new ChatOpenAI({ model: "gpt-4o" });\n\nconst chainWithCoercedFunction = RunnableSequence.from([\n  prompt,\n  model,\n  (input) => input.content.slice(0, 5),\n]);\n\nawait chainWithCoercedFunction.invoke({ topic: "bears" });\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:'"Once "\n'})}),"\n",(0,a.jsxs)(e.p,{children:["Note that we didn\u2019t need to wrap the custom function\n",(0,a.jsx)(e.code,{children:"(input) => input.content.slice(0, 5)"})," in a ",(0,a.jsx)(e.code,{children:"RunnableLambda"})," method. The\ncustom function is ",(0,a.jsx)(e.strong,{children:"coerced"})," into a runnable. See ",(0,a.jsx)(e.a,{href:"../../docs/how_to/sequence/#coercion",children:"this\nsection"})," for more information."]}),"\n",(0,a.jsx)(e.h2,{id:"passing-run-metadata",children:"Passing run metadata"}),"\n",(0,a.jsxs)(e.p,{children:["Runnable lambdas can optionally accept a\n",(0,a.jsx)(e.a,{href:"https://v02.api.js.langchain.com/interfaces/langchain_core_runnables.RunnableConfig.html",children:"RunnableConfig"}),"\nparameter, which they can use to pass callbacks, tags, and other\nconfiguration information to nested runs."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:'import { type RunnableConfig } from "@langchain/core/runnables";\n\nconst echo = (text: string, config: RunnableConfig) => {\n  const prompt = ChatPromptTemplate.fromTemplate(\n    "Reverse the following text: {text}"\n  );\n  const model = new ChatOpenAI({ model: "gpt-4o" });\n  const chain = prompt.pipe(model).pipe(new StringOutputParser());\n  return chain.invoke({ text }, config);\n};\n\nconst output = await RunnableLambda.from(echo).invoke("foo", {\n  tags: ["my-tag"],\n  callbacks: [\n    {\n      handleLLMEnd: (output) => console.log(output),\n    },\n  ],\n});\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:'{\n  generations: [\n    [\n      {\n        text: "oof",\n        message: AIMessage {\n          lc_serializable: true,\n          lc_kwargs: [Object],\n          lc_namespace: [Array],\n          content: "oof",\n          name: undefined,\n          additional_kwargs: [Object],\n          response_metadata: [Object],\n          tool_calls: [],\n          invalid_tool_calls: []\n        },\n        generationInfo: { finish_reason: "stop" }\n      }\n    ]\n  ],\n  llmOutput: {\n    tokenUsage: { completionTokens: 2, promptTokens: 13, totalTokens: 15 }\n  }\n}\n'})}),"\n",(0,a.jsx)(e.h1,{id:"streaming",children:"Streaming"}),"\n",(0,a.jsxs)(e.p,{children:["You can use generator functions (ie. functions that use the ",(0,a.jsx)(e.code,{children:"yield"}),"\nkeyword, and behave like iterators) in a chain."]}),"\n",(0,a.jsxs)(e.p,{children:["The signature of these generators should be\n",(0,a.jsx)(e.code,{children:"AsyncGenerator<Input> -> AsyncGenerator<Output>"}),"."]}),"\n",(0,a.jsx)(e.p,{children:"These are useful for: - implementing a custom output parser - modifying\nthe output of a previous step, while preserving streaming capabilities"}),"\n",(0,a.jsx)(e.p,{children:"Here\u2019s an example of a custom output parser for comma-separated lists.\nFirst, we create a chain that generates such a list as text:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:'const prompt = ChatPromptTemplate.fromTemplate(\n  "Write a comma-separated list of 5 animals similar to: {animal}. Do not include numbers"\n);\n\nconst strChain = prompt.pipe(model).pipe(new StringOutputParser());\n\nconst stream = await strChain.stream({ animal: "bear" });\n\nfor await (const chunk of stream) {\n  console.log(chunk);\n}\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:"\nLion\n,\n wolf\n,\n tiger\n,\n cougar\n,\n leopard\n"})}),"\n",(0,a.jsx)(e.p,{children:"Next, we define a custom function that will aggregate the currently\nstreamed output and yield it when the model generates the next comma in\nthe list:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:'// This is a custom parser that splits an iterator of llm tokens\n// into a list of strings separated by commas\nasync function* splitIntoList(input) {\n  // hold partial input until we get a comma\n  let buffer = "";\n  for await (const chunk of input) {\n    // add current chunk to buffer\n    buffer += chunk;\n    // while there are commas in the buffer\n    while (buffer.includes(",")) {\n      // split buffer on comma\n      const commaIndex = buffer.indexOf(",");\n      // yield everything before the comma\n      yield [buffer.slice(0, commaIndex).trim()];\n      // save the rest for the next iteration\n      buffer = buffer.slice(commaIndex + 1);\n    }\n  }\n  // yield the last chunk\n  yield [buffer.trim()];\n}\n\nconst listChain = strChain.pipe(splitIntoList);\n\nconst stream = await listChain.stream({ animal: "bear" });\n\nfor await (const chunk of stream) {\n  console.log(chunk);\n}\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:'[ "wolf" ]\n[ "lion" ]\n[ "tiger" ]\n[ "cougar" ]\n[ "cheetah" ]\n'})}),"\n",(0,a.jsx)(e.p,{children:"Invoking it gives a full array of values:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:'await listChain.invoke({ animal: "bear" });\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:'[ "lion", "tiger", "wolf", "cougar", "jaguar" ]\n'})}),"\n",(0,a.jsx)(e.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,a.jsx)(e.p,{children:"Now you\u2019ve learned a few different ways to use custom logic within your\nchains, and how to implement streaming."}),"\n",(0,a.jsx)(e.p,{children:"To learn more, see the other how-to guides on runnables in this section."})]})}function p(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}},19365:(n,e,t)=>{t.d(e,{A:()=>o});t(96540);var a=t(34164);const r={tabItem:"tabItem_Ymn6"};var s=t(74848);function o(n){let{children:e,hidden:t,className:o}=n;return(0,s.jsx)("div",{role:"tabpanel",className:(0,a.A)(r.tabItem,o),hidden:t,children:e})}},11470:(n,e,t)=>{t.d(e,{A:()=>y});var a=t(96540),r=t(34164),s=t(23104),o=t(56347),i=t(205),l=t(57485),c=t(31682),u=t(89466);function h(n){return a.Children.toArray(n).filter((n=>"\n"!==n)).map((n=>{if(!n||(0,a.isValidElement)(n)&&function(n){const{props:e}=n;return!!e&&"object"==typeof e&&"value"in e}(n))return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(n){const{values:e,children:t}=n;return(0,a.useMemo)((()=>{const n=e??function(n){return h(n).map((n=>{let{props:{value:e,label:t,attributes:a,default:r}}=n;return{value:e,label:t,attributes:a,default:r}}))}(t);return function(n){const e=(0,c.X)(n,((n,e)=>n.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((n=>n.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(n),n}),[e,t])}function p(n){let{value:e,tabValues:t}=n;return t.some((n=>n.value===e))}function m(n){let{queryString:e=!1,groupId:t}=n;const r=(0,o.W6)(),s=function(n){let{queryString:e=!1,groupId:t}=n;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,l.aZ)(s),(0,a.useCallback)((n=>{if(!s)return;const e=new URLSearchParams(r.location.search);e.set(s,n),r.replace({...r.location,search:e.toString()})}),[s,r])]}function f(n){const{defaultValue:e,queryString:t=!1,groupId:r}=n,s=d(n),[o,l]=(0,a.useState)((()=>function(n){let{defaultValue:e,tabValues:t}=n;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map((n=>n.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const a=t.find((n=>n.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:e,tabValues:s}))),[c,h]=m({queryString:t,groupId:r}),[f,g]=function(n){let{groupId:e}=n;const t=function(n){return n?`docusaurus.tab.${n}`:null}(e),[r,s]=(0,u.Dv)(t);return[r,(0,a.useCallback)((n=>{t&&s.set(n)}),[t,s])]}({groupId:r}),b=(()=>{const n=c??f;return p({value:n,tabValues:s})?n:null})();(0,i.A)((()=>{b&&l(b)}),[b]);return{selectedValue:o,selectValue:(0,a.useCallback)((n=>{if(!p({value:n,tabValues:s}))throw new Error(`Can't select invalid tab value=${n}`);l(n),h(n),g(n)}),[h,g,s]),tabValues:s}}var g=t(92303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=t(74848);function j(n){let{className:e,block:t,selectedValue:a,selectValue:o,tabValues:i}=n;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),u=n=>{const e=n.currentTarget,t=l.indexOf(e),r=i[t].value;r!==a&&(c(e),o(r))},h=n=>{let e=null;switch(n.key){case"Enter":u(n);break;case"ArrowRight":{const t=l.indexOf(n.currentTarget)+1;e=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(n.currentTarget)-1;e=l[t]??l[l.length-1];break}}e?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},e),children:i.map((n=>{let{value:e,label:t,attributes:s}=n;return(0,x.jsx)("li",{role:"tab",tabIndex:a===e?0:-1,"aria-selected":a===e,ref:n=>l.push(n),onKeyDown:h,onClick:u,...s,className:(0,r.A)("tabs__item",b.tabItem,s?.className,{"tabs__item--active":a===e}),children:t??e},e)}))})}function w(n){let{lazy:e,children:t,selectedValue:r}=n;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const n=s.find((n=>n.props.value===r));return n?(0,a.cloneElement)(n,{className:"margin-top--md"}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:s.map(((n,e)=>(0,a.cloneElement)(n,{key:e,hidden:n.props.value!==r})))})}function v(n){const e=f(n);return(0,x.jsxs)("div",{className:(0,r.A)("tabs-container",b.tabList),children:[(0,x.jsx)(j,{...e,...n}),(0,x.jsx)(w,{...e,...n})]})}function y(n){const e=(0,g.A)();return(0,x.jsx)(v,{...n,children:h(n.children)},String(e))}},27846:(n,e,t)=>{t.d(e,{A:()=>i});t(96540);var a=t(11470),r=t(19365),s=t(21432),o=t(74848);function i(n){let{children:e}=n;return(0,o.jsxs)(a.A,{groupId:"npm2yarn",children:[(0,o.jsx)(r.A,{value:"npm",label:"npm",children:(0,o.jsxs)(s.A,{language:"bash",children:["npm i ",e]})}),(0,o.jsx)(r.A,{value:"yarn",label:"yarn",default:!0,children:(0,o.jsxs)(s.A,{language:"bash",children:["yarn add ",e]})}),(0,o.jsx)(r.A,{value:"pnpm",label:"pnpm",children:(0,o.jsxs)(s.A,{language:"bash",children:["pnpm add ",e]})})]})}}}]);
(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2201],{89799:(e,t,r)=>{"use strict";r.r(t),r.d(t,{assets:()=>m,contentTitle:()=>h,default:()=>g,frontMatter:()=>d,metadata:()=>l,toc:()=>u});var n=r(74848),o=r(28453),s=r(64428),i=r(62483),a=r.n(i),c=r(78847);const d={sidebar_class_name:"hidden",pagination_prev:null,pagination_next:null},h="How to create a time-weighted retriever",l={id:"how_to/time_weighted_vectorstore",title:"How to create a time-weighted retriever",description:"This guide assumes familiarity with the following concepts:",source:"@site/docs/how_to/time_weighted_vectorstore.mdx",sourceDirName:"how_to",slug:"/how_to/time_weighted_vectorstore",permalink:"/docs/how_to/time_weighted_vectorstore",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/how_to/time_weighted_vectorstore.mdx",tags:[],version:"current",frontMatter:{sidebar_class_name:"hidden",pagination_prev:null,pagination_next:null},sidebar:"tutorialSidebar"},m={},u=[...c.toc,{value:"Next steps",id:"next-steps",level:2}];function p(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"how-to-create-a-time-weighted-retriever",children:"How to create a time-weighted retriever"}),"\n",(0,n.jsxs)(t.admonition,{title:"Prerequisites",type:"info",children:[(0,n.jsx)(t.p,{children:"This guide assumes familiarity with the following concepts:"}),(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"/docs/concepts/#retrievers",children:"Retrievers"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"/docs/concepts/#vectorstores",children:"Vector stores"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"/docs/tutorials/rag",children:"Retrieval-augmented generation (RAG)"})}),"\n"]})]}),"\n",(0,n.jsxs)(t.p,{children:["This guide covers the ",(0,n.jsx)(t.a,{href:"https://v02.api.js.langchain.com/classes/langchain_retrievers_time_weighted.TimeWeightedVectorStoreRetriever.html",children:(0,n.jsx)(t.code,{children:"TimeWeightedVectorStoreRetriever"})}),",\nwhich uses a combination of semantic similarity and a time decay."]}),"\n",(0,n.jsx)(t.p,{children:"The algorithm for scoring them is:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"semantic_similarity + (1.0 - decay_rate) ^ hours_passed\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Notably, ",(0,n.jsx)(t.code,{children:"hours_passed"})," refers to the hours passed since the object in the retriever ",(0,n.jsx)(t.strong,{children:"was last accessed"}),', not since it was created. This means that frequently accessed objects remain "fresh."']}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"let score = (1.0 - this.decayRate) ** hoursPassed + vectorRelevance;\n"})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"this.decayRate"}),' is a configurable decimal number between 0 and 1. A lower number means that documents will be "remembered" for longer, while a higher number strongly weights more recently accessed documents.']}),"\n",(0,n.jsxs)(t.p,{children:["Note that setting a decay rate of exactly 0 or 1 makes ",(0,n.jsx)(t.code,{children:"hoursPassed"})," irrelevant and makes this retriever equivalent to a standard vector lookup."]}),"\n",(0,n.jsxs)(t.p,{children:["It is important to note that due to required metadata, all documents must be added to the backing vector store using the ",(0,n.jsx)(t.code,{children:"addDocuments"})," method on the ",(0,n.jsx)(t.strong,{children:"retriever"}),", not the vector store itself."]}),"\n","\n","\n",(0,n.jsx)(c.default,{}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai\n"})}),"\n",(0,n.jsx)(s.A,{language:"typescript",children:a()}),"\n",(0,n.jsx)(t.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,n.jsx)(t.p,{children:"You've now learned how to use time as a factor when performing retrieval."}),"\n",(0,n.jsxs)(t.p,{children:["Next, check out the ",(0,n.jsx)(t.a,{href:"/docs/tutorials/rag",children:"broader tutorial on RAG"}),", or this section to learn how to\n",(0,n.jsx)(t.a,{href:"/docs/how_to/custom_retriever/",children:"create your own custom retriever over any data source"}),"."]})]})}function g(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},62483:e=>{e.exports={content:'import { TimeWeightedVectorStoreRetriever } from "langchain/retrievers/time_weighted";\nimport { MemoryVectorStore } from "langchain/vectorstores/memory";\nimport { OpenAIEmbeddings } from "@langchain/openai";\n\nconst vectorStore = new MemoryVectorStore(new OpenAIEmbeddings());\n\nconst retriever = new TimeWeightedVectorStoreRetriever({\n  vectorStore,\n  memoryStream: [],\n  searchKwargs: 2,\n});\n\nconst documents = [\n  "My name is John.",\n  "My name is Bob.",\n  "My favourite food is pizza.",\n  "My favourite food is pasta.",\n  "My favourite food is sushi.",\n].map((pageContent) => ({ pageContent, metadata: {} }));\n\n// All documents must be added using this method on the retriever (not the vector store!)\n// so that the correct access history metadata is populated\nawait retriever.addDocuments(documents);\n\nconst results1 = await retriever.invoke("What is my favourite food?");\n\nconsole.log(results1);\n\n/*\n[\n  Document { pageContent: \'My favourite food is pasta.\', metadata: {} }\n]\n */\n\nconst results2 = await retriever.invoke("What is my favourite food?");\n\nconsole.log(results2);\n\n/*\n[\n  Document { pageContent: \'My favourite food is pasta.\', metadata: {} }\n]\n */\n',imports:[{local:"TimeWeightedVectorStoreRetriever",imported:"TimeWeightedVectorStoreRetriever",source:"langchain/retrievers/time_weighted"},{local:"MemoryVectorStore",imported:"MemoryVectorStore",source:"langchain/vectorstores/memory"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"}]}}}]);
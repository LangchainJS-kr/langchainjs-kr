"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3979],{9664:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>h});var r=t(74848),a=t(28453),s=t(78847),o=t(27846);const i={sidebar_class_name:"hidden",title:"How to do extraction without using function calling"},l=void 0,c={id:"how_to/extraction_parse",title:"How to do extraction without using function calling",description:"This guide assumes familiarity with the following:",source:"@site/docs/how_to/extraction_parse.mdx",sourceDirName:"how_to",slug:"/how_to/extraction_parse",permalink:"/docs/how_to/extraction_parse",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/how_to/extraction_parse.mdx",tags:[],version:"current",frontMatter:{sidebar_class_name:"hidden",title:"How to do extraction without using function calling"},sidebar:"tutorialSidebar",previous:{title:"How to handle long text",permalink:"/docs/how_to/extraction_long_text"},next:{title:"Fallbacks",permalink:"/docs/how_to/fallbacks"}},u={},h=[...s.toc,{value:"Using StructuredOutputParser",id:"using-structuredoutputparser",level:2},{value:"Custom Parsing",id:"custom-parsing",level:2},{value:"Next steps",id:"next-steps",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.admonition,{title:"Prerequisites",type:"info",children:[(0,r.jsx)(n.p,{children:"This guide assumes familiarity with the following:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"../../docs/tutorials/extraction",children:"Extraction"})}),"\n"]})]}),"\n",(0,r.jsx)(n.p,{children:"LLMs that are able to follow prompt instructions well can be tasked with\noutputting information in a given format without using function calling."}),"\n",(0,r.jsx)(n.p,{children:"This approach relies on designing good prompts and then parsing the\noutput of the LLMs to make them extract information well, though it\nlacks some of the guarantees provided by function calling or JSON mode."}),"\n",(0,r.jsxs)(n.p,{children:["Here, we\u2019ll use Claude which is great at following instructions! See\n",(0,r.jsx)(n.a,{href:"../../docs/integrations/chat/anthropic",children:"here for more about Anthropic\nmodels"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"First, we\u2019ll install the integration package:"}),"\n","\n",(0,r.jsx)(s.default,{}),"\n",(0,r.jsx)(o.A,{children:(0,r.jsx)(n.p,{children:"@langchain/anthropic zod zod-to-json-schema"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { ChatAnthropic } from "@langchain/anthropic";\n\nconst model = new ChatAnthropic({\n  model: "claude-3-sonnet-20240229",\n  temperature: 0,\n});\n'})}),"\n",(0,r.jsxs)(n.admonition,{type:"tip",children:[(0,r.jsx)(n.p,{children:"All the same considerations for extraction quality apply for parsing\napproach."}),(0,r.jsx)(n.p,{children:"This tutorial is meant to be simple, but generally should really include\nreference examples to squeeze out performance!"})]}),"\n",(0,r.jsx)(n.h2,{id:"using-structuredoutputparser",children:"Using StructuredOutputParser"}),"\n",(0,r.jsxs)(n.p,{children:["The following example uses the built-in\n",(0,r.jsx)(n.a,{href:"../../docs/how_to/output_parser_structured/",children:(0,r.jsx)(n.code,{children:"StructuredOutputParser"})}),"\nto parse the output of a chat model. We use the built-in prompt\nformatting instructions contained in the parser."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { z } from "zod";\nimport { StructuredOutputParser } from "langchain/output_parsers";\nimport { ChatPromptTemplate } from "@langchain/core/prompts";\n\nconst personSchema = z\n  .object({\n    name: z.optional(z.string()).describe("The name of the person"),\n    hair_color: z\n      .optional(z.string())\n      .describe("The color of the person\'s hair, if known"),\n    height_in_meters: z\n      .optional(z.string())\n      .describe("Height measured in meters"),\n  })\n  .describe("Information about a person.");\n\nconst parser = StructuredOutputParser.fromZodSchema(personSchema);\n\nconst prompt = ChatPromptTemplate.fromMessages([\n  [\n    "system",\n    "Answer the user query. Wrap the output in `json` tags\\n{format_instructions}",\n  ],\n  ["human", "{query}"],\n]);\n\nconst partialedPrompt = await prompt.partial({\n  format_instructions: parser.getFormatInstructions(),\n});\n'})}),"\n",(0,r.jsx)(n.p,{children:"Let\u2019s take a look at what information is sent to the model"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'const query = "Anna is 23 years old and she is 6 feet tall";\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const promptValue = await partialedPrompt.invoke({ query });\n\nconsole.log(promptValue.toChatMessages());\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:'[\n  SystemMessage {\n    lc_serializable: true,\n    lc_kwargs: {\n      content: "Answer the user query. Wrap the output in `json` tags\\n" +\n        "You must format your output as a JSON value th"... 1444 more characters,\n      additional_kwargs: {}\n    },\n    lc_namespace: [ "langchain_core", "messages" ],\n    content: "Answer the user query. Wrap the output in `json` tags\\n" +\n      "You must format your output as a JSON value th"... 1444 more characters,\n    name: undefined,\n    additional_kwargs: {}\n  },\n  HumanMessage {\n    lc_serializable: true,\n    lc_kwargs: {\n      content: "Anna is 23 years old and she is 6 feet tall",\n      additional_kwargs: {}\n    },\n    lc_namespace: [ "langchain_core", "messages" ],\n    content: "Anna is 23 years old and she is 6 feet tall",\n    name: undefined,\n    additional_kwargs: {}\n  }\n]\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const chain = partialedPrompt.pipe(model).pipe(parser);\n\nawait chain.invoke({ query });\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:'{ name: "Anna", hair_color: "", height_in_meters: "1.83" }\n'})}),"\n",(0,r.jsx)(n.h2,{id:"custom-parsing",children:"Custom Parsing"}),"\n",(0,r.jsxs)(n.p,{children:["You can also create a custom prompt and parser with ",(0,r.jsx)(n.code,{children:"LangChain"})," and\n",(0,r.jsx)(n.code,{children:"LCEL"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"You can use a raw function to parse the output from the model."}),"\n",(0,r.jsxs)(n.p,{children:["In the below example, we\u2019ll pass the schema into the prompt as JSON\nschema. For convenience, we\u2019ll declare our schema with Zod, then use the\n",(0,r.jsx)(n.a,{href:"https://github.com/StefanTerdell/zod-to-json-schema",children:(0,r.jsx)(n.code,{children:"zod-to-json-schema"})}),"\nutility to convert it to JSON schema."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { z } from "zod";\nimport { zodToJsonSchema } from "zod-to-json-schema";\n\nconst personSchema = z\n  .object({\n    name: z.optional(z.string()).describe("The name of the person"),\n    hair_color: z\n      .optional(z.string())\n      .describe("The color of the person\'s hair, if known"),\n    height_in_meters: z\n      .optional(z.string())\n      .describe("Height measured in meters"),\n  })\n  .describe("Information about a person.");\n\nconst peopleSchema = z.object({\n  people: z.array(personSchema),\n});\n\nconst SYSTEM_PROMPT_TEMPLATE = [\n  "Answer the user\'s query. You must return your answer as JSON that matches the given schema:",\n  "```json\\n{schema}\\n```.",\n  "Make sure to wrap the answer in ```json and ``` tags. Conform to the given schema exactly.",\n].join("\\n");\n\nconst prompt = ChatPromptTemplate.fromMessages([\n  ["system", SYSTEM_PROMPT_TEMPLATE],\n  ["human", "{query}"],\n]);\n\nconst extractJsonFromOutput = (message) => {\n  const text = message.content;\n\n  // Define the regular expression pattern to match JSON blocks\n  const pattern = /```json\\s*((.|\\n)*?)\\s*```/gs;\n\n  // Find all non-overlapping matches of the pattern in the string\n  const matches = pattern.exec(text);\n\n  if (matches && matches[1]) {\n    try {\n      return JSON.parse(matches[1].trim());\n    } catch (error) {\n      throw new Error(`Failed to parse: ${matches[1]}`);\n    }\n  } else {\n    throw new Error(`No JSON found in: ${message}`);\n  }\n};\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'const query = "Anna is 23 years old and she is 6 feet tall";\n\nconst promptValue = await prompt.invoke({\n  schema: zodToJsonSchema(peopleSchema),\n  query,\n});\n\npromptValue.toString();\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:'"System: Answer the user\'s query. You must return your answer as JSON that matches the given schema:\\n"... 170 more characters\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const chain = prompt.pipe(model).pipe(extractJsonFromOutput);\n\nawait chain.invoke({\n  schema: zodToJsonSchema(peopleSchema),\n  query,\n});\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:'{ name: "Anna", age: 23, height: { feet: 6, inches: 0 } }\n'})}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,r.jsx)(n.p,{children:"You\u2019ve now learned how to perform extraction without using tool calling."}),"\n",(0,r.jsxs)(n.p,{children:["Next, check out some of the other guides in this section, such as ",(0,r.jsx)(n.a,{href:"../../docs/how_to/extraction_examples",children:"some\ntips on how to improve extraction quality with\nexamples"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},19365:(e,n,t)=>{t.d(n,{A:()=>o});t(96540);var r=t(34164);const a={tabItem:"tabItem_Ymn6"};var s=t(74848);function o(e){let{children:n,hidden:t,className:o}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,r.A)(a.tabItem,o),hidden:t,children:n})}},11470:(e,n,t)=>{t.d(n,{A:()=>v});var r=t(96540),a=t(34164),s=t(23104),o=t(56347),i=t(205),l=t(57485),c=t(31682),u=t(89466);function h(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:a}}=e;return{value:n,label:t,attributes:r,default:a}}))}(t);return function(e){const n=(0,c.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const a=(0,o.W6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(s),(0,r.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(a.location.search);n.set(s,e),a.replace({...a.location,search:n.toString()})}),[s,a])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,s=d(e),[o,l]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:s}))),[c,h]=m({queryString:t,groupId:a}),[g,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,s]=(0,u.Dv)(t);return[a,(0,r.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:a}),x=(()=>{const e=c??g;return p({value:e,tabValues:s})?e:null})();(0,i.A)((()=>{x&&l(x)}),[x]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),f(e)}),[h,f,s]),tabValues:s}}var f=t(92303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=t(74848);function w(e){let{className:n,block:t,selectedValue:r,selectValue:o,tabValues:i}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),u=e=>{const n=e.currentTarget,t=l.indexOf(n),a=i[t].value;a!==r&&(c(n),o(a))},h=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},n),children:i.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>l.push(e),onKeyDown:h,onClick:u,...s,className:(0,a.A)("tabs__item",x.tabItem,s?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function j(e){let{lazy:n,children:t,selectedValue:a}=e;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function y(e){const n=g(e);return(0,b.jsxs)("div",{className:(0,a.A)("tabs-container",x.tabList),children:[(0,b.jsx)(w,{...n,...e}),(0,b.jsx)(j,{...n,...e})]})}function v(e){const n=(0,f.A)();return(0,b.jsx)(y,{...e,children:h(e.children)},String(n))}},27846:(e,n,t)=>{t.d(n,{A:()=>i});t(96540);var r=t(11470),a=t(19365),s=t(21432),o=t(74848);function i(e){let{children:n}=e;return(0,o.jsxs)(r.A,{groupId:"npm2yarn",children:[(0,o.jsx)(a.A,{value:"npm",label:"npm",children:(0,o.jsxs)(s.A,{language:"bash",children:["npm i ",n]})}),(0,o.jsx)(a.A,{value:"yarn",label:"yarn",default:!0,children:(0,o.jsxs)(s.A,{language:"bash",children:["yarn add ",n]})}),(0,o.jsx)(a.A,{value:"pnpm",label:"pnpm",children:(0,o.jsxs)(s.A,{language:"bash",children:["pnpm add ",n]})})]})}}}]);
(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2911],{2165:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>d,default:()=>g,frontMatter:()=>l,metadata:()=>h,toc:()=>u});var s=t(74848),a=t(28453),o=t(64428),r=t(92300),c=t.n(r),i=t(78847);const l={sidebar_class_name:"node-only"},d="Elasticsearch",h={id:"integrations/vectorstores/elasticsearch",title:"Elasticsearch",description:"Only available on Node.js.",source:"@site/docs/integrations/vectorstores/elasticsearch.mdx",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/elasticsearch",permalink:"/docs/integrations/vectorstores/elasticsearch",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/vectorstores/elasticsearch.mdx",tags:[],version:"current",frontMatter:{sidebar_class_name:"node-only"},sidebar:"integrations",previous:{title:"Couchbase",permalink:"/docs/integrations/vectorstores/couchbase"},next:{title:"Faiss",permalink:"/docs/integrations/vectorstores/faiss"}},p={},u=[{value:"Setup",id:"setup",level:2},{value:"Example: index docs, vector search and LLM integration",id:"example-index-docs-vector-search-and-llm-integration",level:2},...i.toc];function m(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"elasticsearch",children:"Elasticsearch"}),"\n",(0,s.jsx)(n.admonition,{title:"Compatibility",type:"tip",children:(0,s.jsx)(n.p,{children:"Only available on Node.js."})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://github.com/elastic/elasticsearch",children:"Elasticsearch"})," is a distributed, RESTful search engine optimized for speed and relevance on production-scale workloads. It supports also vector search using the ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm",children:"k-nearest neighbor"})," (kNN) algorithm and also ",(0,s.jsx)(n.a,{href:"https://www.elastic.co/blog/how-to-deploy-nlp-text-embeddings-and-vector-search",children:"custom models for Natural Language Processing"})," (NLP).\nYou can read more about the support of vector search in Elasticsearch ",(0,s.jsx)(n.a,{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/knn-search.html",children:"here"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["LangChain.js accepts ",(0,s.jsx)(n.a,{href:"https://github.com/elastic/elasticsearch-js",children:"@elastic/elasticsearch"})," as the client for Elasticsearch vectorstore."]}),"\n",(0,s.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install -S @elastic/elasticsearch\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You'll also need to have an Elasticsearch instance running.\nYou can use the ",(0,s.jsx)(n.a,{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html",children:"official Docker image"})," to get started, or you can use ",(0,s.jsx)(n.a,{href:"https://www.elastic.co/cloud/",children:"Elastic Cloud"}),", Elastic's official cloud service."]}),"\n",(0,s.jsxs)(n.p,{children:["For connecting to Elastic Cloud you can read the documentation reported ",(0,s.jsx)(n.a,{href:"https://www.elastic.co/guide/en/kibana/current/api-keys.html",children:"here"})," for obtaining an API key."]}),"\n",(0,s.jsx)(n.h2,{id:"example-index-docs-vector-search-and-llm-integration",children:"Example: index docs, vector search and LLM integration"}),"\n",(0,s.jsx)(n.p,{children:"Below is an example that indexes 4 documents in Elasticsearch,\nruns a vector search query, and finally uses an LLM to answer a question in natural language\nbased on the retrieved documents."}),"\n","\n","\n",(0,s.jsx)(i.default,{}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai\n"})}),"\n",(0,s.jsx)(o.A,{language:"typescript",children:c()})]})}function g(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},92300:e=>{e.exports={content:'import { Client, ClientOptions } from "@elastic/elasticsearch";\nimport { OpenAI, OpenAIEmbeddings } from "@langchain/openai";\nimport { VectorDBQAChain } from "langchain/chains";\n\nimport {\n  ElasticClientArgs,\n  ElasticVectorSearch,\n} from "@langchain/community/vectorstores/elasticsearch";\nimport { Document } from "@langchain/core/documents";\n\n// to run this first run Elastic\'s docker-container with `docker-compose up -d --build`\nexport async function run() {\n  const config: ClientOptions = {\n    node: process.env.ELASTIC_URL ?? "http://127.0.0.1:9200",\n  };\n  if (process.env.ELASTIC_API_KEY) {\n    config.auth = {\n      apiKey: process.env.ELASTIC_API_KEY,\n    };\n  } else if (process.env.ELASTIC_USERNAME && process.env.ELASTIC_PASSWORD) {\n    config.auth = {\n      username: process.env.ELASTIC_USERNAME,\n      password: process.env.ELASTIC_PASSWORD,\n    };\n  }\n  const clientArgs: ElasticClientArgs = {\n    client: new Client(config),\n    indexName: process.env.ELASTIC_INDEX ?? "test_vectorstore",\n  };\n\n  // Index documents\n\n  const docs = [\n    new Document({\n      metadata: { foo: "bar" },\n      pageContent: "Elasticsearch is a powerful vector db",\n    }),\n    new Document({\n      metadata: { foo: "bar" },\n      pageContent: "the quick brown fox jumped over the lazy dog",\n    }),\n    new Document({\n      metadata: { baz: "qux" },\n      pageContent: "lorem ipsum dolor sit amet",\n    }),\n    new Document({\n      metadata: { baz: "qux" },\n      pageContent:\n        "Elasticsearch a distributed, RESTful search engine optimized for speed and relevance on production-scale workloads.",\n    }),\n  ];\n\n  const embeddings = new OpenAIEmbeddings();\n\n  // await ElasticVectorSearch.fromDocuments(docs, embeddings, clientArgs);\n  const vectorStore = new ElasticVectorSearch(embeddings, clientArgs);\n\n  // Also supports an additional {ids: []} parameter for upsertion\n  const ids = await vectorStore.addDocuments(docs);\n\n  /* Search the vector DB independently with meta filters */\n  const results = await vectorStore.similaritySearch("fox jump", 1);\n  console.log(JSON.stringify(results, null, 2));\n  /* [\n        {\n          "pageContent": "the quick brown fox jumped over the lazy dog",\n          "metadata": {\n            "foo": "bar"\n          }\n        }\n    ]\n  */\n\n  /* Use as part of a chain (currently no metadata filters) for LLM query */\n  const model = new OpenAI();\n  const chain = VectorDBQAChain.fromLLM(model, vectorStore, {\n    k: 1,\n    returnSourceDocuments: true,\n  });\n  const response = await chain.invoke({ query: "What is Elasticsearch?" });\n\n  console.log(JSON.stringify(response, null, 2));\n  /*\n    {\n      "text": " Elasticsearch is a distributed, RESTful search engine optimized for speed and relevance on production-scale workloads.",\n      "sourceDocuments": [\n        {\n          "pageContent": "Elasticsearch a distributed, RESTful search engine optimized for speed and relevance on production-scale workloads.",\n          "metadata": {\n            "baz": "qux"\n          }\n        }\n      ]\n    }\n    */\n\n  await vectorStore.delete({ ids });\n\n  const response2 = await chain.invoke({ query: "What is Elasticsearch?" });\n\n  console.log(JSON.stringify(response2, null, 2));\n\n  /*\n    []\n  */\n}\n',imports:[{local:"OpenAI",imported:"OpenAI",source:"@langchain/openai"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"},{local:"VectorDBQAChain",imported:"VectorDBQAChain",source:"langchain/chains"},{local:"ElasticClientArgs",imported:"ElasticClientArgs",source:"@langchain/community/vectorstores/elasticsearch"},{local:"ElasticVectorSearch",imported:"ElasticVectorSearch",source:"@langchain/community/vectorstores/elasticsearch"},{local:"Document",imported:"Document",source:"@langchain/core/documents"}]}}}]);
(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6829],{75557:(e,n,a)=>{"use strict";a.r(n),a.d(n,{assets:()=>u,contentTitle:()=>d,default:()=>f,frontMatter:()=>h,metadata:()=>p,toc:()=>y});var s=a(74848),t=a(28453),o=a(64428),r=a(78847),i=a(9609),c=a.n(i),l=a(80594),m=a.n(l);const h={hide_table_of_contents:!0},d="PlanetScale Chat Memory",p={id:"integrations/chat_memory/planetscale",title:"PlanetScale Chat Memory",description:"Because PlanetScale works via a REST API, you can use this with Vercel Edge, Cloudflare Workers and other Serverless environments.",source:"@site/docs/integrations/chat_memory/planetscale.mdx",sourceDirName:"integrations/chat_memory",slug:"/integrations/chat_memory/planetscale",permalink:"/docs/integrations/chat_memory/planetscale",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/chat_memory/planetscale.mdx",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0}},u={},y=[{value:"Setup",id:"setup",level:2},...r.toc,{value:"Usage",id:"usage",level:2},{value:"Advanced Usage",id:"advanced-usage",level:2}];function g(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"planetscale-chat-memory",children:"PlanetScale Chat Memory"}),"\n",(0,s.jsxs)(n.p,{children:["Because PlanetScale works via a REST API, you can use this with ",(0,s.jsx)(n.a,{href:"https://vercel.com/docs/concepts/functions/edge-functions/edge-runtime",children:"Vercel Edge"}),", ",(0,s.jsx)(n.a,{href:"https://developers.cloudflare.com/workers/",children:"Cloudflare Workers"})," and other Serverless environments."]}),"\n",(0,s.jsxs)(n.p,{children:["For longer-term persistence across chat sessions, you can swap out the default in-memory ",(0,s.jsx)(n.code,{children:"chatHistory"})," that backs chat memory classes like ",(0,s.jsx)(n.code,{children:"BufferMemory"})," for an PlanetScale ",(0,s.jsx)(n.a,{href:"https://planetscale.com/",children:"Database"})," instance."]}),"\n",(0,s.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,s.jsxs)(n.p,{children:["You will need to install ",(0,s.jsx)(n.a,{href:"https://github.com/planetscale/database-js",children:"@planetscale/database"})," in your project:"]}),"\n","\n",(0,s.jsx)(r.default,{}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai @planetscale/database @langchain/community\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You will also need an PlanetScale Account and a database to connect to. See instructions on ",(0,s.jsx)(n.a,{href:"https://planetscale.com/docs",children:"PlanetScale Docs"})," on how to create a HTTP client."]}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(n.p,{children:["Each chat history session stored in PlanetScale database must have a unique id.\nThe ",(0,s.jsx)(n.code,{children:"config"})," parameter is passed directly into the ",(0,s.jsx)(n.code,{children:"new Client()"})," constructor of ",(0,s.jsx)(n.a,{href:"https://planetscale.com/docs/tutorials/planetscale-serverless-driver",children:"@planetscale/database"}),", and takes all the same arguments."]}),"\n","\n",(0,s.jsx)(o.A,{language:"typescript",children:c()}),"\n",(0,s.jsx)(n.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,s.jsxs)(n.p,{children:["You can also directly pass in a previously created ",(0,s.jsx)(n.a,{href:"https://planetscale.com/docs/tutorials/planetscale-serverless-driver",children:"@planetscale/database"})," client instance:"]}),"\n","\n",(0,s.jsx)(o.A,{language:"typescript",children:m()})]})}function f(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(g,{...e})}):g(e)}},9609:e=>{e.exports={content:'import { BufferMemory } from "langchain/memory/index";\nimport { PlanetScaleChatMessageHistory } from "@langchain/community/stores/message/planetscale";\nimport { ChatOpenAI } from "@langchain/openai";\nimport { ConversationChain } from "langchain/chains";\n\nconst memory = new BufferMemory({\n  chatHistory: new PlanetScaleChatMessageHistory({\n    tableName: "stored_message",\n    sessionId: "lc-example",\n    config: {\n      url: "ADD_YOURS_HERE", // Override with your own database instance\'s URL\n    },\n  }),\n});\n\nconst model = new ChatOpenAI();\nconst chain = new ConversationChain({ llm: model, memory });\n\nconst res1 = await chain.invoke({ input: "Hi! I\'m Jim." });\nconsole.log({ res1 });\n/*\n{\n  res1: {\n    text: "Hello Jim! It\'s nice to meet you. My name is AI. How may I assist you today?"\n  }\n}\n*/\n\nconst res2 = await chain.invoke({ input: "What did I just say my name was?" });\nconsole.log({ res2 });\n\n/*\n{\n  res1: {\n    text: "You said your name was Jim."\n  }\n}\n*/\n',imports:[{local:"BufferMemory",imported:"BufferMemory",source:"langchain/memory/index"},{local:"PlanetScaleChatMessageHistory",imported:"PlanetScaleChatMessageHistory",source:"@langchain/community/stores/message/planetscale"},{local:"ChatOpenAI",imported:"ChatOpenAI",source:"@langchain/openai"},{local:"ConversationChain",imported:"ConversationChain",source:"langchain/chains"}]}},80594:e=>{e.exports={content:'import { BufferMemory } from "langchain/memory/index";\nimport { PlanetScaleChatMessageHistory } from "@langchain/community/stores/message/planetscale";\nimport { ChatOpenAI } from "@langchain/openai";\nimport { ConversationChain } from "langchain/chains";\nimport { Client } from "@planetscale/database";\n\n// Create your own Planetscale database client\nconst client = new Client({\n  url: "ADD_YOURS_HERE", // Override with your own database instance\'s URL\n});\n\nconst memory = new BufferMemory({\n  chatHistory: new PlanetScaleChatMessageHistory({\n    tableName: "stored_message",\n    sessionId: "lc-example",\n    client, // You can reuse your existing database client\n  }),\n});\n\nconst model = new ChatOpenAI();\nconst chain = new ConversationChain({ llm: model, memory });\n\nconst res1 = await chain.invoke({ input: "Hi! I\'m Jim." });\nconsole.log({ res1 });\n/*\n{\n  res1: {\n    text: "Hello Jim! It\'s nice to meet you. My name is AI. How may I assist you today?"\n  }\n}\n*/\n\nconst res2 = await chain.invoke({ input: "What did I just say my name was?" });\nconsole.log({ res2 });\n\n/*\n{\n  res1: {\n    text: "You said your name was Jim."\n  }\n}\n*/\n',imports:[{local:"BufferMemory",imported:"BufferMemory",source:"langchain/memory/index"},{local:"PlanetScaleChatMessageHistory",imported:"PlanetScaleChatMessageHistory",source:"@langchain/community/stores/message/planetscale"},{local:"ChatOpenAI",imported:"ChatOpenAI",source:"@langchain/openai"},{local:"ConversationChain",imported:"ConversationChain",source:"langchain/chains"}]}}}]);
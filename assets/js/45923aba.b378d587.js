"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6636],{12130:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var o=e(74848),s=e(28453),i=e(78847);const a={},r="JSON Agent Toolkit",l={id:"integrations/toolkits/json",title:"JSON Agent Toolkit",description:"This example shows how to load and use an agent with a JSON toolkit.",source:"@site/docs/integrations/toolkits/json.mdx",sourceDirName:"integrations/toolkits",slug:"/integrations/toolkits/json",permalink:"/docs/integrations/toolkits/json",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/toolkits/json.mdx",tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Connery Toolkit",permalink:"/docs/integrations/toolkits/connery"},next:{title:"OpenAPI Agent Toolkit",permalink:"/docs/integrations/toolkits/openapi"}},c={},p=[...i.toc];function d(n){const t={code:"code",h1:"h1",p:"p",pre:"pre",...(0,s.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"json-agent-toolkit",children:"JSON Agent Toolkit"}),"\n",(0,o.jsx)(t.p,{children:"This example shows how to load and use an agent with a JSON toolkit."}),"\n","\n",(0,o.jsx)(i.default,{}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai\n"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:'import * as fs from "fs";\nimport * as yaml from "js-yaml";\nimport { OpenAI } from "@langchain/openai";\nimport { JsonSpec, JsonObject } from "langchain/tools";\nimport { JsonToolkit, createJsonAgent } from "langchain/agents";\n\nexport const run = async () => {\n  let data: JsonObject;\n  try {\n    const yamlFile = fs.readFileSync("openai_openapi.yaml", "utf8");\n    data = yaml.load(yamlFile) as JsonObject;\n    if (!data) {\n      throw new Error("Failed to load OpenAPI spec");\n    }\n  } catch (e) {\n    console.error(e);\n    return;\n  }\n\n  const toolkit = new JsonToolkit(new JsonSpec(data));\n  const model = new OpenAI({ temperature: 0 });\n  const executor = createJsonAgent(model, toolkit);\n\n  const input = `What are the required parameters in the request body to the /completions endpoint?`;\n\n  console.log(`Executing with input "${input}"...`);\n\n  const result = await executor.invoke({ input });\n\n  console.log(`Got output ${result.output}`);\n\n  console.log(\n    `Got intermediate steps ${JSON.stringify(\n      result.intermediateSteps,\n      null,\n      2\n    )}`\n  );\n};\n'})})]})}function m(n={}){const{wrapper:t}={...(0,s.R)(),...n.components};return t?(0,o.jsx)(t,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}}}]);
(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8991],{58572:(e,r,t)=>{"use strict";t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>p,default:()=>v,frontMatter:()=>c,metadata:()=>h,toc:()=>d});var n=t(74848),s=t(28453),i=t(64428),a=t(5444),o=t.n(a);const c={},p="Vespa Retriever",h={id:"integrations/retrievers/vespa-retriever",title:"Vespa Retriever",description:"This shows how to use Vespa.ai as a LangChain retriever.",source:"@site/docs/integrations/retrievers/vespa-retriever.mdx",sourceDirName:"integrations/retrievers",slug:"/integrations/retrievers/vespa-retriever",permalink:"/docs/integrations/retrievers/vespa-retriever",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/retrievers/vespa-retriever.mdx",tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Vector Store",permalink:"/docs/integrations/retrievers/vectorstore"},next:{title:"Zep Retriever",permalink:"/docs/integrations/retrievers/zep-retriever"}},l={},d=[];function u(e){const r={a:"a",code:"code",h1:"h1",p:"p",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"vespa-retriever",children:"Vespa Retriever"}),"\n",(0,n.jsxs)(r.p,{children:["This shows how to use Vespa.ai as a LangChain retriever.\nVespa.ai is a platform for highly efficient structured text and vector search.\nPlease refer to ",(0,n.jsx)(r.a,{href:"https://vespa.ai",children:"Vespa.ai"})," for more information."]}),"\n",(0,n.jsx)(r.p,{children:"The following sets up a retriever that fetches results from Vespa's documentation search:"}),"\n","\n",(0,n.jsx)(i.A,{language:"typescript",children:o()}),"\n",(0,n.jsxs)(r.p,{children:["Here, up to 5 results are retrieved from the ",(0,n.jsx)(r.code,{children:"content"})," field in the ",(0,n.jsx)(r.code,{children:"paragraph"})," document type,\nusing ",(0,n.jsx)(r.code,{children:"documentation"})," as the ranking method. The ",(0,n.jsx)(r.code,{children:"userQuery()"})," is replaced with the actual query\npassed from LangChain."]}),"\n",(0,n.jsxs)(r.p,{children:["Please refer to the ",(0,n.jsx)(r.a,{href:"https://pyvespa.readthedocs.io/en/latest/getting-started-pyvespa.html#Query",children:"pyvespa documentation"}),"\nfor more information."]}),"\n",(0,n.jsxs)(r.p,{children:["The URL is the endpoint of the Vespa application.\nYou can connect to any Vespa endpoint, either a remote service or a local instance using Docker.\nHowever, most Vespa Cloud instances are protected with mTLS.\nIf this is your case, you can, for instance set up a ",(0,n.jsx)(r.a,{href:"https://cloud.vespa.ai/en/security/cloudflare-workers",children:"CloudFlare Worker"}),"\nthat contains the necessary credentials to connect to the instance."]}),"\n",(0,n.jsx)(r.p,{children:"Now you can return the results and continue using them in LangChain."})]})}function v(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},5444:e=>{e.exports={content:'import { VespaRetriever } from "@langchain/community/retrievers/vespa";\n\nexport const run = async () => {\n  const url = "https://doc-search.vespa.oath.cloud";\n  const query_body = {\n    yql: "select content from paragraph where userQuery()",\n    hits: 5,\n    ranking: "documentation",\n    locale: "en-us",\n  };\n  const content_field = "content";\n\n  const retriever = new VespaRetriever({\n    url,\n    auth: false,\n    query_body,\n    content_field,\n  });\n\n  const result = await retriever.invoke("what is vespa?");\n  console.log(result);\n};\n',imports:[{local:"VespaRetriever",imported:"VespaRetriever",source:"@langchain/community/retrievers/vespa"}]}}}]);
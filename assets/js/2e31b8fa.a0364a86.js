(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5461],{18217:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>d,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var a=t(74848),s=t(28453),r=t(64428),i=t(39420),c=t.n(i);const o={hide_table_of_contents:!0,sidebar_class_name:"node-only"},d="Couchbase",l={id:"integrations/vectorstores/couchbase",title:"Couchbase",description:"Couchbase is an award-winning distributed NoSQL cloud database that delivers unmatched versatility, performance, scalability, and financial value for all of your cloud, mobile,",source:"@site/docs/integrations/vectorstores/couchbase.mdx",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/couchbase",permalink:"/docs/integrations/vectorstores/couchbase",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/vectorstores/couchbase.mdx",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0,sidebar_class_name:"node-only"},sidebar:"integrations",previous:{title:"Convex",permalink:"/docs/integrations/vectorstores/convex"},next:{title:"Elasticsearch",permalink:"/docs/integrations/vectorstores/elasticsearch"}},h={},u=[{value:"Installation",id:"installation",level:2},{value:"Create Couchbase Connection Object",id:"create-couchbase-connection-object",level:2},{value:"Create the Search Index",id:"create-the-search-index",level:2},{value:"How to Import an Index to the Full Text Search service?",id:"how-to-import-an-index-to-the-full-text-search-service",level:3},{value:"Index Definition",id:"index-definition",level:3},{value:"Create Vector Store",id:"create-vector-store",level:2},{value:"Basic Vector Search Example",id:"basic-vector-search-example",level:2},{value:"Specifying Fields to Return",id:"specifying-fields-to-return",level:2},{value:"Hybrid Search",id:"hybrid-search",level:2},{value:"Create Diverse Metadata for Hybrid Search",id:"create-diverse-metadata-for-hybrid-search",level:3},{value:"Example: Search by Exact Value",id:"example-search-by-exact-value",level:3},{value:"Example: Search by Partial Match",id:"example-search-by-partial-match",level:3},{value:"Example: Search by Date Range Query",id:"example-search-by-date-range-query",level:3},{value:"Example: Search by Numeric Range Query",id:"example-search-by-numeric-range-query",level:3},{value:"Example: Combining Multiple Search Conditions",id:"example-combining-multiple-search-conditions",level:3},{value:"Other Queries",id:"other-queries",level:3},{value:"Question: Should I create the Search index before creating the CouchbaseVectorStore object?",id:"question-should-i-create-the-search-index-before-creating-the-couchbasevectorstore-object",level:2},{value:"Question: I am not seeing all the fields that I specified in my search results.",id:"question-i-am-not-seeing-all-the-fields-that-i-specified-in-my-search-results",level:2},{value:"Question: I am unable to see the metadata object in my search results.",id:"question-i-am-unable-to-see-the-metadata-object-in-my-search-results",level:2}];function m(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"couchbase",children:"Couchbase"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"http://couchbase.com/",children:"Couchbase"})," is an award-winning distributed NoSQL cloud database that delivers unmatched versatility, performance, scalability, and financial value for all of your cloud, mobile,\nAI, and edge computing applications. Couchbase embraces AI with coding assistance for developers and vector search for their applications."]}),"\n",(0,a.jsxs)(n.p,{children:["Vector Search is a part of the ",(0,a.jsx)(n.a,{href:"https://docs.couchbase.com/server/current/learn/services-and-indexes/services/search-service.html",children:"Full Text Search Service"})," (Search Service) in Couchbase."]}),"\n",(0,a.jsxs)(n.p,{children:["This tutorial explains how to use Vector Search in Couchbase. You can work with both ",(0,a.jsx)(n.a,{href:"https://www.couchbase.com/products/capella/",children:"Couchbase Capella"})," and your self-managed Couchbase Server."]}),"\n",(0,a.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,a.jsx)(n.p,{children:"You will need couchbase and langchain community to use couchbase vector store. For this tutorial, we will use OpenAI embeddings"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install couchbase @langchain/openai @langchain/community\n"})}),"\n",(0,a.jsx)(n.h2,{id:"create-couchbase-connection-object",children:"Create Couchbase Connection Object"}),"\n",(0,a.jsx)(n.p,{children:"We create a connection to the Couchbase cluster initially and then pass the cluster object to the Vector Store. Here, we are connecting using the username and password.\nYou can also connect using any other supported way to your cluster."}),"\n",(0,a.jsxs)(n.p,{children:["For more information on connecting to the Couchbase cluster, please check the ",(0,a.jsx)(n.a,{href:"https://docs.couchbase.com/nodejs-sdk/current/hello-world/start-using-sdk.html#connect",children:"Node SDK documentation"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'import { Cluster } from "couchbase";\n\nconst connectionString = "couchbase://localhost"; // or couchbases://localhost if you are using TLS\nconst dbUsername = "Administrator"; // valid database user with read access to the bucket being queried\nconst dbPassword = "Password"; // password for the database user\n\nconst couchbaseClient = await Cluster.connect(connectionString, {\n  username: dbUsername,\n  password: dbPassword,\n  configProfile: "wanDevelopment",\n});\n'})}),"\n",(0,a.jsx)(n.h2,{id:"create-the-search-index",children:"Create the Search Index"}),"\n",(0,a.jsx)(n.p,{children:"Currently, the Search index needs to be created from the Couchbase Capella or Server UI or using the REST interface."}),"\n",(0,a.jsx)(n.p,{children:"For this example, let us use the Import Index feature on the Search Service on the UI."}),"\n",(0,a.jsxs)(n.p,{children:["Let us define a Search index with the name ",(0,a.jsx)(n.code,{children:"vector-index"})," on the testing bucket.\nWe are defining an index on the ",(0,a.jsx)(n.code,{children:"testing"})," bucket's ",(0,a.jsx)(n.code,{children:"_default"})," scope on the ",(0,a.jsx)(n.code,{children:"_default"})," collection with the vector field set to ",(0,a.jsx)(n.code,{children:"embedding"})," with 1536 dimensions and the text field set to ",(0,a.jsx)(n.code,{children:"text"}),".\nWe are also indexing and storing all the fields under ",(0,a.jsx)(n.code,{children:"metadata"})," in the document as a dynamic mapping to account for varying document structures. The similarity metric is set to ",(0,a.jsx)(n.code,{children:"dot_product"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"how-to-import-an-index-to-the-full-text-search-service",children:"How to Import an Index to the Full Text Search service?"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://docs.couchbase.com/server/current/search/import-search-index.html",children:"Couchbase Server"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Click on Search -> Add Index -> Import"}),"\n",(0,a.jsx)(n.li,{children:"Copy the following Index definition in the Import screen"}),"\n",(0,a.jsx)(n.li,{children:"Click on Create Index to create the index."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://docs.couchbase.com/cloud/search/import-search-index.html",children:"Couchbase Capella"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Copy the following index definition to a new file ",(0,a.jsx)(n.code,{children:"index.json"})]}),"\n",(0,a.jsx)(n.li,{children:"Import the file in Capella using the instructions in the documentation."}),"\n",(0,a.jsx)(n.li,{children:"Click on Create Index to create the index."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"index-definition",children:"Index Definition"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "name": "vector-index",\n  "type": "fulltext-index",\n  "params": {\n    "doc_config": {\n      "docid_prefix_delim": "",\n      "docid_regexp": "",\n      "mode": "type_field",\n      "type_field": "type"\n    },\n    "mapping": {\n      "default_analyzer": "standard",\n      "default_datetime_parser": "dateTimeOptional",\n      "default_field": "_all",\n      "default_mapping": {\n        "dynamic": true,\n        "enabled": true,\n        "properties": {\n          "metadata": {\n            "dynamic": true,\n            "enabled": true\n          },\n          "embedding": {\n            "enabled": true,\n            "dynamic": false,\n            "fields": [\n              {\n                "dims": 1536,\n                "index": true,\n                "name": "embedding",\n                "similarity": "dot_product",\n                "type": "vector",\n                "vector_index_optimized_for": "recall"\n              }\n            ]\n          },\n          "text": {\n            "enabled": true,\n            "dynamic": false,\n            "fields": [\n              {\n                "index": true,\n                "name": "text",\n                "store": true,\n                "type": "text"\n              }\n            ]\n          }\n        }\n      },\n      "default_type": "_default",\n      "docvalues_dynamic": false,\n      "index_dynamic": true,\n      "store_dynamic": true,\n      "type_field": "_type"\n    },\n    "store": {\n      "indexType": "scorch",\n      "segmentVersion": 16\n    }\n  },\n  "sourceType": "gocbcore",\n  "sourceName": "testing",\n  "sourceParams": {},\n  "planParams": {\n    "maxPartitionsPerPIndex": 103,\n    "indexPartitions": 10,\n    "numReplicas": 0\n  }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"For more details on how to create a search index with support for Vector fields, please refer to the documentation:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://docs.couchbase.com/cloud/search/create-search-indexes.html",children:"Couchbase Capella"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://docs.couchbase.com/server/current/search/create-search-indexes.html",children:"Couchbase Server"})}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"For using this vector store, CouchbaseVectorStoreArgs needs to be configured.\ntextKey and embeddingKey are optional fields, required if you want to use specific keys"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'const couchbaseConfig: CouchbaseVectorStoreArgs = {\n  cluster: couchbaseClient,\n  bucketName: "testing",\n  scopeName: "_default",\n  collectionName: "_default",\n  indexName: "vector-index",\n  textKey: "text",\n  embeddingKey: "embedding",\n};\n'})}),"\n",(0,a.jsx)(n.h2,{id:"create-vector-store",children:"Create Vector Store"}),"\n",(0,a.jsx)(n.p,{children:"We create the vector store object with the cluster information and the search index name."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const store = await CouchbaseVectorStore.initialize(\n  embeddings, // embeddings object to create embeddings from text\n  couchbaseConfig\n);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"basic-vector-search-example",children:"Basic Vector Search Example"}),"\n",(0,a.jsx)(n.p,{children:'The following example showcases how to use couchbase vector search and perform similarity search.\nFor this example, we are going to load the "state_of_the_union.txt" file via the TextLoader,\nchunk the text into 500 character chunks with no overlaps and index all these chunks into Couchbase.'}),"\n",(0,a.jsx)(n.p,{children:'After the data is indexed, we perform a simple query to find the top 4 chunks that are similar to the\nquery "What did president say about Ketanji Brown Jackson".\nAt the emd, also shows how to get similarity score'}),"\n","\n",(0,a.jsx)(r.A,{language:"typescript",children:c()}),"\n",(0,a.jsx)(n.h2,{id:"specifying-fields-to-return",children:"Specifying Fields to Return"}),"\n",(0,a.jsxs)(n.p,{children:["You can specify the fields to return from the document using ",(0,a.jsx)(n.code,{children:"fields"})," parameter in the filter during searches.\nThese fields are returned as part of the ",(0,a.jsx)(n.code,{children:"metadata"})," object. You can fetch any field that is stored in the index.\nThe ",(0,a.jsx)(n.code,{children:"textKey"})," of the document is returned as part of the document's ",(0,a.jsx)(n.code,{children:"pageContent"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"If you do not specify any fields to be fetched, all the fields stored in the index are returned."}),"\n",(0,a.jsxs)(n.p,{children:["If you want to fetch one of the fields in the metadata, you need to specify it using ",(0,a.jsx)(n.code,{children:"."}),"\nFor example, to fetch the ",(0,a.jsx)(n.code,{children:"source"})," field in the metadata, you need to use ",(0,a.jsx)(n.code,{children:"metadata.source"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'const result = await store.similaritySearch(query, 1, {\n  fields: ["metadata.source"],\n});\nconsole.log(result[0]);\n'})}),"\n",(0,a.jsx)(n.h2,{id:"hybrid-search",children:"Hybrid Search"}),"\n",(0,a.jsxs)(n.p,{children:["Couchbase allows you to do hybrid searches by combining vector search results with searches on non-vector fields of the document like the ",(0,a.jsx)(n.code,{children:"metadata"})," object."]}),"\n",(0,a.jsx)(n.p,{children:"The results will be based on the combination of the results from both vector search and the searches supported by full text search service.\nThe scores of each of the component searches are added up to get the total score of the result."}),"\n",(0,a.jsxs)(n.p,{children:["To perform hybrid searches, there is an optional key, ",(0,a.jsx)(n.code,{children:"searchOptions"})," in ",(0,a.jsx)(n.code,{children:"fields"})," parameter that can be passed to all the similarity searches.",(0,a.jsx)(n.br,{}),"\n","The different search/query possibilities for the ",(0,a.jsx)(n.code,{children:"searchOptions"})," can be found ",(0,a.jsx)(n.a,{href:"https://docs.couchbase.com/server/current/search/search-request-params.html#query-object",children:"here"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"create-diverse-metadata-for-hybrid-search",children:"Create Diverse Metadata for Hybrid Search"}),"\n",(0,a.jsxs)(n.p,{children:["In order to simulate hybrid search, let us create some random metadata from the existing documents.\nWe uniformly add three fields to the metadata, ",(0,a.jsx)(n.code,{children:"date"})," between 2010 & 2020, ",(0,a.jsx)(n.code,{children:"rating"})," between 1 & 5 and ",(0,a.jsx)(n.code,{children:"author"})," set to either John Doe or Jane Doe.\nWe will also declare few sample queries."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'for (let i = 0; i < docs.length; i += 1) {\n  docs[i].metadata.date = `${2010 + (i % 10)}-01-01`;\n  docs[i].metadata.rating = 1 + (i % 5);\n  docs[i].metadata.author = ["John Doe", "Jane Doe"][i % 2];\n}\n\nconst store = await CouchbaseVectorStore.fromDocuments(\n  docs,\n  embeddings,\n  couchbaseConfig\n);\n\nconst query = "What did the president say about Ketanji Brown Jackson";\nconst independenceQuery = "Any mention about independence?";\n'})}),"\n",(0,a.jsx)(n.h3,{id:"example-search-by-exact-value",children:"Example: Search by Exact Value"}),"\n",(0,a.jsxs)(n.p,{children:["We can search for exact matches on a textual field like the author in the ",(0,a.jsx)(n.code,{children:"metadata"})," object."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'const exactValueResult = await store.similaritySearch(query, 4, {\n  fields: ["metadata.author"],\n  searchOptions: {\n    query: { field: "metadata.author", match: "John Doe" },\n  },\n});\nconsole.log(exactValueResult[0]);\n'})}),"\n",(0,a.jsx)(n.h3,{id:"example-search-by-partial-match",children:"Example: Search by Partial Match"}),"\n",(0,a.jsx)(n.p,{children:"We can search for partial matches by specifying a fuzziness for the search. This is useful when you want to search for slight variations or misspellings of a search query."}),"\n",(0,a.jsx)(n.p,{children:'Here, "Johny" is close (fuzziness of 1) to "John Doe".'}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'const partialMatchResult = await store.similaritySearch(query, 4, {\n  fields: ["metadata.author"],\n  searchOptions: {\n    query: { field: "metadata.author", match: "Johny", fuzziness: 1 },\n  },\n});\nconsole.log(partialMatchResult[0]);\n'})}),"\n",(0,a.jsx)(n.h3,{id:"example-search-by-date-range-query",children:"Example: Search by Date Range Query"}),"\n",(0,a.jsxs)(n.p,{children:["We can search for documents that are within a date range query on a date field like ",(0,a.jsx)(n.code,{children:"metadata.date"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'const dateRangeResult = await store.similaritySearch(independenceQuery, 4, {\n  fields: ["metadata.date", "metadata.author"],\n  searchOptions: {\n    query: {\n      start: "2016-12-31",\n      end: "2017-01-02",\n      inclusiveStart: true,\n      inclusiveEnd: false,\n      field: "metadata.date",\n    },\n  },\n});\nconsole.log(dateRangeResult[0]);\n'})}),"\n",(0,a.jsx)(n.h3,{id:"example-search-by-numeric-range-query",children:"Example: Search by Numeric Range Query"}),"\n",(0,a.jsxs)(n.p,{children:["We can search for documents that are within a range for a numeric field like ",(0,a.jsx)(n.code,{children:"metadata.rating"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'const ratingRangeResult = await store.similaritySearch(independenceQuery, 4, {\n  fields: ["metadata.rating"],\n  searchOptions: {\n    query: {\n      min: 3,\n      max: 5,\n      inclusiveMin: false,\n      inclusiveMax: true,\n      field: "metadata.rating",\n    },\n  },\n});\nconsole.log(ratingRangeResult[0]);\n'})}),"\n",(0,a.jsx)(n.h3,{id:"example-combining-multiple-search-conditions",children:"Example: Combining Multiple Search Conditions"}),"\n",(0,a.jsx)(n.p,{children:"Different queries can by combined using AND (conjuncts) or OR (disjuncts) operators."}),"\n",(0,a.jsx)(n.p,{children:"In this example, we are checking for documents with a rating between 3 & 4 and dated between 2015 & 2018."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'const multipleConditionsResult = await store.similaritySearch(texts[0], 4, {\n  fields: ["metadata.rating", "metadata.date"],\n  searchOptions: {\n    query: {\n      conjuncts: [\n        { min: 3, max: 4, inclusive_max: true, field: "metadata.rating" },\n        { start: "2016-12-31", end: "2017-01-02", field: "metadata.date" },\n      ],\n    },\n  },\n});\nconsole.log(multipleConditionsResult[0]);\n'})}),"\n",(0,a.jsx)(n.h3,{id:"other-queries",children:"Other Queries"}),"\n",(0,a.jsxs)(n.p,{children:["Similarly, you can use any of the supported Query methods like Geo Distance, Polygon Search, Wildcard, Regular Expressions, etc in the ",(0,a.jsx)(n.code,{children:"searchOptions"})," Key of ",(0,a.jsx)(n.code,{children:"filter"})," parameter.\nPlease refer to the documentation for more details on the available query methods and their syntax."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://docs.couchbase.com/cloud/search/search-request-params.html#query-object",children:"Couchbase Capella"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://docs.couchbase.com/server/current/search/search-request-params.html#query-object",children:"Couchbase Server"})}),"\n"]}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.h1,{id:"frequently-asked-questions",children:"Frequently Asked Questions"}),"\n",(0,a.jsx)(n.h2,{id:"question-should-i-create-the-search-index-before-creating-the-couchbasevectorstore-object",children:"Question: Should I create the Search index before creating the CouchbaseVectorStore object?"}),"\n",(0,a.jsxs)(n.p,{children:["Yes, currently you need to create the Search index before creating the ",(0,a.jsx)(n.code,{children:"CouchbaseVectorStore"})," object."]}),"\n",(0,a.jsx)(n.h2,{id:"question-i-am-not-seeing-all-the-fields-that-i-specified-in-my-search-results",children:"Question: I am not seeing all the fields that I specified in my search results."}),"\n",(0,a.jsx)(n.p,{children:"In Couchbase, we can only return the fields stored in the Search index. Please ensure that the field that you are trying to access in the search results is part of the Search index."}),"\n",(0,a.jsx)(n.p,{children:"One way to handle this is to index and store a document's fields dynamically in the index."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:'In Capella, you need to go to "Advanced Mode" then under the chevron "General Settings" you can check "[X] Store Dynamic Fields" or "[X] Index Dynamic Fields"'}),"\n",(0,a.jsx)(n.li,{children:'In Couchbase Server, in the Index Editor (not Quick Editor) under the chevron "Advanced" you can check "[X] Store Dynamic Fields" or "[X] Index Dynamic Fields"'}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Note that these options will increase the size of the index."}),"\n",(0,a.jsxs)(n.p,{children:["For more details on dynamic mappings, please refer to the ",(0,a.jsx)(n.a,{href:"https://docs.couchbase.com/cloud/search/customize-index.html",children:"documentation"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"question-i-am-unable-to-see-the-metadata-object-in-my-search-results",children:"Question: I am unable to see the metadata object in my search results."}),"\n",(0,a.jsxs)(n.p,{children:["This is most likely due to the ",(0,a.jsx)(n.code,{children:"metadata"})," field in the document not being indexed and/or stored by the Couchbase Search index. In order to index the ",(0,a.jsx)(n.code,{children:"metadata"})," field in the document, you need to add it to the index as a child mapping."]}),"\n",(0,a.jsxs)(n.p,{children:["If you select to map all the fields in the mapping, you will be able to search by all metadata fields. Alternatively, to optimize the index, you can select the specific fields inside ",(0,a.jsx)(n.code,{children:"metadata"})," object to be indexed.\nYou can refer to the ",(0,a.jsx)(n.a,{href:"https://docs.couchbase.com/cloud/search/customize-index.html",children:"docs"})," to learn more about indexing child mappings."]}),"\n",(0,a.jsx)(n.p,{children:"To create Child Mappings, you can refer to the following docs -"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://docs.couchbase.com/cloud/search/create-child-mapping.html",children:"Couchbase Capella"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://docs.couchbase.com/server/current/fts/fts-creating-index-from-UI-classic-editor-dynamic.html",children:"Couchbase Server"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},39420:e=>{e.exports={content:'import { OpenAIEmbeddings } from "@langchain/openai";\nimport {\n  CouchbaseVectorStoreArgs,\n  CouchbaseVectorStore,\n} from "@langchain/community/vectorstores/couchbase";\nimport { Cluster } from "couchbase";\nimport { TextLoader } from "langchain/document_loaders/fs/text";\nimport { CharacterTextSplitter } from "@langchain/textsplitters";\n\nconst connectionString =\n  process.env.COUCHBASE_DB_CONN_STR ?? "couchbase://localhost";\nconst databaseUsername = process.env.COUCHBASE_DB_USERNAME ?? "Administrator";\nconst databasePassword = process.env.COUCHBASE_DB_PASSWORD ?? "Password";\n\n// Load documents from file\nconst loader = new TextLoader("./state_of_the_union.txt");\nconst rawDocuments = await loader.load();\nconst splitter = new CharacterTextSplitter({\n  chunkSize: 500,\n  chunkOverlap: 0,\n});\nconst docs = await splitter.splitDocuments(rawDocuments);\n\nconst couchbaseClient = await Cluster.connect(connectionString, {\n  username: databaseUsername,\n  password: databasePassword,\n  configProfile: "wanDevelopment",\n});\n\n// Open AI API Key is required to use OpenAIEmbeddings, some other embeddings may also be used\nconst embeddings = new OpenAIEmbeddings({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\nconst couchbaseConfig: CouchbaseVectorStoreArgs = {\n  cluster: couchbaseClient,\n  bucketName: "testing",\n  scopeName: "_default",\n  collectionName: "_default",\n  indexName: "vector-index",\n  textKey: "text",\n  embeddingKey: "embedding",\n};\n\nconst store = await CouchbaseVectorStore.fromDocuments(\n  docs,\n  embeddings,\n  couchbaseConfig\n);\n\nconst query = "What did president say about Ketanji Brown Jackson";\n\nconst resultsSimilaritySearch = await store.similaritySearch(query);\nconsole.log("resulting documents: ", resultsSimilaritySearch[0]);\n\n// Similarity Search With Score\nconst resultsSimilaritySearchWithScore = await store.similaritySearchWithScore(\n  query,\n  1\n);\nconsole.log("resulting documents: ", resultsSimilaritySearchWithScore[0][0]);\nconsole.log("resulting scores: ", resultsSimilaritySearchWithScore[0][1]);\n\nconst result = await store.similaritySearch(query, 1, {\n  fields: ["metadata.source"],\n});\nconsole.log(result[0]);\n',imports:[{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"},{local:"CouchbaseVectorStoreArgs",imported:"CouchbaseVectorStoreArgs",source:"@langchain/community/vectorstores/couchbase"},{local:"CouchbaseVectorStore",imported:"CouchbaseVectorStore",source:"@langchain/community/vectorstores/couchbase"},{local:"TextLoader",imported:"TextLoader",source:"langchain/document_loaders/fs/text"},{local:"CharacterTextSplitter",imported:"CharacterTextSplitter",source:"@langchain/textsplitters"}]}}}]);
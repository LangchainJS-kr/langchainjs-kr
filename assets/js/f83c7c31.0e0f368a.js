"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8929],{40093:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var s=a(74848),o=a(28453),n=(a(64428),a(78847));const r={hide_table_of_contents:!0},i="IPFS Datastore Chat Memory",c={id:"integrations/chat_memory/ipfs_datastore",title:"IPFS Datastore Chat Memory",description:"For a storage backend you can use the IPFS Datastore Chat Memory to wrap an IPFS Datastore allowing you to use any IPFS compatible datastore.",source:"@site/docs/integrations/chat_memory/ipfs_datastore.mdx",sourceDirName:"integrations/chat_memory",slug:"/integrations/chat_memory/ipfs_datastore",permalink:"/docs/integrations/chat_memory/ipfs_datastore",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/chat_memory/ipfs_datastore.mdx",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0}},l={},d=[{value:"Setup",id:"setup",level:2},...n.toc,{value:"Usage",id:"usage",level:2}];function h(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"ipfs-datastore-chat-memory",children:"IPFS Datastore Chat Memory"}),"\n",(0,s.jsx)(t.p,{children:"For a storage backend you can use the IPFS Datastore Chat Memory to wrap an IPFS Datastore allowing you to use any IPFS compatible datastore."}),"\n",(0,s.jsx)(t.h2,{id:"setup",children:"Setup"}),"\n",(0,s.jsx)(t.p,{children:"First, install the integration dependencies:"}),"\n","\n",(0,s.jsx)(n.default,{}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install cborg interface-datastore it-all @langchain/community\n"})}),"\n",(0,s.jsx)(t.p,{children:"Now you can install and use an IPFS Datastore of your choice. Here are some options:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://github.com/ipfs/js-stores/blob/main/packages/datastore-core",children:"datastore-core"})," Datastore in-memory implementation."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://github.com/ipfs/js-stores/blob/main/packages/datastore-fs",children:"datastore-fs"})," Datastore implementation with file system backend."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://github.com/ipfs/js-stores/blob/main/packages/datastore-idb",children:"datastore-idb"})," Datastore implementation with IndexedDB backend."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://github.com/ipfs/js-stores/blob/main/packages/datastore-level",children:"datastore-level"})," Datastore implementation with level(up|down) backend"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://github.com/ipfs/js-stores/blob/main/packages/datastore-s3",children:"datastore-s3"})," Datastore implementation backed by s3."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'// Replace FsDatastore with the IPFS Datastore of your choice.\nimport { FsDatastore } from "datastore-fs";\nimport { IPFSDatastoreChatMessageHistory } from "@langchain/community/stores/message/ipfs_datastore";\n\nconst datastore = new FsDatastore("path/to/store");\nconst sessionId = "my-session";\n\nconst history = new IPFSDatastoreChatMessageHistory({ datastore, sessionId });\n'})})]})}function m(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);
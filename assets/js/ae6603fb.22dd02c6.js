"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9050],{46646:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var s=n(74848),a=n(28453);const r={sidebar_class_name:"hidden",title:"How to split by character"},c=void 0,o={id:"how_to/character_text_splitter",title:"How to split by character",description:"This guide assumes familiarity with the following concepts:",source:"@site/docs/how_to/character_text_splitter.mdx",sourceDirName:"how_to",slug:"/how_to/character_text_splitter",permalink:"/docs/how_to/character_text_splitter",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/how_to/character_text_splitter.mdx",tags:[],version:"current",frontMatter:{sidebar_class_name:"hidden",title:"How to split by character"},sidebar:"tutorialSidebar",previous:{title:"How to pass callbacks in at runtime",permalink:"/docs/how_to/callbacks_runtime"},next:{title:"How to manage memory",permalink:"/docs/how_to/chatbots_memory"}},i={},l=[{value:"Next steps",id:"next-steps",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.admonition,{title:"Prerequisites",type:"info",children:[(0,s.jsx)(t.p,{children:"This guide assumes familiarity with the following concepts:"}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"../../docs/concepts#text-splitters",children:"Text splitters"})}),"\n"]})]}),"\n",(0,s.jsxs)(t.p,{children:["This is the simplest method for splitting text. This splits based on a\ngiven character sequence, which defaults to ",(0,s.jsx)(t.code,{children:'"\\n\\n"'}),". Chunk length is\nmeasured by number of characters."]}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"How the text is split: by single character separator."}),"\n",(0,s.jsx)(t.li,{children:"How the chunk size is measured: by number of characters."}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["To obtain the string content directly, use ",(0,s.jsx)(t.code,{children:".splitText()"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["To create LangChain\n",(0,s.jsx)(t.a,{href:"https://v02.api.js.langchain.com/classes/langchain_core_documents.Document.html",children:"Document"}),"\nobjects (e.g., for use in downstream tasks), use ",(0,s.jsx)(t.code,{children:".createDocuments()"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'import { CharacterTextSplitter } from "@langchain/textsplitters";\nimport * as fs from "node:fs";\n\n// Load an example document\nconst rawData = await fs.readFileSync(\n  "../../../../examples/state_of_the_union.txt"\n);\nconst stateOfTheUnion = rawData.toString();\n\nconst textSplitter = new CharacterTextSplitter({\n  separator: "\\n\\n",\n  chunkSize: 1000,\n  chunkOverlap: 200,\n});\nconst texts = await textSplitter.createDocuments([stateOfTheUnion]);\nconsole.log(texts[0]);\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-text",children:'Document {\n  pageContent: "Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and th"... 839 more characters,\n  metadata: { loc: { lines: { from: 1, to: 17 } } }\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"You can also propagate metadata associated with each document to the\noutput chunks:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"const metadatas = [{ document: 1 }, { document: 2 }];\n\nconst documents = await textSplitter.createDocuments(\n  [stateOfTheUnion, stateOfTheUnion],\n  metadatas\n);\n\nconsole.log(documents[0]);\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-text",children:'Document {\n  pageContent: "Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and th"... 839 more characters,\n  metadata: { document: 1, loc: { lines: { from: 1, to: 17 } } }\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["To obtain the string content directly, use ",(0,s.jsx)(t.code,{children:".splitText()"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"const chunks = await textSplitter.splitText(stateOfTheUnion);\n\nchunks[0];\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-text",children:'"Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and th"... 839 more characters\n'})}),"\n",(0,s.jsx)(t.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,s.jsx)(t.p,{children:"You\u2019ve now learned a method for splitting text by character."}),"\n",(0,s.jsxs)(t.p,{children:["Next, check out a ",(0,s.jsx)(t.a,{href:"../../docs/how_to/recursive_text_splitter",children:"more advanced way of splitting by\ncharacter"}),", or the ",(0,s.jsx)(t.a,{href:"../../docs/tutorials/rag",children:"full\ntutorial on retrieval-augmented generation"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);
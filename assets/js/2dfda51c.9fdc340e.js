(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7393],{89833:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>c,toc:()=>h});var s=t(74848),a=t(28453),o=t(64428),d=t(26766),i=t.n(d);const r={},l="PDF files",c={id:"integrations/document_loaders/file_loaders/pdf",title:"PDF files",description:"This example goes over how to load data from PDF files. By default, one document will be created for each page in the PDF file, you can change this behavior by setting the splitPages option to false.",source:"@site/docs/integrations/document_loaders/file_loaders/pdf.mdx",sourceDirName:"integrations/document_loaders/file_loaders",slug:"/integrations/document_loaders/file_loaders/pdf",permalink:"/docs/integrations/document_loaders/file_loaders/pdf",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/document_loaders/file_loaders/pdf.mdx",tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Open AI Whisper Audio",permalink:"/docs/integrations/document_loaders/file_loaders/openai_whisper_audio"},next:{title:"PPTX files",permalink:"/docs/integrations/document_loaders/file_loaders/pptx"}},p={},h=[{value:"Setup",id:"setup",level:2},{value:"Usage, one document per page",id:"usage-one-document-per-page",level:2},{value:"Usage, one document per file",id:"usage-one-document-per-file",level:2},{value:"Usage, custom <code>pdfjs</code> build",id:"usage-custom-pdfjs-build",level:2},{value:"Eliminating extra spaces",id:"eliminating-extra-spaces",level:2},{value:"Loading directories",id:"loading-directories",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"pdf-files",children:"PDF files"}),"\n",(0,s.jsxs)(n.p,{children:["This example goes over how to load data from PDF files. By default, one document will be created for each page in the PDF file, you can change this behavior by setting the ",(0,s.jsx)(n.code,{children:"splitPages"})," option to ",(0,s.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install pdf-parse\n"})}),"\n",(0,s.jsx)(n.h2,{id:"usage-one-document-per-page",children:"Usage, one document per page"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { PDFLoader } from "langchain/document_loaders/fs/pdf";\n\nconst loader = new PDFLoader("src/document_loaders/example_data/example.pdf");\n\nconst docs = await loader.load();\n'})}),"\n",(0,s.jsx)(n.h2,{id:"usage-one-document-per-file",children:"Usage, one document per file"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { PDFLoader } from "langchain/document_loaders/fs/pdf";\n\nconst loader = new PDFLoader("src/document_loaders/example_data/example.pdf", {\n  splitPages: false,\n});\n\nconst docs = await loader.load();\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"usage-custom-pdfjs-build",children:["Usage, custom ",(0,s.jsx)(n.code,{children:"pdfjs"})," build"]}),"\n",(0,s.jsxs)(n.p,{children:["By default we use the ",(0,s.jsx)(n.code,{children:"pdfjs"})," build bundled with ",(0,s.jsx)(n.code,{children:"pdf-parse"}),", which is compatible with most environments, including Node.js and modern browsers. If you want to use a more recent version of ",(0,s.jsx)(n.code,{children:"pdfjs-dist"})," or if you want to use a custom build of ",(0,s.jsx)(n.code,{children:"pdfjs-dist"}),", you can do so by providing a custom ",(0,s.jsx)(n.code,{children:"pdfjs"})," function that returns a promise that resolves to the ",(0,s.jsx)(n.code,{children:"PDFJS"})," object."]}),"\n",(0,s.jsxs)(n.p,{children:['In the following example we use the "legacy" (see ',(0,s.jsx)(n.a,{href:"https://github.com/mozilla/pdf.js/wiki/Frequently-Asked-Questions#which-browsersenvironments-are-supported",children:"pdfjs docs"}),") build of ",(0,s.jsx)(n.code,{children:"pdfjs-dist"}),", which includes several polyfills not included in the default build."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install pdfjs-dist\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { PDFLoader } from "langchain/document_loaders/fs/pdf";\n\nconst loader = new PDFLoader("src/document_loaders/example_data/example.pdf", {\n  // you may need to add `.then(m => m.default)` to the end of the import\n  pdfjs: () => import("pdfjs-dist/legacy/build/pdf.js"),\n});\n'})}),"\n",(0,s.jsx)(n.h2,{id:"eliminating-extra-spaces",children:"Eliminating extra spaces"}),"\n",(0,s.jsx)(n.p,{children:"PDFs come in many varieties, which makes reading them a challenge. The loader parses individual text elements and joins them together with a space by default, but\nif you are seeing excessive spaces, this may not be the desired behavior. In that case, you can override the separator with an empty string like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { PDFLoader } from "langchain/document_loaders/fs/pdf";\n\nconst loader = new PDFLoader("src/document_loaders/example_data/example.pdf", {\n  parsedItemSeparator: "",\n});\n\nconst docs = await loader.load();\n'})}),"\n",(0,s.jsx)(n.h2,{id:"loading-directories",children:"Loading directories"}),"\n","\n",(0,s.jsx)(o.A,{language:"typescript",children:i()})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},26766:e=>{e.exports={content:'import { DirectoryLoader } from "langchain/document_loaders/fs/directory";\nimport { PDFLoader } from "langchain/document_loaders/fs/pdf";\nimport { RecursiveCharacterTextSplitter } from "@langchain/textsplitters";\n\n/* Load all PDFs within the specified directory */\nconst directoryLoader = new DirectoryLoader(\n  "src/document_loaders/example_data/",\n  {\n    ".pdf": (path: string) => new PDFLoader(path),\n  }\n);\n\nconst docs = await directoryLoader.load();\n\nconsole.log({ docs });\n\n/* Additional steps : Split text into chunks with any TextSplitter. You can then use it as context or save it to memory afterwards. */\nconst textSplitter = new RecursiveCharacterTextSplitter({\n  chunkSize: 1000,\n  chunkOverlap: 200,\n});\n\nconst splitDocs = await textSplitter.splitDocuments(docs);\nconsole.log({ splitDocs });\n',imports:[{local:"DirectoryLoader",imported:"DirectoryLoader",source:"langchain/document_loaders/fs/directory"},{local:"PDFLoader",imported:"PDFLoader",source:"langchain/document_loaders/fs/pdf"},{local:"RecursiveCharacterTextSplitter",imported:"RecursiveCharacterTextSplitter",source:"@langchain/textsplitters"}]}}}]);
(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4013],{43273:(e,o,n)=>{"use strict";n.r(o),n.d(o,{assets:()=>f,contentTitle:()=>g,default:()=>y,frontMatter:()=>v,metadata:()=>w,toc:()=>x});var t=n(74848),r=n(28453),s=n(64428),a=n(78847),c=n(75336),i=n.n(c),l=n(62352),d=n.n(l),m=n(22920),h=n.n(m),u=n(71302),p=n.n(u);const v={},g="CloseVector",w={id:"integrations/vectorstores/closevector",title:"CloseVector",description:"available on both browser and Node.js",source:"@site/docs/integrations/vectorstores/closevector.mdx",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/closevector",permalink:"/docs/integrations/vectorstores/closevector",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/vectorstores/closevector.mdx",tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"ClickHouse",permalink:"/docs/integrations/vectorstores/clickhouse"},next:{title:"Cloudflare Vectorize",permalink:"/docs/integrations/vectorstores/cloudflare_vectorize"}},f={},x=[{value:"Setup",id:"setup",level:2},{value:"CloseVector Web",id:"closevector-web",level:3},{value:"CloseVector Node",id:"closevector-node",level:3},...a.toc,{value:"Usage",id:"usage",level:2},{value:"Create a new index from texts",id:"create-a-new-index-from-texts",level:3},{value:"Create a new index from a loader",id:"create-a-new-index-from-a-loader",level:3},{value:"Save an index to CloseVector CDN and load it again",id:"save-an-index-to-closevector-cdn-and-load-it-again",level:3},{value:"Save an index to file and load it again",id:"save-an-index-to-file-and-load-it-again",level:3}];function b(e){const o={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.h1,{id:"closevector",children:"CloseVector"}),"\n",(0,t.jsx)(o.admonition,{title:"Compatibility",type:"tip",children:(0,t.jsx)(o.p,{children:"available on both browser and Node.js"})}),"\n",(0,t.jsxs)(o.p,{children:[(0,t.jsx)(o.a,{href:"https://closevector.getmegaportal.com/",children:"CloseVector"})," is a cross-platform vector database that can run in both the browser and Node.js. For example, you can create your index on Node.js and then load/query it on browser. For more information, please visit ",(0,t.jsx)(o.a,{href:"https://closevector-docs.getmegaportal.com/",children:"CloseVector Docs"}),"."]}),"\n",(0,t.jsx)(o.h2,{id:"setup",children:"Setup"}),"\n",(0,t.jsx)(o.h3,{id:"closevector-web",children:"CloseVector Web"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install -S closevector-web\n"})}),"\n",(0,t.jsx)(o.h3,{id:"closevector-node",children:"CloseVector Node"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install -S closevector-node\n"})}),"\n","\n",(0,t.jsx)(a.default,{}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai @langchain/community\n"})}),"\n",(0,t.jsx)(o.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(o.h3,{id:"create-a-new-index-from-texts",children:"Create a new index from texts"}),"\n","\n",(0,t.jsx)(s.A,{language:"typescript",children:i()}),"\n",(0,t.jsx)(o.h3,{id:"create-a-new-index-from-a-loader",children:"Create a new index from a loader"}),"\n","\n",(0,t.jsx)(s.A,{language:"typescript",children:d()}),"\n",(0,t.jsx)(o.h3,{id:"save-an-index-to-closevector-cdn-and-load-it-again",children:"Save an index to CloseVector CDN and load it again"}),"\n",(0,t.jsxs)(o.p,{children:["CloseVector supports saving/loading indexes to/from cloud. To use this feature, you need to create an account on ",(0,t.jsx)(o.a,{href:"https://closevector.getmegaportal.com/",children:"CloseVector"}),". Please read ",(0,t.jsx)(o.a,{href:"https://closevector-docs.getmegaportal.com/",children:"CloseVector Docs"})," and generate your API key first by ",(0,t.jsx)(o.a,{href:"https://closevector.getmegaportal.com/",children:"loging in"}),"."]}),"\n","\n",(0,t.jsx)(s.A,{language:"typescript",children:h()}),"\n",(0,t.jsx)(o.h3,{id:"save-an-index-to-file-and-load-it-again",children:"Save an index to file and load it again"}),"\n","\n",(0,t.jsx)(s.A,{language:"typescript",children:p()})]})}function y(e={}){const{wrapper:o}={...(0,r.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(b,{...e})}):b(e)}},75336:e=>{e.exports={content:'// If you want to import the browser version, use the following line instead:\n// import { CloseVectorWeb } from "@langchain/community/vectorstores/closevector/web";\nimport { CloseVectorNode } from "@langchain/community/vectorstores/closevector/node";\nimport { OpenAIEmbeddings } from "@langchain/openai";\n\nexport const run = async () => {\n  // If you want to import the browser version, use the following line instead:\n  // const vectorStore = await CloseVectorWeb.fromTexts(\n  const vectorStore = await CloseVectorNode.fromTexts(\n    ["Hello world", "Bye bye", "hello nice world"],\n    [{ id: 2 }, { id: 1 }, { id: 3 }],\n    new OpenAIEmbeddings()\n  );\n\n  const resultOne = await vectorStore.similaritySearch("hello world", 1);\n  console.log(resultOne);\n};\n',imports:[{local:"CloseVectorNode",imported:"CloseVectorNode",source:"@langchain/community/vectorstores/closevector/node"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"}]}},62352:e=>{e.exports={content:'// If you want to import the browser version, use the following line instead:\n// import { CloseVectorWeb } from "@langchain/community/vectorstores/closevector/web";\nimport { CloseVectorNode } from "@langchain/community/vectorstores/closevector/node";\nimport { OpenAIEmbeddings } from "@langchain/openai";\nimport { TextLoader } from "langchain/document_loaders/fs/text";\n\n// Create docs with a loader\nconst loader = new TextLoader("src/document_loaders/example_data/example.txt");\nconst docs = await loader.load();\n\n// Load the docs into the vector store\n// If you want to import the browser version, use the following line instead:\n// const vectorStore = await CloseVectorWeb.fromDocuments(\nconst vectorStore = await CloseVectorNode.fromDocuments(\n  docs,\n  new OpenAIEmbeddings()\n);\n\n// Search for the most similar document\nconst resultOne = await vectorStore.similaritySearch("hello world", 1);\nconsole.log(resultOne);\n',imports:[{local:"CloseVectorNode",imported:"CloseVectorNode",source:"@langchain/community/vectorstores/closevector/node"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"},{local:"TextLoader",imported:"TextLoader",source:"langchain/document_loaders/fs/text"}]}},71302:e=>{e.exports={content:'// If you want to import the browser version, use the following line instead:\n// import { CloseVectorWeb } from "@langchain/community/vectorstores/closevector/web";\nimport { CloseVectorNode } from "@langchain/community/vectorstores/closevector/node";\nimport { OpenAIEmbeddings } from "@langchain/openai";\n\n// Create a vector store through any method, here from texts as an example\n// If you want to import the browser version, use the following line instead:\n// const vectorStore = await CloseVectorWeb.fromTexts(\nconst vectorStore = await CloseVectorNode.fromTexts(\n  ["Hello world", "Bye bye", "hello nice world"],\n  [{ id: 2 }, { id: 1 }, { id: 3 }],\n  new OpenAIEmbeddings()\n);\n\n// Save the vector store to a directory\nconst directory = "your/directory/here";\n\nawait vectorStore.save(directory);\n\n// Load the vector store from the same directory\n// If you want to import the browser version, use the following line instead:\n// const loadedVectorStore = await CloseVectorWeb.load(\nconst loadedVectorStore = await CloseVectorNode.load(\n  directory,\n  new OpenAIEmbeddings()\n);\n\n// vectorStore and loadedVectorStore are identical\nconst result = await loadedVectorStore.similaritySearch("hello world", 1);\nconsole.log(result);\n',imports:[{local:"CloseVectorNode",imported:"CloseVectorNode",source:"@langchain/community/vectorstores/closevector/node"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"}]}},22920:e=>{e.exports={content:'// If you want to import the browser version, use the following line instead:\n// import { CloseVectorWeb } from "@langchain/community/vectorstores/closevector/web";\nimport { CloseVectorNode } from "@langchain/community/vectorstores/closevector/node";\nimport { CloseVectorWeb } from "@langchain/community/vectorstores/closevector/web";\nimport { OpenAIEmbeddings } from "@langchain/openai";\n\n// Create a vector store through any method, here from texts as an example\n// If you want to import the browser version, use the following line instead:\n// const vectorStore = await CloseVectorWeb.fromTexts(\nconst vectorStore = await CloseVectorNode.fromTexts(\n  ["Hello world", "Bye bye", "hello nice world"],\n  [{ id: 2 }, { id: 1 }, { id: 3 }],\n  new OpenAIEmbeddings(),\n  undefined,\n  {\n    key: "your access key",\n    secret: "your secret",\n  }\n);\n\n// Save the vector store to cloud\nawait vectorStore.saveToCloud({\n  description: "example",\n  public: true,\n});\n\nconst { uuid } = vectorStore.instance;\n\n// Load the vector store from cloud\n// const loadedVectorStore = await CloseVectorWeb.load(\nconst loadedVectorStore = await CloseVectorNode.loadFromCloud({\n  uuid,\n  embeddings: new OpenAIEmbeddings(),\n  credentials: {\n    key: "your access key",\n    secret: "your secret",\n  },\n});\n\n// If you want to import the node version, use the following lines instead:\n// const loadedVectorStoreOnNode = await CloseVectorNode.loadFromCloud({\n//   uuid,\n//   embeddings: new OpenAIEmbeddings(),\n//   credentials: {\n//     key: "your access key",\n//     secret: "your secret"\n//   }\n// });\n\nconst loadedVectorStoreOnBrowser = await CloseVectorWeb.loadFromCloud({\n  uuid,\n  embeddings: new OpenAIEmbeddings(),\n  credentials: {\n    key: "your access key",\n    secret: "your secret",\n  },\n});\n\n// vectorStore and loadedVectorStore are identical\nconst result = await loadedVectorStore.similaritySearch("hello world", 1);\nconsole.log(result);\n\n// or\nconst resultOnBrowser = await loadedVectorStoreOnBrowser.similaritySearch(\n  "hello world",\n  1\n);\nconsole.log(resultOnBrowser);\n',imports:[{local:"CloseVectorNode",imported:"CloseVectorNode",source:"@langchain/community/vectorstores/closevector/node"},{local:"CloseVectorWeb",imported:"CloseVectorWeb",source:"@langchain/community/vectorstores/closevector/web"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"}]}}}]);
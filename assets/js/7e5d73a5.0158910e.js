(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3852],{68856:(e,n,o)=>{"use strict";o.r(n),o.d(n,{assets:()=>h,contentTitle:()=>p,default:()=>g,frontMatter:()=>m,metadata:()=>u,toc:()=>y});var t=o(74848),s=o(28453),r=o(64428),a=o(78847),i=o(30916),l=o.n(i),c=o(17966),d=o.n(c);const m={sidebar_class_name:"node-only"},p="MyScale",u={id:"integrations/vectorstores/myscale",title:"MyScale",description:"Only available on Node.js.",source:"@site/docs/integrations/vectorstores/myscale.mdx",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/myscale",permalink:"/docs/integrations/vectorstores/myscale",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/vectorstores/myscale.mdx",tags:[],version:"current",frontMatter:{sidebar_class_name:"node-only"},sidebar:"integrations",previous:{title:"Momento Vector Index (MVI)",permalink:"/docs/integrations/vectorstores/momento_vector_index"},next:{title:"Neo4j Vector Index",permalink:"/docs/integrations/vectorstores/neo4jvector"}},h={},y=[{value:"Setup",id:"setup",level:2},...a.toc,{value:"Index and Query Docs",id:"index-and-query-docs",level:2},{value:"Query Docs From an Existing Collection",id:"query-docs-from-an-existing-collection",level:2}];function S(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"myscale",children:"MyScale"}),"\n",(0,t.jsx)(n.admonition,{title:"Compatibility",type:"tip",children:(0,t.jsx)(n.p,{children:"Only available on Node.js."})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://myscale.com/",children:"MyScale"})," is an emerging AI database that harmonizes the power of vector search and SQL analytics, providing a managed, efficient, and responsive experience."]}),"\n",(0,t.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Launch a cluster through ",(0,t.jsx)(n.a,{href:"https://console.myscale.com/",children:"MyScale's Web Console"}),". See ",(0,t.jsx)(n.a,{href:"https://docs.myscale.com/en/quickstart/",children:"MyScale's official documentation"})," for more information."]}),"\n",(0,t.jsxs)(n.li,{children:["After launching a cluster, view your ",(0,t.jsx)(n.code,{children:"Connection Details"})," from your cluster's ",(0,t.jsx)(n.code,{children:"Actions"})," menu. You will need the host, port, username, and password."]}),"\n",(0,t.jsx)(n.li,{children:"Install the required Node.js peer dependency in your workspace."}),"\n"]}),"\n","\n",(0,t.jsx)(a.default,{}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install -S @langchain/openai @clickhouse/client @langchain/community\n"})}),"\n",(0,t.jsx)(n.h2,{id:"index-and-query-docs",children:"Index and Query Docs"}),"\n","\n",(0,t.jsx)(r.A,{language:"typescript",children:l()}),"\n",(0,t.jsx)(n.h2,{id:"query-docs-from-an-existing-collection",children:"Query Docs From an Existing Collection"}),"\n","\n",(0,t.jsx)(r.A,{language:"typescript",children:d()})]})}function g(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(S,{...e})}):S(e)}},30916:e=>{e.exports={content:'import { MyScaleStore } from "@langchain/community/vectorstores/myscale";\nimport { OpenAIEmbeddings } from "@langchain/openai";\n\nconst vectorStore = await MyScaleStore.fromTexts(\n  ["Hello world", "Bye bye", "hello nice world"],\n  [\n    { id: 2, name: "2" },\n    { id: 1, name: "1" },\n    { id: 3, name: "3" },\n  ],\n  new OpenAIEmbeddings(),\n  {\n    host: process.env.MYSCALE_HOST || "localhost",\n    port: process.env.MYSCALE_PORT || "8443",\n    username: process.env.MYSCALE_USERNAME || "username",\n    password: process.env.MYSCALE_PASSWORD || "password",\n    database: "default", // defaults to "default"\n    table: "your_table", // defaults to "vector_table"\n  }\n);\n\nconst results = await vectorStore.similaritySearch("hello world", 1);\nconsole.log(results);\n\nconst filteredResults = await vectorStore.similaritySearch("hello world", 1, {\n  whereStr: "metadata.name = \'1\'",\n});\nconsole.log(filteredResults);\n',imports:[{local:"MyScaleStore",imported:"MyScaleStore",source:"@langchain/community/vectorstores/myscale"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"}]}},17966:e=>{e.exports={content:'import { MyScaleStore } from "@langchain/community/vectorstores/myscale";\nimport { OpenAIEmbeddings } from "@langchain/openai";\n\nconst vectorStore = await MyScaleStore.fromExistingIndex(\n  new OpenAIEmbeddings(),\n  {\n    host: process.env.MYSCALE_HOST || "localhost",\n    port: process.env.MYSCALE_PORT || "8443",\n    username: process.env.MYSCALE_USERNAME || "username",\n    password: process.env.MYSCALE_PASSWORD || "password",\n    database: "default", // defaults to "default"\n    table: "your_table", // defaults to "vector_table"\n  }\n);\n\nconst results = await vectorStore.similaritySearch("hello world", 1);\nconsole.log(results);\n\nconst filteredResults = await vectorStore.similaritySearch("hello world", 1, {\n  whereStr: "metadata.name = \'1\'",\n});\nconsole.log(filteredResults);\n',imports:[{local:"MyScaleStore",imported:"MyScaleStore",source:"@langchain/community/vectorstores/myscale"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"}]}}}]);
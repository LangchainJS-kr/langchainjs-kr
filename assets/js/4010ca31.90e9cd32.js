(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3320,65],{61967:(e,n,o)=>{"use strict";o.r(n),o.d(n,{assets:()=>A,contentTitle:()=>y,default:()=>I,frontMatter:()=>j,metadata:()=>f,toc:()=>v});var t=o(74848),i=o(28453),a=o(64428),s=o(78847),r=o(65953),l=o.n(r),c=o(51025),d=o.n(c),h=o(24737),m=o.n(h),g=o(40145),p=o.n(g),u=o(16818),x=o.n(u);const j={sidebar_label:"(Legacy) Google PaLM/VertexAI",sidebar_class_name:"hidden"},y="Google PaLM",f={id:"integrations/llms/google_palm",title:"Google PaLM",description:"This integration does not support gemini-* models. Check Google AI or VertexAI.",source:"@site/docs/integrations/llms/google_palm.mdx",sourceDirName:"integrations/llms",slug:"/integrations/llms/google_palm",permalink:"/docs/integrations/llms/google_palm",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/llms/google_palm.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"(Legacy) Google PaLM/VertexAI",sidebar_class_name:"hidden"},sidebar:"integrations",previous:{title:"Friendli",permalink:"/docs/integrations/llms/friendli"},next:{title:"Google Vertex AI",permalink:"/docs/integrations/llms/google_vertex_ai"}},A={},v=[...s.toc,{value:"Setup",id:"setup",level:2},{value:"Node.js",id:"nodejs",level:3},{value:"Web",id:"web",level:3},...s.toc,{value:"Usage",id:"usage",level:2},{value:"Streaming",id:"streaming",level:3}];function _(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"google-palm",children:"Google PaLM"}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["This integration does not support ",(0,t.jsx)(n.code,{children:"gemini-*"})," models. Check ",(0,t.jsx)(n.a,{href:"/docs/integrations/chat/google_generativeai",children:"Google AI"})," or ",(0,t.jsx)(n.a,{href:"/docs/integrations/llms/google_vertex_ai",children:"VertexAI"}),"."]})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"https://developers.generativeai.google/products/palm",children:"Google PaLM API"})," can be integrated by first\ninstalling the required packages:"]}),"\n","\n",(0,t.jsx)(s.default,{}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install google-auth-library @google-ai/generativelanguage @langchain/community\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Create an ",(0,t.jsx)(n.strong,{children:"API key"})," from ",(0,t.jsx)(n.a,{href:"https://makersuite.google.com/app/apikey",children:"Google MakerSuite"}),". You can then set\nthe key as ",(0,t.jsx)(n.code,{children:"GOOGLE_PALM_API_KEY"})," environment variable or pass it as ",(0,t.jsx)(n.code,{children:"apiKey"})," parameter while instantiating\nthe model."]}),"\n","\n",(0,t.jsx)(a.A,{language:"typescript",children:l()}),"\n",(0,t.jsx)(n.h1,{id:"googlepalm",children:"GooglePaLM"}),"\n",(0,t.jsx)(n.p,{children:"Langchain.js supports two different authentication methods based on whether\nyou're running in a Node.js environment or a web environment."}),"\n",(0,t.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,t.jsx)(n.h3,{id:"nodejs",children:"Node.js"}),"\n",(0,t.jsxs)(n.p,{children:["To call Vertex AI models in Node, you'll need to install ",(0,t.jsx)(n.a,{href:"https://www.npmjs.com/package/google-auth-library",children:"Google's official auth client"})," as a peer dependency."]}),"\n",(0,t.jsx)(n.p,{children:"You should make sure the Vertex AI API is\nenabled for the relevant project and that you've authenticated to\nGoogle Cloud using one of these methods:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["You are logged into an account (using ",(0,t.jsx)(n.code,{children:"gcloud auth application-default login"}),")\npermitted to that project."]}),"\n",(0,t.jsx)(n.li,{children:"You are running on a machine using a service account that is permitted\nto the project."}),"\n",(0,t.jsxs)(n.li,{children:["You have downloaded the credentials for a service account that is permitted\nto the project and set the ",(0,t.jsx)(n.code,{children:"GOOGLE_APPLICATION_CREDENTIALS"})," environment\nvariable to the path of this file."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install google-auth-library\n"})}),"\n",(0,t.jsx)(n.h3,{id:"web",children:"Web"}),"\n",(0,t.jsxs)(n.p,{children:["To call Vertex AI models in web environments (like Edge functions), you'll need to install\nthe ",(0,t.jsx)(n.a,{href:"https://github.com/kriasoft/web-auth-library",children:(0,t.jsx)(n.code,{children:"web-auth-library"})})," pacakge as a peer dependency:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install web-auth-library\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Then, you'll need to add your service account credentials directly as a ",(0,t.jsx)(n.code,{children:"GOOGLE_VERTEX_AI_WEB_CREDENTIALS"})," environment variable:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'GOOGLE_VERTEX_AI_WEB_CREDENTIALS={"type":"service_account","project_id":"YOUR_PROJECT-12345",...}\n'})}),"\n",(0,t.jsx)(n.p,{children:"You can also pass your credentials directly in code like this:"}),"\n",(0,t.jsx)(s.default,{}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/community\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { GoogleVertexAI } from "@langchain/community/llms/googlevertexai";\n\nconst model = new GoogleVertexAI({\n  authOptions: {\n    credentials: {"type":"service_account","project_id":"YOUR_PROJECT-12345",...},\n  },\n});\n'})}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsxs)(n.p,{children:["Several models are available and can be specified by the ",(0,t.jsx)(n.code,{children:"model"})," attribute\nin the constructor. These include:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"text-bison (default)"}),"\n",(0,t.jsx)(n.li,{children:"text-bison-32k"}),"\n",(0,t.jsx)(n.li,{children:"code-gecko"}),"\n",(0,t.jsx)(n.li,{children:"code-bison"}),"\n"]}),"\n","\n",(0,t.jsx)(a.A,{language:"typescript",children:d()}),"\n",(0,t.jsx)(n.p,{children:'Google also has separate models for their "Codey" code generation models.'}),"\n",(0,t.jsx)(n.p,{children:'The "code-gecko" model is useful for code completion:'}),"\n","\n",(0,t.jsx)(a.A,{language:"typescript",children:m()}),"\n",(0,t.jsx)(n.p,{children:'While the "code-bison" model is better at larger code generation based on\na text prompt:'}),"\n","\n",(0,t.jsx)(a.A,{language:"typescript",children:p()}),"\n",(0,t.jsx)(n.h3,{id:"streaming",children:"Streaming"}),"\n",(0,t.jsx)(n.p,{children:"Streaming in multiple chunks is supported for faster responses:"}),"\n","\n",(0,t.jsx)(a.A,{language:"typescript",children:x()})]})}function I(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(_,{...e})}):_(e)}},78847:(e,n,o)=>{"use strict";o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var t=o(74848),i=o(28453);const a={},s=void 0,r={id:"mdx_components/integration_install_tooltip",title:"integration_install_tooltip",description:"See this section for general instructions on installing integration packages.",source:"@site/docs/mdx_components/integration_install_tooltip.mdx",sourceDirName:"mdx_components",slug:"/mdx_components/integration_install_tooltip",permalink:"/docs/mdx_components/integration_install_tooltip",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/mdx_components/integration_install_tooltip.mdx",tags:[],version:"current",frontMatter:{}},l={},c=[];function d(e){const n={a:"a",admonition:"admonition",p:"p",...(0,i.R)(),...e.components};return(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["See ",(0,t.jsx)(n.a,{href:"/docs/how_to/installation#installing-integration-packages",children:"this section for general instructions on installing integration packages"}),"."]})})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},40145:e=>{e.exports={content:'import { GoogleVertexAI } from "@langchain/community/llms/googlevertexai";\n\n/*\n * Before running this, you should make sure you have created a\n * Google Cloud Project that is permitted to the Vertex AI API.\n *\n * You will also need permission to access this project / API.\n * Typically, this is done in one of three ways:\n * - You are logged into an account permitted to that project.\n * - You are running this on a machine using a service account permitted to\n *   the project.\n * - The `GOOGLE_APPLICATION_CREDENTIALS` environment variable is set to the\n *   path of a credentials file for a service account permitted to the project.\n */\n\nconst model = new GoogleVertexAI({\n  model: "code-bison",\n  maxOutputTokens: 2048,\n});\nconst res = await model.invoke(\n  "A Javascript function that counts from 1 to 10."\n);\nconsole.log({ res });\n',imports:[{local:"GoogleVertexAI",imported:"GoogleVertexAI",source:"@langchain/community/llms/googlevertexai"}]}},24737:e=>{e.exports={content:'import { GoogleVertexAI } from "@langchain/community/llms/googlevertexai";\n\n/*\n * Before running this, you should make sure you have created a\n * Google Cloud Project that is permitted to the Vertex AI API.\n *\n * You will also need permission to access this project / API.\n * Typically, this is done in one of three ways:\n * - You are logged into an account permitted to that project.\n * - You are running this on a machine using a service account permitted to\n *   the project.\n * - The `GOOGLE_APPLICATION_CREDENTIALS` environment variable is set to the\n *   path of a credentials file for a service account permitted to the project.\n */\n\nconst model = new GoogleVertexAI({\n  model: "code-gecko",\n});\nconst res = await model.invoke("for (let co=0;");\nconsole.log({ res });\n',imports:[{local:"GoogleVertexAI",imported:"GoogleVertexAI",source:"@langchain/community/llms/googlevertexai"}]}},16818:e=>{e.exports={content:'import { GoogleVertexAI } from "@langchain/community/llms/googlevertexai";\n\nconst model = new GoogleVertexAI({\n  temperature: 0.7,\n});\nconst stream = await model.stream(\n  "What would be a good company name for a company that makes colorful socks?"\n);\n\nfor await (const chunk of stream) {\n  console.log("\\n---------\\nChunk:\\n---------\\n", chunk);\n}\n\n/*\n  ---------\n  Chunk:\n  ---------\n    1. Toe-tally Awesome Socks\n  2. The Sock Drawer\n  3. Happy Feet\n  4. \n\n  ---------\n  Chunk:\n  ---------\n  Sock It to Me\n  5. Crazy Color Socks\n  6. Wild and Wacky Socks\n  7. Fu\n\n  ---------\n  Chunk:\n  ---------\n  nky Feet\n  8. Mismatched Socks\n  9. Rainbow Socks\n  10. Sole Mates\n\n  ---------\n  Chunk:\n  ---------\n  \n\n*/\n',imports:[{local:"GoogleVertexAI",imported:"GoogleVertexAI",source:"@langchain/community/llms/googlevertexai"}]}},51025:e=>{e.exports={content:'import { GoogleVertexAI } from "@langchain/community/llms/googlevertexai";\n// Or, if using the web entrypoint:\n// import { GoogleVertexAI } from "@langchain/community/llms/googlevertexai/web";\n\n/*\n * Before running this, you should make sure you have created a\n * Google Cloud Project that is permitted to the Vertex AI API.\n *\n * You will also need permission to access this project / API.\n * Typically, this is done in one of three ways:\n * - You are logged into an account permitted to that project.\n * - You are running this on a machine using a service account permitted to\n *   the project.\n * - The `GOOGLE_APPLICATION_CREDENTIALS` environment variable is set to the\n *   path of a credentials file for a service account permitted to the project.\n */\nconst model = new GoogleVertexAI({\n  temperature: 0.7,\n});\nconst res = await model.invoke(\n  "What would be a good company name for a company that makes colorful socks?"\n);\nconsole.log({ res });\n',imports:[{local:"GoogleVertexAI",imported:"GoogleVertexAI",source:"@langchain/community/llms/googlevertexai"}]}},65953:e=>{e.exports={content:'import { GooglePaLM } from "@langchain/community/llms/googlepalm";\n\nexport const run = async () => {\n  const model = new GooglePaLM({\n    apiKey: "<YOUR API KEY>", // or set it in environment variable as `GOOGLE_PALM_API_KEY`\n    // other params\n    temperature: 1, // OPTIONAL\n    model: "models/text-bison-001", // OPTIONAL\n    maxOutputTokens: 1024, // OPTIONAL\n    topK: 40, // OPTIONAL\n    topP: 3, // OPTIONAL\n    safetySettings: [\n      // OPTIONAL\n      {\n        category: "HARM_CATEGORY_DANGEROUS",\n        threshold: "BLOCK_MEDIUM_AND_ABOVE",\n      },\n    ],\n    stopSequences: ["stop"], // OPTIONAL\n  });\n  const res = await model.invoke(\n    "What would be a good company name for a company that makes colorful socks?"\n  );\n  console.log({ res });\n};\n',imports:[{local:"GooglePaLM",imported:"GooglePaLM",source:"@langchain/community/llms/googlepalm"}]}}}]);
(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9151],{76246:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>g,contentTitle:()=>d,default:()=>y,frontMatter:()=>l,metadata:()=>m,toc:()=>h});var o=t(74848),s=t(28453),r=t(64428),i=t(78847),a=t(64965),c=t.n(a);const l={},d="Voy",m={id:"integrations/vectorstores/voy",title:"Voy",description:"Voy is a WASM vector similarity search engine written in Rust.",source:"@site/docs/integrations/vectorstores/voy.mdx",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/voy",permalink:"/docs/integrations/vectorstores/voy",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/vectorstores/voy.mdx",tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Vercel Postgres",permalink:"/docs/integrations/vectorstores/vercel_postgres"},next:{title:"Weaviate",permalink:"/docs/integrations/vectorstores/weaviate"}},g={},h=[{value:"Install Voy",id:"install-voy",level:3},...i.toc,{value:"Usage",id:"usage",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"voy",children:"Voy"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://github.com/tantaraio/voy",children:"Voy"})," is a WASM vector similarity search engine written in Rust.\nIt's supported in non-Node environments like browsers. You can use Voy as a vector store with LangChain.js."]}),"\n",(0,o.jsx)(n.h3,{id:"install-voy",children:"Install Voy"}),"\n","\n",(0,o.jsx)(i.default,{}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai voy-search @langchain/community\n"})}),"\n",(0,o.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n","\n",(0,o.jsx)(r.A,{language:"typescript",children:c()})]})}function y(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},64965:e=>{e.exports={content:'import { VoyVectorStore } from "@langchain/community/vectorstores/voy";\nimport { Voy as VoyClient } from "voy-search";\nimport { OpenAIEmbeddings } from "@langchain/openai";\nimport { Document } from "@langchain/core/documents";\n\n// Create Voy client using the library.\nconst voyClient = new VoyClient();\n// Create embeddings\nconst embeddings = new OpenAIEmbeddings();\n// Create the Voy store.\nconst store = new VoyVectorStore(voyClient, embeddings);\n\n// Add two documents with some metadata.\nawait store.addDocuments([\n  new Document({\n    pageContent: "How has life been treating you?",\n    metadata: {\n      foo: "Mike",\n    },\n  }),\n  new Document({\n    pageContent: "And I took it personally...",\n    metadata: {\n      foo: "Testing",\n    },\n  }),\n]);\n\nconst model = new OpenAIEmbeddings();\nconst query = await model.embedQuery("And I took it personally");\n\n// Perform a similarity search.\nconst resultsWithScore = await store.similaritySearchVectorWithScore(query, 1);\n\n// Print the results.\nconsole.log(JSON.stringify(resultsWithScore, null, 2));\n/*\n  [\n    [\n      {\n        "pageContent": "And I took it personally...",\n        "metadata": {\n          "foo": "Testing"\n        }\n      },\n      0\n    ]\n  ]\n*/\n',imports:[{local:"VoyVectorStore",imported:"VoyVectorStore",source:"@langchain/community/vectorstores/voy"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"},{local:"Document",imported:"Document",source:"@langchain/core/documents"}]}}}]);
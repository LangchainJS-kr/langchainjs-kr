(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8673],{25618:(t,e,o)=>{"use strict";o.r(e),o.d(e,{assets:()=>g,contentTitle:()=>d,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>h});var n=o(74848),r=o(28453),i=o(64428),s=o(36780),a=o.n(s),c=o(78847);const l={hide_table_of_contents:!0},d="VectorStore Agent Toolkit",p={id:"integrations/toolkits/vectorstore",title:"VectorStore Agent Toolkit",description:"This example shows how to load and use an agent with a vectorstore toolkit.",source:"@site/docs/integrations/toolkits/vectorstore.mdx",sourceDirName:"integrations/toolkits",slug:"/integrations/toolkits/vectorstore",permalink:"/docs/integrations/toolkits/vectorstore",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/toolkits/vectorstore.mdx",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"integrations",previous:{title:"SQL Agent Toolkit",permalink:"/docs/integrations/toolkits/sql"},next:{title:"Stores",permalink:"/docs/integrations/stores/"}},g={},h=[...c.toc];function u(t){const e={code:"code",h1:"h1",p:"p",pre:"pre",...(0,r.R)(),...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{id:"vectorstore-agent-toolkit",children:"VectorStore Agent Toolkit"}),"\n","\n",(0,n.jsx)(c.default,{}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai @langchain/community\n"})}),"\n",(0,n.jsx)(e.p,{children:"This example shows how to load and use an agent with a vectorstore toolkit."}),"\n",(0,n.jsx)(i.A,{language:"typescript",children:a()})]})}function m(t={}){const{wrapper:e}={...(0,r.R)(),...t.components};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(u,{...t})}):u(t)}},36780:t=>{t.exports={content:'import { OpenAI, OpenAIEmbeddings } from "@langchain/openai";\nimport { HNSWLib } from "@langchain/community/vectorstores/hnswlib";\nimport { RecursiveCharacterTextSplitter } from "@langchain/textsplitters";\nimport * as fs from "fs";\nimport {\n  VectorStoreToolkit,\n  createVectorStoreAgent,\n  VectorStoreInfo,\n} from "langchain/agents";\n\nconst model = new OpenAI({ temperature: 0 });\n/* Load in the file we want to do question answering over */\nconst text = fs.readFileSync("state_of_the_union.txt", "utf8");\n/* Split the text into chunks using character, not token, size */\nconst textSplitter = new RecursiveCharacterTextSplitter({ chunkSize: 1000 });\nconst docs = await textSplitter.createDocuments([text]);\n/* Create the vectorstore */\nconst vectorStore = await HNSWLib.fromDocuments(docs, new OpenAIEmbeddings());\n\n/* Create the agent */\nconst vectorStoreInfo: VectorStoreInfo = {\n  name: "state_of_union_address",\n  description: "the most recent state of the Union address",\n  vectorStore,\n};\n\nconst toolkit = new VectorStoreToolkit(vectorStoreInfo, model);\nconst agent = createVectorStoreAgent(model, toolkit);\n\nconst input =\n  "What did biden say about Ketanji Brown Jackson is the state of the union address?";\nconsole.log(`Executing: ${input}`);\n\nconst result = await agent.invoke({ input });\nconsole.log(`Got output ${result.output}`);\nconsole.log(\n  `Got intermediate steps ${JSON.stringify(result.intermediateSteps, null, 2)}`\n);\n',imports:[{local:"OpenAI",imported:"OpenAI",source:"@langchain/openai"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"},{local:"HNSWLib",imported:"HNSWLib",source:"@langchain/community/vectorstores/hnswlib"},{local:"RecursiveCharacterTextSplitter",imported:"RecursiveCharacterTextSplitter",source:"@langchain/textsplitters"},{local:"VectorStoreToolkit",imported:"VectorStoreToolkit",source:"langchain/agents"},{local:"createVectorStoreAgent",imported:"createVectorStoreAgent",source:"langchain/agents"},{local:"VectorStoreInfo",imported:"VectorStoreInfo",source:"langchain/agents"}]}}}]);
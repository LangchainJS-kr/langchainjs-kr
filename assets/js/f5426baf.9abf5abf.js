(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5515,65],{25874:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>m,default:()=>u,frontMatter:()=>c,metadata:()=>d,toc:()=>h});var o=n(74848),a=n(28453),i=n(64428),s=n(78847),l=n(70727),r=n.n(l);const c={hide_table_of_contents:!0},m="Gmail Tool",d={id:"integrations/tools/gmail",title:"Gmail Tool",description:"The Gmail Tool allows your agent to create and view messages from a linked email account.",source:"@site/docs/integrations/tools/gmail.mdx",sourceDirName:"integrations/tools",slug:"/integrations/tools/gmail",permalink:"/docs/integrations/tools/gmail",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/tools/gmail.mdx",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"integrations",previous:{title:"Exa Search",permalink:"/docs/integrations/tools/exa_search"},next:{title:"Google Calendar Tool",permalink:"/docs/integrations/tools/google_calendar"}},g={},h=[{value:"Setup",id:"setup",level:2},...s.toc,{value:"Usage",id:"usage",level:2}];function p(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"gmail-tool",children:"Gmail Tool"}),"\n",(0,o.jsx)(t.p,{children:"The Gmail Tool allows your agent to create and view messages from a linked email account."}),"\n",(0,o.jsx)(t.h2,{id:"setup",children:"Setup"}),"\n",(0,o.jsxs)(t.p,{children:["You will need to get an API key from ",(0,o.jsx)(t.a,{href:"https://developers.google.com/gmail/api/guides",children:"Google here"}),"\nand ",(0,o.jsx)(t.a,{href:"https://console.cloud.google.com/apis/library/gmail.googleapis.com",children:"enable the new Gmail API"}),".\nThen, set the environment variables for ",(0,o.jsx)(t.code,{children:"GMAIL_CLIENT_EMAIL"}),", and either ",(0,o.jsx)(t.code,{children:"GMAIL_PRIVATE_KEY"}),", or ",(0,o.jsx)(t.code,{children:"GMAIL_KEYFILE"}),"."]}),"\n",(0,o.jsx)(t.p,{children:"To use the Gmail Tool you need to install the following official peer dependency:"}),"\n","\n",(0,o.jsx)(s.default,{}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai googleapis @langchain/community\n"})}),"\n",(0,o.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n","\n",(0,o.jsx)(i.A,{language:"typescript",children:r()})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},78847:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var o=n(74848),a=n(28453);const i={},s=void 0,l={id:"mdx_components/integration_install_tooltip",title:"integration_install_tooltip",description:"See this section for general instructions on installing integration packages.",source:"@site/docs/mdx_components/integration_install_tooltip.mdx",sourceDirName:"mdx_components",slug:"/mdx_components/integration_install_tooltip",permalink:"/docs/mdx_components/integration_install_tooltip",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/mdx_components/integration_install_tooltip.mdx",tags:[],version:"current",frontMatter:{}},r={},c=[];function m(e){const t={a:"a",admonition:"admonition",p:"p",...(0,a.R)(),...e.components};return(0,o.jsx)(t.admonition,{type:"tip",children:(0,o.jsxs)(t.p,{children:["See ",(0,o.jsx)(t.a,{href:"/docs/how_to/installation#installing-integration-packages",children:"this section for general instructions on installing integration packages"}),"."]})})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}},70727:e=>{e.exports={content:'import { initializeAgentExecutorWithOptions } from "langchain/agents";\nimport { OpenAI } from "@langchain/openai";\nimport {\n  GmailCreateDraft,\n  GmailGetMessage,\n  GmailGetThread,\n  GmailSearch,\n  GmailSendMessage,\n} from "@langchain/community/tools/gmail";\nimport { StructuredTool } from "@langchain/core/tools";\n\nexport async function run() {\n  const model = new OpenAI({\n    temperature: 0,\n    apiKey: process.env.OPENAI_API_KEY,\n  });\n\n  // These are the default parameters for the Gmail tools\n  //   const gmailParams = {\n  //     credentials: {\n  //       clientEmail: process.env.GMAIL_CLIENT_EMAIL,\n  //       privateKey: process.env.GMAIL_PRIVATE_KEY,\n  //     },\n  //     scopes: ["https://mail.google.com/"],\n  //   };\n\n  // For custom parameters, uncomment the code above, replace the values with your own, and pass it to the tools below\n  const tools: StructuredTool[] = [\n    new GmailCreateDraft(),\n    new GmailGetMessage(),\n    new GmailGetThread(),\n    new GmailSearch(),\n    new GmailSendMessage(),\n  ];\n\n  const gmailAgent = await initializeAgentExecutorWithOptions(tools, model, {\n    agentType: "structured-chat-zero-shot-react-description",\n    verbose: true,\n  });\n\n  const createInput = `Create a gmail draft for me to edit of a letter from the perspective of a sentient parrot who is looking to collaborate on some research with her estranged friend, a cat. Under no circumstances may you send the message, however.`;\n\n  const createResult = await gmailAgent.invoke({ input: createInput });\n  //   Create Result {\n  //     output: \'I have created a draft email for you to edit. The draft Id is r5681294731961864018.\'\n  //   }\n  console.log("Create Result", createResult);\n\n  const viewInput = `Could you search in my drafts for the latest email?`;\n\n  const viewResult = await gmailAgent.invoke({ input: viewInput });\n  //   View Result {\n  //     output: "The latest email in your drafts is from hopefulparrot@gmail.com with the subject \'Collaboration Opportunity\'. The body of the email reads: \'Dear [Friend], I hope this letter finds you well. I am writing to you in the hopes of rekindling our friendship and to discuss the possibility of collaborating on some research together. I know that we have had our differences in the past, but I believe that we can put them aside and work together for the greater good. I look forward to hearing from you. Sincerely, [Parrot]\'"\n  //   }\n  console.log("View Result", viewResult);\n}\n',imports:[{local:"initializeAgentExecutorWithOptions",imported:"initializeAgentExecutorWithOptions",source:"langchain/agents"},{local:"OpenAI",imported:"OpenAI",source:"@langchain/openai"},{local:"GmailCreateDraft",imported:"GmailCreateDraft",source:"@langchain/community/tools/gmail"},{local:"GmailGetMessage",imported:"GmailGetMessage",source:"@langchain/community/tools/gmail"},{local:"GmailGetThread",imported:"GmailGetThread",source:"@langchain/community/tools/gmail"},{local:"GmailSearch",imported:"GmailSearch",source:"@langchain/community/tools/gmail"},{local:"GmailSendMessage",imported:"GmailSendMessage",source:"@langchain/community/tools/gmail"},{local:"StructuredTool",imported:"StructuredTool",source:"@langchain/core/tools"}]}}}]);
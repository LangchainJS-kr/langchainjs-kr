"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9268],{16534:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>r,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var n=o(74848),s=o(28453);const i={sidebar_class_name:"hidden",title:"How to use LangChain tools"},l=void 0,a={id:"how_to/tools_builtin",title:"How to use LangChain tools",description:"Tools are interfaces that an agent, chain, or LLM can use to interact",source:"@site/docs/how_to/tools_builtin.mdx",sourceDirName:"how_to",slug:"/how_to/tools_builtin",permalink:"/docs/how_to/tools_builtin",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/how_to/tools_builtin.mdx",tags:[],version:"current",frontMatter:{sidebar_class_name:"hidden",title:"How to use LangChain tools"},sidebar:"tutorialSidebar",previous:{title:"How to call tools with multi-modal data",permalink:"/docs/how_to/tool_calls_multi_modal"},next:{title:"How use a vector store to retrieve data",permalink:"/docs/how_to/vectorstore_retriever"}},r={},c=[{value:"Default Tools",id:"default-tools",level:2},{value:"How to use built-in toolkits",id:"how-to-use-built-in-toolkits",level:2},{value:"More Topics",id:"more-topics",level:2}];function h(e){const t={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"Tools are interfaces that an agent, chain, or LLM can use to interact\nwith the world. They combine a few things:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"The name of the tool"}),"\n",(0,n.jsx)(t.li,{children:"A description of what the tool is"}),"\n",(0,n.jsx)(t.li,{children:"JSON schema of what the inputs to the tool are"}),"\n",(0,n.jsx)(t.li,{children:"The function to call"}),"\n",(0,n.jsx)(t.li,{children:"Whether the result of a tool should be returned directly to the user"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"It is useful to have all this information because this information can\nbe used to build action-taking systems! The name, description, and\nschema can be used to prompt the LLM so it knows how to specify what\naction to take, and then the function to call is equivalent to taking\nthat action."}),"\n",(0,n.jsxs)(t.p,{children:["The simpler the input to a tool is, the easier it is for an LLM to be\nable to use it. Many agents will only work with tools that have a single\nstring input. For a list of agent types and which ones work with more\ncomplicated inputs, please see ",(0,n.jsx)(t.a,{href:"https://js.langchain.com/v0.1/docs/modules/agents/agent_types/",children:"this\ndocumentation"})]}),"\n",(0,n.jsx)(t.p,{children:"Importantly, the name, description, and schema (if used) are all used in\nthe prompt. Therefore, it is vitally important that they are clear and\ndescribe exactly how the tool should be used."}),"\n",(0,n.jsx)(t.h2,{id:"default-tools",children:"Default Tools"}),"\n",(0,n.jsx)(t.p,{children:"Let\u2019s take a look at how to work with tools. To do this, we\u2019ll work with\na built in tool."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:'import { WikipediaQueryRun } from "@langchain/community/tools/wikipedia_query_run";\n\nconst tool = new WikipediaQueryRun({\n  topKResults: 1,\n  maxDocContentLength: 100,\n});\n'})}),"\n",(0,n.jsx)(t.p,{children:"This is the default name:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"tool.name;\n"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-text",children:'"wikipedia-api"\n'})}),"\n",(0,n.jsx)(t.p,{children:"This is the default description:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"tool.description;\n"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-text",children:'"A tool for interacting with and fetching data from the Wikipedia API."\n'})}),"\n",(0,n.jsxs)(t.p,{children:["This is the default schema of the inputs. This is a\n",(0,n.jsx)(t.a,{href:"https://zod.dev",children:"Zod"})," schema on the tool class. We convert it to JSON\nschema for display purposes:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:'import { zodToJsonSchema } from "zod-to-json-schema";\n\nzodToJsonSchema(tool.schema);\n'})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-text",children:'{\n  type: "object",\n  properties: { input: { type: "string" } },\n  additionalProperties: false,\n  "$schema": "http://json-schema.org/draft-07/schema#"\n}\n'})}),"\n",(0,n.jsx)(t.p,{children:"We can see if the tool should return directly to the user"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"tool.returnDirect;\n"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-text",children:"false\n"})}),"\n",(0,n.jsx)(t.p,{children:"We can invoke this tool with an object input:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:'await tool.invoke({ input: "langchain" });\n'})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-text",children:'"Page: LangChain\\n" +\n  "Summary: LangChain is a framework designed to simplify the creation of applications "\n'})}),"\n",(0,n.jsx)(t.p,{children:"We can also invoke this tool with a single string input. We can do this\nbecause this tool expects only a single input. If it required multiple\ninputs, we would not be able to do that."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:'await tool.invoke("langchain");\n'})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-text",children:'"Page: LangChain\\n" +\n  "Summary: LangChain is a framework designed to simplify the creation of applications "\n'})}),"\n",(0,n.jsx)(t.h2,{id:"how-to-use-built-in-toolkits",children:"How to use built-in toolkits"}),"\n",(0,n.jsx)(t.p,{children:"Toolkits are collections of tools that are designed to be used together\nfor specific tasks. They have convenient loading methods."}),"\n",(0,n.jsxs)(t.p,{children:["For a complete list of available ready-made toolkits, visit\n",(0,n.jsx)(t.a,{href:"../../docs/integrations/toolkits/",children:"Integrations"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["All Toolkits expose a ",(0,n.jsx)(t.code,{children:"getTools()"})," method which returns a list of tools."]}),"\n",(0,n.jsx)(t.p,{children:"You\u2019re usually meant to use them this way:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"// Initialize a toolkit\nconst toolkit = new ExampleTookit(...);\n\n// Get list of tools\nconst tools = toolkit.getTools();\n"})}),"\n",(0,n.jsx)(t.h2,{id:"more-topics",children:"More Topics"}),"\n",(0,n.jsx)(t.p,{children:"This was a quick introduction to tools in LangChain, but there is a lot\nmore to learn"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.a,{href:"../../docs/integrations/tools/",children:"Built-In Tools"})}),": For a list of all\nbuilt-in tools, see ",(0,n.jsx)(t.a,{href:"../../docs/integrations/tools/",children:"this page"})]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.a,{href:"../../docs/how_to/custom_tools",children:"Custom Tools"})}),": Although built-in\ntools are useful, it\u2019s highly likely that you\u2019ll have to define your own\ntools. See ",(0,n.jsx)(t.a,{href:"../../docs/how_to/custom_tools",children:"this guide"})," for instructions\non how to do so."]})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}}}]);
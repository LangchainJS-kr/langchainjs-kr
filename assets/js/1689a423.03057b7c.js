"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5553],{16423:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>i,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>r});var a=t(74848),s=t(28453);const o={sidebar_class_name:"hidden",title:"How to attach callbacks to a module"},l=void 0,c={id:"how_to/callbacks_attach",title:"How to attach callbacks to a module",description:"This guide assumes familiarity with the following concepts:",source:"@site/docs/how_to/callbacks_attach.mdx",sourceDirName:"how_to",slug:"/how_to/callbacks_attach",permalink:"/docs/how_to/callbacks_attach",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/how_to/callbacks_attach.mdx",tags:[],version:"current",frontMatter:{sidebar_class_name:"hidden",title:"How to attach callbacks to a module"},sidebar:"tutorialSidebar",previous:{title:"How to cache embedding results",permalink:"/docs/how_to/caching_embeddings"},next:{title:"How to make callbacks run in the background",permalink:"/docs/how_to/callbacks_backgrounding"}},i={},r=[{value:"Next steps",id:"next-steps",level:2}];function u(n){const e={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(e.admonition,{title:"Prerequisites",type:"info",children:[(0,a.jsx)(e.p,{children:"This guide assumes familiarity with the following concepts:"}),(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"../../docs/concepts/#callbacks",children:"Callbacks"})}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"../../docs/how_to/sequence",children:"Chaining runnables"})}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"../../docs/how_to/binding",children:"Attach runtime arguments to a Runnable"})}),"\n"]})]}),"\n",(0,a.jsxs)(e.p,{children:["If you are composing a chain of runnables and want to reuse callbacks\nacross multiple executions, you can attach callbacks with the\n",(0,a.jsx)(e.a,{href:"https://api.js.langchain.com/classes/langchain_core_runnables.Runnable.html#withConfig",children:(0,a.jsx)(e.code,{children:".withConfig()"})}),"\nmethod. This saves you the need to pass callbacks in each time you\ninvoke the chain."]}),"\n",(0,a.jsxs)(e.p,{children:["Here\u2019s an example using LangChain\u2019s built-in\n",(0,a.jsx)(e.a,{href:"https://api.js.langchain.com/classes/langchain_core_tracers_console.ConsoleCallbackHandler.html",children:(0,a.jsx)(e.code,{children:"ConsoleCallbackHandler"})}),":"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:'import { ConsoleCallbackHandler } from "@langchain/core/tracers/console";\nimport { ChatPromptTemplate } from "@langchain/core/prompts";\nimport { ChatAnthropic } from "@langchain/anthropic";\n\nconst handler = new ConsoleCallbackHandler();\n\nconst prompt = ChatPromptTemplate.fromTemplate(`What is 1 + {number}?`);\nconst model = new ChatAnthropic({\n  model: "claude-3-sonnet-20240229",\n});\n\nconst chainWithCallbacks = prompt.pipe(model).withConfig({\n  callbacks: [handler],\n});\n\nawait chainWithCallbacks.invoke({ number: "2" });\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:'[chain/start] [1:chain:RunnableSequence] Entering Chain run with input: {\n  "number": "2"\n}\n[chain/start] [1:chain:RunnableSequence > 2:prompt:ChatPromptTemplate] Entering Chain run with input: {\n  "number": "2"\n}\n[chain/end] [1:chain:RunnableSequence > 2:prompt:ChatPromptTemplate] [1ms] Exiting Chain run with output: {\n  "lc": 1,\n  "type": "constructor",\n  "id": [\n    "langchain_core",\n    "prompt_values",\n    "ChatPromptValue"\n  ],\n  "kwargs": {\n    "messages": [\n      {\n        "lc": 1,\n        "type": "constructor",\n        "id": [\n          "langchain_core",\n          "messages",\n          "HumanMessage"\n        ],\n        "kwargs": {\n          "content": "What is 1 + 2?",\n          "additional_kwargs": {},\n          "response_metadata": {}\n        }\n      }\n    ]\n  }\n}\n[llm/start] [1:chain:RunnableSequence > 3:llm:ChatAnthropic] Entering LLM run with input: {\n  "messages": [\n    [\n      {\n        "lc": 1,\n        "type": "constructor",\n        "id": [\n          "langchain_core",\n          "messages",\n          "HumanMessage"\n        ],\n        "kwargs": {\n          "content": "What is 1 + 2?",\n          "additional_kwargs": {},\n          "response_metadata": {}\n        }\n      }\n    ]\n  ]\n}\n[llm/end] [1:chain:RunnableSequence > 3:llm:ChatAnthropic] [797ms] Exiting LLM run with output: {\n  "generations": [\n    [\n      {\n        "text": "1 + 2 = 3",\n        "message": {\n          "lc": 1,\n          "type": "constructor",\n          "id": [\n            "langchain_core",\n            "messages",\n            "AIMessage"\n          ],\n          "kwargs": {\n            "content": "1 + 2 = 3",\n            "tool_calls": [],\n            "invalid_tool_calls": [],\n            "additional_kwargs": {\n              "id": "msg_01WvZAqTg2hZzC4AKyeUaADs",\n              "type": "message",\n              "role": "assistant",\n              "model": "claude-3-sonnet-20240229",\n              "stop_sequence": null,\n              "usage": {\n                "input_tokens": 16,\n                "output_tokens": 13\n              },\n              "stop_reason": "end_turn"\n            },\n            "response_metadata": {\n              "id": "msg_01WvZAqTg2hZzC4AKyeUaADs",\n              "model": "claude-3-sonnet-20240229",\n              "stop_sequence": null,\n              "usage": {\n                "input_tokens": 16,\n                "output_tokens": 13\n              },\n              "stop_reason": "end_turn"\n            }\n          }\n        }\n      }\n    ]\n  ],\n  "llmOutput": {\n    "id": "msg_01WvZAqTg2hZzC4AKyeUaADs",\n    "model": "claude-3-sonnet-20240229",\n    "stop_sequence": null,\n    "usage": {\n      "input_tokens": 16,\n      "output_tokens": 13\n    },\n    "stop_reason": "end_turn"\n  }\n}\n[chain/end] [1:chain:RunnableSequence] [806ms] Exiting Chain run with output: {\n  "lc": 1,\n  "type": "constructor",\n  "id": [\n    "langchain_core",\n    "messages",\n    "AIMessage"\n  ],\n  "kwargs": {\n    "content": "1 + 2 = 3",\n    "tool_calls": [],\n    "invalid_tool_calls": [],\n    "additional_kwargs": {\n      "id": "msg_01WvZAqTg2hZzC4AKyeUaADs",\n      "type": "message",\n      "role": "assistant",\n      "model": "claude-3-sonnet-20240229",\n      "stop_sequence": null,\n      "usage": {\n        "input_tokens": 16,\n        "output_tokens": 13\n      },\n      "stop_reason": "end_turn"\n    },\n    "response_metadata": {\n      "id": "msg_01WvZAqTg2hZzC4AKyeUaADs",\n      "model": "claude-3-sonnet-20240229",\n      "stop_sequence": null,\n      "usage": {\n        "input_tokens": 16,\n        "output_tokens": 13\n      },\n      "stop_reason": "end_turn"\n    }\n  }\n}\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:'AIMessage {\n  lc_serializable: true,\n  lc_kwargs: {\n    content: "1 + 2 = 3",\n    tool_calls: [],\n    invalid_tool_calls: [],\n    additional_kwargs: {\n      id: "msg_01WvZAqTg2hZzC4AKyeUaADs",\n      type: "message",\n      role: "assistant",\n      model: "claude-3-sonnet-20240229",\n      stop_sequence: null,\n      usage: { input_tokens: 16, output_tokens: 13 },\n      stop_reason: "end_turn"\n    },\n    response_metadata: {}\n  },\n  lc_namespace: [ "langchain_core", "messages" ],\n  content: "1 + 2 = 3",\n  name: undefined,\n  additional_kwargs: {\n    id: "msg_01WvZAqTg2hZzC4AKyeUaADs",\n    type: "message",\n    role: "assistant",\n    model: "claude-3-sonnet-20240229",\n    stop_sequence: null,\n    usage: { input_tokens: 16, output_tokens: 13 },\n    stop_reason: "end_turn"\n  },\n  response_metadata: {\n    id: "msg_01WvZAqTg2hZzC4AKyeUaADs",\n    model: "claude-3-sonnet-20240229",\n    stop_sequence: null,\n    usage: { input_tokens: 16, output_tokens: 13 },\n    stop_reason: "end_turn"\n  },\n  tool_calls: [],\n  invalid_tool_calls: []\n}\n'})}),"\n",(0,a.jsx)(e.p,{children:"The bound callbacks will run for all nested module runs."}),"\n",(0,a.jsx)(e.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,a.jsx)(e.p,{children:"You\u2019ve now learned how to bind callbacks to a chain."}),"\n",(0,a.jsxs)(e.p,{children:["Next, check out the other how-to guides in this section, such as how to\ncreate your own ",(0,a.jsx)(e.a,{href:"../../docs/how_to/custom_callbacks",children:"custom callback\nhandlers"}),"."]})]})}function h(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(u,{...n})}):u(n)}}}]);
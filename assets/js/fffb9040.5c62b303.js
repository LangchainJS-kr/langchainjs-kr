(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2476,65],{5205:(t,e,n)=>{"use strict";n.r(e),n.d(e,{assets:()=>m,contentTitle:()=>c,default:()=>g,frontMatter:()=>l,metadata:()=>d,toc:()=>h});var o=n(74848),i=n(28453),r=n(64428),a=n(88486),s=n.n(a),p=n(78847);const l={hide_table_of_contents:!0},c="Python interpreter tool",d={id:"integrations/tools/pyinterpreter",title:"Python interpreter tool",description:"This tool executes code and can potentially perform destructive actions. Be careful that you trust any code passed to it!",source:"@site/docs/integrations/tools/pyinterpreter.mdx",sourceDirName:"integrations/tools",slug:"/integrations/tools/pyinterpreter",permalink:"/docs/integrations/tools/pyinterpreter",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/tools/pyinterpreter.mdx",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"integrations",previous:{title:"Agent with AWS Lambda",permalink:"/docs/integrations/tools/lambda_agent"},next:{title:"SearchApi tool",permalink:"/docs/integrations/tools/searchapi"}},m={},h=[{value:"Usage",id:"usage",level:2},...p.toc];function u(t){const e={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...t.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"python-interpreter-tool",children:"Python interpreter tool"}),"\n",(0,o.jsx)(e.admonition,{type:"warning",children:(0,o.jsx)(e.p,{children:"This tool executes code and can potentially perform destructive actions. Be careful that you trust any code passed to it!"})}),"\n",(0,o.jsx)(e.p,{children:"LangChain offers an experimental tool for executing arbitrary Python code.\nThis can be useful in combination with an LLM that can generate code to perform more powerful computations."}),"\n",(0,o.jsx)(e.h2,{id:"usage",children:"Usage"}),"\n","\n","\n",(0,o.jsx)(p.default,{}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai\n"})}),"\n",(0,o.jsx)(r.A,{language:"typescript",children:s()})]})}function g(t={}){const{wrapper:e}={...(0,i.R)(),...t.components};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(u,{...t})}):u(t)}},78847:(t,e,n)=>{"use strict";n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var o=n(74848),i=n(28453);const r={},a=void 0,s={id:"mdx_components/integration_install_tooltip",title:"integration_install_tooltip",description:"See this section for general instructions on installing integration packages.",source:"@site/docs/mdx_components/integration_install_tooltip.mdx",sourceDirName:"mdx_components",slug:"/mdx_components/integration_install_tooltip",permalink:"/docs/mdx_components/integration_install_tooltip",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/mdx_components/integration_install_tooltip.mdx",tags:[],version:"current",frontMatter:{}},p={},l=[];function c(t){const e={a:"a",admonition:"admonition",p:"p",...(0,i.R)(),...t.components};return(0,o.jsx)(e.admonition,{type:"tip",children:(0,o.jsxs)(e.p,{children:["See ",(0,o.jsx)(e.a,{href:"/docs/how_to/installation#installing-integration-packages",children:"this section for general instructions on installing integration packages"}),"."]})})}function d(t={}){const{wrapper:e}={...(0,i.R)(),...t.components};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(c,{...t})}):c(t)}},88486:t=>{t.exports={content:'import { OpenAI } from "@langchain/openai";\nimport { PythonInterpreterTool } from "langchain/experimental/tools/pyinterpreter";\nimport { ChatPromptTemplate } from "@langchain/core/prompts";\nimport { StringOutputParser } from "@langchain/core/output_parsers";\n\nconst prompt = ChatPromptTemplate.fromTemplate(\n  `Generate python code that does {input}. Do not generate anything else.`\n);\n\nconst model = new OpenAI({});\n\nconst interpreter = await PythonInterpreterTool.initialize({\n  indexURL: "../node_modules/pyodide",\n});\n\n// Note: In Deno, it may be easier to initialize the interpreter yourself:\n// import pyodideModule from "npm:pyodide/pyodide.js";\n// import { PythonInterpreterTool } from "npm:langchain/experimental/tools/pyinterpreter";\n\n// const pyodide = await pyodideModule.loadPyodide();\n// const pythonTool = new PythonInterpreterTool({instance: pyodide})\n\nconst chain = prompt\n  .pipe(model)\n  .pipe(new StringOutputParser())\n  .pipe(interpreter);\n\nconst result = await chain.invoke({\n  input: `prints "Hello LangChain"`,\n});\n\nconsole.log(JSON.parse(result).stdout);\n\n// To install python packages:\n// This uses the loadPackages command.\n// This works for packages built with pyodide.\nawait interpreter.addPackage("numpy");\n// But for other packages, you will want to use micropip.\n// See: https://pyodide.org/en/stable/usage/loading-packages.html\n// for more information\nawait interpreter.addPackage("micropip");\n// The following is roughly equivalent to:\n// pyodide.runPython(`import ${pkgname}; ${pkgname}`);\nconst micropip = interpreter.pyodideInstance.pyimport("micropip");\nawait micropip.install("numpy");\n',imports:[{local:"OpenAI",imported:"OpenAI",source:"@langchain/openai"},{local:"PythonInterpreterTool",imported:"PythonInterpreterTool",source:"langchain/experimental/tools/pyinterpreter"},{local:"ChatPromptTemplate",imported:"ChatPromptTemplate",source:"@langchain/core/prompts"},{local:"StringOutputParser",imported:"StringOutputParser",source:"@langchain/core/output_parsers"}]}}}]);
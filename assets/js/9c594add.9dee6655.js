(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4996,65],{54205:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>g,frontMatter:()=>l,metadata:()=>d,toc:()=>h});var o=n(74848),s=n(28453),i=n(64428),a=n(78847),r=n(71268),c=n.n(r);const l={sidebar_class_name:"node-only"},p="Rockset",d={id:"integrations/vectorstores/rockset",title:"Rockset",description:"Rockset is a real-time analyitics SQL database that runs in the cloud.",source:"@site/docs/integrations/vectorstores/rockset.mdx",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/rockset",permalink:"/docs/integrations/vectorstores/rockset",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/vectorstores/rockset.mdx",tags:[],version:"current",frontMatter:{sidebar_class_name:"node-only"},sidebar:"integrations",previous:{title:"Redis",permalink:"/docs/integrations/vectorstores/redis"},next:{title:"SingleStore",permalink:"/docs/integrations/vectorstores/singlestore"}},m={},h=[{value:"Setup",id:"setup",level:2},{value:"Usage",id:"usage",level:3},...a.toc];function u(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"rockset",children:"Rockset"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"https://rockset.com",children:"Rockset"})," is a real-time analyitics SQL database that runs in the cloud.\nRockset provides vector search capabilities, in the form of ",(0,o.jsx)(t.a,{href:"https://rockset.com/docs/vector-functions/#vector-distance-functions",children:"SQL functions"}),", to support AI applications that rely on text similarity."]}),"\n",(0,o.jsx)(t.h2,{id:"setup",children:"Setup"}),"\n",(0,o.jsx)(t.p,{children:"Install the rockset client."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"yarn add @rockset/client\n"})}),"\n",(0,o.jsx)(t.h3,{id:"usage",children:"Usage"}),"\n","\n",(0,o.jsx)(a.default,{}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai @langchain/community\n"})}),"\n","\n",(0,o.jsx)(t.p,{children:"Below is an example showcasing how to use OpenAI and Rockset to answer questions about a text file:"}),"\n",(0,o.jsx)(i.A,{language:"typescript",children:c()})]})}function g(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},78847:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var o=n(74848),s=n(28453);const i={},a=void 0,r={id:"mdx_components/integration_install_tooltip",title:"integration_install_tooltip",description:"See this section for general instructions on installing integration packages.",source:"@site/docs/mdx_components/integration_install_tooltip.mdx",sourceDirName:"mdx_components",slug:"/mdx_components/integration_install_tooltip",permalink:"/docs/mdx_components/integration_install_tooltip",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/mdx_components/integration_install_tooltip.mdx",tags:[],version:"current",frontMatter:{}},c={},l=[];function p(e){const t={a:"a",admonition:"admonition",p:"p",...(0,s.R)(),...e.components};return(0,o.jsx)(t.admonition,{type:"tip",children:(0,o.jsxs)(t.p,{children:["See ",(0,o.jsx)(t.a,{href:"/docs/how_to/installation#installing-integration-packages",children:"this section for general instructions on installing integration packages"}),"."]})})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},71268:e=>{e.exports={content:'import * as rockset from "@rockset/client";\nimport { ChatOpenAI, OpenAIEmbeddings } from "@langchain/openai";\nimport { RocksetStore } from "@langchain/community/vectorstores/rockset";\nimport { RecursiveCharacterTextSplitter } from "@langchain/textsplitters";\nimport { readFileSync } from "fs";\nimport { ChatPromptTemplate } from "@langchain/core/prompts";\nimport { createStuffDocumentsChain } from "langchain/chains/combine_documents";\nimport { createRetrievalChain } from "langchain/chains/retrieval";\n\nconst store = await RocksetStore.withNewCollection(new OpenAIEmbeddings(), {\n  client: rockset.default.default(\n    process.env.ROCKSET_API_KEY ?? "",\n    `https://api.${process.env.ROCKSET_API_REGION ?? "usw2a1"}.rockset.com`\n  ),\n  collectionName: "langchain_demo",\n});\n\nconst model = new ChatOpenAI({ model: "gpt-3.5-turbo-1106" });\nconst questionAnsweringPrompt = ChatPromptTemplate.fromMessages([\n  [\n    "system",\n    "Answer the user\'s questions based on the below context:\\n\\n{context}",\n  ],\n  ["human", "{input}"],\n]);\n\nconst combineDocsChain = await createStuffDocumentsChain({\n  llm: model,\n  prompt: questionAnsweringPrompt,\n});\n\nconst chain = await createRetrievalChain({\n  retriever: store.asRetriever(),\n  combineDocsChain,\n});\n\nconst text = readFileSync("state_of_the_union.txt", "utf8");\nconst docs = await new RecursiveCharacterTextSplitter().createDocuments([text]);\n\nawait store.addDocuments(docs);\nconst response = await chain.invoke({\n  input: "When was America founded?",\n});\nconsole.log(response.answer);\nawait store.destroy();\n',imports:[{local:"ChatOpenAI",imported:"ChatOpenAI",source:"@langchain/openai"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"},{local:"RocksetStore",imported:"RocksetStore",source:"@langchain/community/vectorstores/rockset"},{local:"RecursiveCharacterTextSplitter",imported:"RecursiveCharacterTextSplitter",source:"@langchain/textsplitters"},{local:"ChatPromptTemplate",imported:"ChatPromptTemplate",source:"@langchain/core/prompts"},{local:"createStuffDocumentsChain",imported:"createStuffDocumentsChain",source:"langchain/chains/combine_documents"},{local:"createRetrievalChain",imported:"createRetrievalChain",source:"langchain/chains/retrieval"}]}}}]);
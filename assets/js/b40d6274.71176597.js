(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9928,65],{25897:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>b,contentTitle:()=>x,default:()=>C,frontMatter:()=>g,metadata:()=>f,toc:()=>w});var o=t(74848),i=t(28453),a=t(64428),s=t(78847),r=t(76604),c=t.n(r),d=t(75483),l=t.n(d),m=t(13866),p=t.n(m),h=t(34544),u=t.n(h);const g={sidebar_class_name:"node-only"},x="Redis",f={id:"integrations/vectorstores/redis",title:"Redis",description:"Redis is a fast open source, in-memory data store.",source:"@site/docs/integrations/vectorstores/redis.mdx",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/redis",permalink:"/docs/integrations/vectorstores/redis",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/vectorstores/redis.mdx",tags:[],version:"current",frontMatter:{sidebar_class_name:"node-only"},sidebar:"integrations",previous:{title:"Qdrant",permalink:"/docs/integrations/vectorstores/qdrant"},next:{title:"Rockset",permalink:"/docs/integrations/vectorstores/rockset"}},b={},w=[{value:"Setup",id:"setup",level:2},...s.toc,{value:"Index docs",id:"index-docs",level:2},{value:"Query docs",id:"query-docs",level:2},{value:"Create index with options",id:"create-index-with-options",level:2},{value:"Delete an index",id:"delete-an-index",level:2}];function v(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"redis",children:"Redis"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://redis.io/",children:"Redis"})," is a fast open source, in-memory data store.\nAs part of the ",(0,o.jsx)(n.a,{href:"https://redis.io/docs/stack/get-started/",children:"Redis Stack"}),", ",(0,o.jsx)(n.a,{href:"https://redis.io/docs/stack/search/",children:"RediSearch"})," is the module that enables vector similarity semantic search, as well as many other types of searching."]}),"\n",(0,o.jsx)(n.admonition,{title:"Compatibility",type:"tip",children:(0,o.jsx)(n.p,{children:"Only available on Node.js."})}),"\n",(0,o.jsxs)(n.p,{children:["LangChain.js accepts ",(0,o.jsx)(n.a,{href:"https://github.com/redis/node-redis",children:"node-redis"})," as the client for Redis vectorstore."]}),"\n",(0,o.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Run Redis with Docker on your computer following ",(0,o.jsx)(n.a,{href:"https://redis.io/docs/stack/get-started/install/docker/#redisredis-stack",children:"the docs"})]}),"\n",(0,o.jsx)(n.li,{children:"Install the node-redis JS client"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install -S redis\n"})}),"\n","\n",(0,o.jsx)(s.default,{}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai @langchain/community\n"})}),"\n",(0,o.jsx)(n.h2,{id:"index-docs",children:"Index docs"}),"\n","\n",(0,o.jsx)(a.A,{language:"typescript",children:c()}),"\n",(0,o.jsx)(n.h2,{id:"query-docs",children:"Query docs"}),"\n","\n",(0,o.jsx)(a.A,{language:"typescript",children:l()}),"\n",(0,o.jsx)(n.h2,{id:"create-index-with-options",children:"Create index with options"}),"\n",(0,o.jsxs)(n.p,{children:["To pass arguments for ",(0,o.jsx)(n.a,{href:"https://redis.io/commands/ft.create/",children:"index creation"}),", you can utilize the ",(0,o.jsx)(n.a,{href:"https://github.com/redis/node-redis/blob/294cbf8367295ac81cbe51ce2932493ab80493f1/packages/search/lib/commands/CREATE.ts#L4",children:"available options"})," offered by ",(0,o.jsx)(n.a,{href:"https://github.com/redis/node-redis",children:"node-redis"})," through ",(0,o.jsx)(n.code,{children:"createIndexOptions"})," parameter."]}),"\n","\n",(0,o.jsx)(a.A,{language:"typescript",children:p()}),"\n",(0,o.jsx)(n.h2,{id:"delete-an-index",children:"Delete an index"}),"\n","\n",(0,o.jsx)(a.A,{language:"typescript",children:u()})]})}function C(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(v,{...e})}):v(e)}},78847:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>d});var o=t(74848),i=t(28453);const a={},s=void 0,r={id:"mdx_components/integration_install_tooltip",title:"integration_install_tooltip",description:"See this section for general instructions on installing integration packages.",source:"@site/docs/mdx_components/integration_install_tooltip.mdx",sourceDirName:"mdx_components",slug:"/mdx_components/integration_install_tooltip",permalink:"/docs/mdx_components/integration_install_tooltip",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/mdx_components/integration_install_tooltip.mdx",tags:[],version:"current",frontMatter:{}},c={},d=[];function l(e){const n={a:"a",admonition:"admonition",p:"p",...(0,i.R)(),...e.components};return(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["See ",(0,o.jsx)(n.a,{href:"/docs/how_to/installation#installing-integration-packages",children:"this section for general instructions on installing integration packages"}),"."]})})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},76604:e=>{e.exports={content:'import { createClient } from "redis";\nimport { OpenAIEmbeddings } from "@langchain/openai";\nimport { RedisVectorStore } from "@langchain/redis";\nimport { Document } from "@langchain/core/documents";\n\nconst client = createClient({\n  url: process.env.REDIS_URL ?? "redis://localhost:6379",\n});\nawait client.connect();\n\nconst docs = [\n  new Document({\n    metadata: { foo: "bar" },\n    pageContent: "redis is fast",\n  }),\n  new Document({\n    metadata: { foo: "bar" },\n    pageContent: "the quick brown fox jumped over the lazy dog",\n  }),\n  new Document({\n    metadata: { baz: "qux" },\n    pageContent: "lorem ipsum dolor sit amet",\n  }),\n  new Document({\n    metadata: { baz: "qux" },\n    pageContent: "consectetur adipiscing elit",\n  }),\n];\n\nconst vectorStore = await RedisVectorStore.fromDocuments(\n  docs,\n  new OpenAIEmbeddings(),\n  {\n    redisClient: client,\n    indexName: "docs",\n  }\n);\n\nawait client.disconnect();\n',imports:[{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"},{local:"RedisVectorStore",imported:"RedisVectorStore",source:"@langchain/redis"},{local:"Document",imported:"Document",source:"@langchain/core/documents"}]}},34544:e=>{e.exports={content:'import { createClient } from "redis";\nimport { OpenAIEmbeddings } from "@langchain/openai";\nimport { RedisVectorStore } from "@langchain/redis";\nimport { Document } from "@langchain/core/documents";\n\nconst client = createClient({\n  url: process.env.REDIS_URL ?? "redis://localhost:6379",\n});\nawait client.connect();\n\nconst docs = [\n  new Document({\n    metadata: { foo: "bar" },\n    pageContent: "redis is fast",\n  }),\n  new Document({\n    metadata: { foo: "bar" },\n    pageContent: "the quick brown fox jumped over the lazy dog",\n  }),\n  new Document({\n    metadata: { baz: "qux" },\n    pageContent: "lorem ipsum dolor sit amet",\n  }),\n  new Document({\n    metadata: { baz: "qux" },\n    pageContent: "consectetur adipiscing elit",\n  }),\n];\n\nconst vectorStore = await RedisVectorStore.fromDocuments(\n  docs,\n  new OpenAIEmbeddings(),\n  {\n    redisClient: client,\n    indexName: "docs",\n  }\n);\n\nawait vectorStore.delete({ deleteAll: true });\n\nawait client.disconnect();\n',imports:[{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"},{local:"RedisVectorStore",imported:"RedisVectorStore",source:"@langchain/redis"},{local:"Document",imported:"Document",source:"@langchain/core/documents"}]}},13866:e=>{e.exports={content:'import { createClient } from "redis";\nimport { OpenAIEmbeddings } from "@langchain/openai";\nimport { RedisVectorStore } from "@langchain/redis";\nimport { Document } from "@langchain/core/documents";\n\nconst client = createClient({\n  url: process.env.REDIS_URL ?? "redis://localhost:6379",\n});\nawait client.connect();\n\nconst docs = [\n  new Document({\n    metadata: { foo: "bar" },\n    pageContent: "redis is fast",\n  }),\n  new Document({\n    metadata: { foo: "bar" },\n    pageContent: "the quick brown fox jumped over the lazy dog",\n  }),\n  new Document({\n    metadata: { baz: "qux" },\n    pageContent: "lorem ipsum dolor sit amet",\n  }),\n  new Document({\n    metadata: { baz: "qux" },\n    pageContent: "consectetur adipiscing elit",\n  }),\n];\n\nconst vectorStore = await RedisVectorStore.fromDocuments(\n  docs,\n  new OpenAIEmbeddings(),\n  {\n    redisClient: client,\n    indexName: "docs",\n    createIndexOptions: {\n      TEMPORARY: 1000,\n    },\n  }\n);\n\nawait client.disconnect();\n',imports:[{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"},{local:"RedisVectorStore",imported:"RedisVectorStore",source:"@langchain/redis"},{local:"Document",imported:"Document",source:"@langchain/core/documents"}]}},75483:e=>{e.exports={content:'import { createClient } from "redis";\nimport { ChatOpenAI, OpenAIEmbeddings } from "@langchain/openai";\nimport { RedisVectorStore } from "@langchain/redis";\nimport { ChatPromptTemplate } from "@langchain/core/prompts";\nimport { createStuffDocumentsChain } from "langchain/chains/combine_documents";\nimport { createRetrievalChain } from "langchain/chains/retrieval";\n\nconst client = createClient({\n  url: process.env.REDIS_URL ?? "redis://localhost:6379",\n});\nawait client.connect();\n\nconst vectorStore = new RedisVectorStore(new OpenAIEmbeddings(), {\n  redisClient: client,\n  indexName: "docs",\n});\n\n/* Simple standalone search in the vector DB */\nconst simpleRes = await vectorStore.similaritySearch("redis", 1);\nconsole.log(simpleRes);\n/*\n[\n  Document {\n    pageContent: "redis is fast",\n    metadata: { foo: "bar" }\n  }\n]\n*/\n\n/* Search in the vector DB using filters */\nconst filterRes = await vectorStore.similaritySearch("redis", 3, ["qux"]);\nconsole.log(filterRes);\n/*\n[\n  Document {\n    pageContent: "consectetur adipiscing elit",\n    metadata: { baz: "qux" },\n  },\n  Document {\n    pageContent: "lorem ipsum dolor sit amet",\n    metadata: { baz: "qux" },\n  }\n]\n*/\n\n/* Usage as part of a chain */\nconst model = new ChatOpenAI({ model: "gpt-3.5-turbo-1106" });\nconst questionAnsweringPrompt = ChatPromptTemplate.fromMessages([\n  [\n    "system",\n    "Answer the user\'s questions based on the below context:\\n\\n{context}",\n  ],\n  ["human", "{input}"],\n]);\n\nconst combineDocsChain = await createStuffDocumentsChain({\n  llm: model,\n  prompt: questionAnsweringPrompt,\n});\n\nconst chain = await createRetrievalChain({\n  retriever: vectorStore.asRetriever(),\n  combineDocsChain,\n});\n\nconst chainRes = await chain.invoke({ input: "What did the fox do?" });\nconsole.log(chainRes);\n/*\n  {\n    input: \'What did the fox do?\',\n    chat_history: [],\n    context: [\n      Document {\n        pageContent: \'the quick brown fox jumped over the lazy dog\',\n        metadata: [Object]\n      },\n      Document {\n        pageContent: \'lorem ipsum dolor sit amet\',\n        metadata: [Object]\n      },\n      Document {\n        pageContent: \'consectetur adipiscing elit\',\n        metadata: [Object]\n      },\n      Document { pageContent: \'redis is fast\', metadata: [Object] }\n    ],\n    answer: \'The fox jumped over the lazy dog.\'\n  }\n*/\n\nawait client.disconnect();\n',imports:[{local:"ChatOpenAI",imported:"ChatOpenAI",source:"@langchain/openai"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"},{local:"RedisVectorStore",imported:"RedisVectorStore",source:"@langchain/redis"},{local:"ChatPromptTemplate",imported:"ChatPromptTemplate",source:"@langchain/core/prompts"},{local:"createStuffDocumentsChain",imported:"createStuffDocumentsChain",source:"langchain/chains/combine_documents"},{local:"createRetrievalChain",imported:"createRetrievalChain",source:"langchain/chains/retrieval"}]}}}]);
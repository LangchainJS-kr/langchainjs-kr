"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8040],{9547:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var t=a(74848),s=a(28453),o=a(27846);const r={sidebar_class_name:"hidden",title:"How to use tools"},l=void 0,i={id:"how_to/chatbots_tools",title:"How to use tools",description:"This guide assumes familiarity with the following:",source:"@site/docs/how_to/chatbots_tools.mdx",sourceDirName:"how_to",slug:"/how_to/chatbots_tools",permalink:"/docs/how_to/chatbots_tools",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/how_to/chatbots_tools.mdx",tags:[],version:"current",frontMatter:{sidebar_class_name:"hidden",title:"How to use tools"},sidebar:"tutorialSidebar",previous:{title:"How to do retrieval",permalink:"/docs/how_to/chatbots_retrieval"},next:{title:"How to split code",permalink:"/docs/how_to/code_splitter"}},c={},u=[{value:"Setup",id:"setup",level:2},{value:"Running the agent",id:"running-the-agent",level:2},{value:"Conversational responses",id:"conversational-responses",level:2},{value:"Next steps",id:"next-steps",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.admonition,{title:"Prerequisites",type:"info",children:[(0,t.jsx)(n.p,{children:"This guide assumes familiarity with the following:"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"../../docs/tutorials/chatbot",children:"Chatbots"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"../../docs/concepts#tools",children:"Tools"})}),"\n"]})]}),"\n",(0,t.jsx)(n.p,{children:"This section will cover how to create conversational agents: chatbots\nthat can interact with other systems and APIs using tools."}),"\n",(0,t.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,t.jsxs)(n.p,{children:["For this guide, we\u2019ll be using an OpenAI tools agent with a single tool\nfor searching the web. The default will be powered by\n",(0,t.jsx)(n.a,{href:"../../docs/integrations/tools/tavily_search",children:"Tavily"}),", but you can\nswitch it out for any similar tool. The rest of this section will assume\nyou\u2019re using Tavily."]}),"\n",(0,t.jsxs)(n.p,{children:["You\u2019ll need to ",(0,t.jsx)(n.a,{href:"https://tavily.com",children:"sign up for an account on the Tavily\nwebsite"}),", and install the following packages:"]}),"\n","\n",(0,t.jsx)(o.A,{children:(0,t.jsx)(n.p,{children:"@langchain/core @langchain/openai langchain"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { TavilySearchResults } from "@langchain/community/tools/tavily_search";\nimport { ChatOpenAI } from "@langchain/openai";\n\nconst tools = [\n  new TavilySearchResults({\n    maxResults: 1,\n  }),\n];\n\nconst llm = new ChatOpenAI({\n  model: "gpt-3.5-turbo-1106",\n  temperature: 0,\n});\n'})}),"\n",(0,t.jsx)(n.p,{children:"To make our agent conversational, we must also choose a prompt with a\nplaceholder for our chat history. Here\u2019s an example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { ChatPromptTemplate } from "@langchain/core/prompts";\n\n// Adapted from https://smith.langchain.com/hub/hwchase17/openai-tools-agent\nconst prompt = ChatPromptTemplate.fromMessages([\n  [\n    "system",\n    "You are a helpful assistant. You may not need to use tools for every query - the user may just want to chat!",\n  ],\n  ["placeholder", "{messages}"],\n  ["placeholder", "{agent_scratchpad}"],\n]);\n'})}),"\n",(0,t.jsx)(n.p,{children:"Great! Now let\u2019s assemble our agent:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { AgentExecutor, createOpenAIToolsAgent } from "langchain/agents";\n\nconst agent = await createOpenAIToolsAgent({\n  llm,\n  tools,\n  prompt,\n});\n\nconst agentExecutor = new AgentExecutor({ agent, tools });\n'})}),"\n",(0,t.jsx)(n.h2,{id:"running-the-agent",children:"Running the agent"}),"\n",(0,t.jsx)(n.p,{children:"Now that we\u2019ve set up our agent, let\u2019s try interacting with it! It can\nhandle both trivial queries that require no lookup:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { HumanMessage } from "@langchain/core/messages";\n\nawait agentExecutor.invoke({\n  messages: [new HumanMessage("I\'m Nemo!")],\n});\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:'{\n  messages: [\n    HumanMessage {\n      lc_serializable: true,\n      lc_kwargs: {\n        content: "I\'m Nemo!",\n        additional_kwargs: {},\n        response_metadata: {}\n      },\n      lc_namespace: [ "langchain_core", "messages" ],\n      content: "I\'m Nemo!",\n      name: undefined,\n      additional_kwargs: {},\n      response_metadata: {}\n    }\n  ],\n  output: "Hello Nemo! It\'s great to meet you. How can I assist you today?"\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Or, it can use of the passed search tool to get up to date information\nif needed:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'await agentExecutor.invoke({\n  messages: [\n    new HumanMessage(\n      "What is the current conservation status of the Great Barrier Reef?"\n    ),\n  ],\n});\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:'{\n  messages: [\n    HumanMessage {\n      lc_serializable: true,\n      lc_kwargs: {\n        content: "What is the current conservation status of the Great Barrier Reef?",\n        additional_kwargs: {},\n        response_metadata: {}\n      },\n      lc_namespace: [ "langchain_core", "messages" ],\n      content: "What is the current conservation status of the Great Barrier Reef?",\n      name: undefined,\n      additional_kwargs: {},\n      response_metadata: {}\n    }\n  ],\n  output: "The current conservation status of the Great Barrier Reef is a cause for concern. The International "... 801 more characters\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"conversational-responses",children:"Conversational responses"}),"\n",(0,t.jsx)(n.p,{children:"Because our prompt contains a placeholder for chat history messages, our\nagent can also take previous interactions into account and respond\nconversationally like a standard chatbot:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { AIMessage } from "@langchain/core/messages";\n\nawait agentExecutor.invoke({\n  messages: [\n    new HumanMessage("I\'m Nemo!"),\n    new AIMessage("Hello Nemo! How can I assist you today?"),\n    new HumanMessage("What is my name?"),\n  ],\n});\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:'{\n  messages: [\n    HumanMessage {\n      lc_serializable: true,\n      lc_kwargs: {\n        content: "I\'m Nemo!",\n        additional_kwargs: {},\n        response_metadata: {}\n      },\n      lc_namespace: [ "langchain_core", "messages" ],\n      content: "I\'m Nemo!",\n      name: undefined,\n      additional_kwargs: {},\n      response_metadata: {}\n    },\n    AIMessage {\n      lc_serializable: true,\n      lc_kwargs: {\n        content: "Hello Nemo! How can I assist you today?",\n        tool_calls: [],\n        invalid_tool_calls: [],\n        additional_kwargs: {},\n        response_metadata: {}\n      },\n      lc_namespace: [ "langchain_core", "messages" ],\n      content: "Hello Nemo! How can I assist you today?",\n      name: undefined,\n      additional_kwargs: {},\n      response_metadata: {},\n      tool_calls: [],\n      invalid_tool_calls: []\n    },\n    HumanMessage {\n      lc_serializable: true,\n      lc_kwargs: {\n        content: "What is my name?",\n        additional_kwargs: {},\n        response_metadata: {}\n      },\n      lc_namespace: [ "langchain_core", "messages" ],\n      content: "What is my name?",\n      name: undefined,\n      additional_kwargs: {},\n      response_metadata: {}\n    }\n  ],\n  output: "Your name is Nemo!"\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["If preferred, you can also wrap the agent executor in a\n",(0,t.jsx)(n.code,{children:"RunnableWithMessageHistory"})," class to internally manage history\nmessages. First, we need to slightly modify the prompt to take a\nseparate input variable so that the wrapper can parse which input value\nto store as history:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// Adapted from https://smith.langchain.com/hub/hwchase17/openai-tools-agent\nconst prompt2 = ChatPromptTemplate.fromMessages([\n  [\n    "system",\n    "You are a helpful assistant. You may not need to use tools for every query - the user may just want to chat!",\n  ],\n  ["placeholder", "{chat_history}"],\n  ["human", "{input}"],\n  ["placeholder", "{agent_scratchpad}"],\n]);\n\nconst agent2 = await createOpenAIToolsAgent({\n  llm,\n  tools,\n  prompt: prompt2,\n});\n\nconst agentExecutor2 = new AgentExecutor({ agent: agent2, tools });\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Then, because our agent executor has multiple outputs, we also have to\nset the ",(0,t.jsx)(n.code,{children:"outputMessagesKey"})," property when initializing the wrapper:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { ChatMessageHistory } from "langchain/stores/message/in_memory";\nimport { RunnableWithMessageHistory } from "@langchain/core/runnables";\n\nconst demoEphemeralChatMessageHistory = new ChatMessageHistory();\n\nconst conversationalAgentExecutor = new RunnableWithMessageHistory({\n  runnable: agentExecutor2,\n  getMessageHistory: (_sessionId) => demoEphemeralChatMessageHistory,\n  inputMessagesKey: "input",\n  outputMessagesKey: "output",\n  historyMessagesKey: "chat_history",\n});\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'await conversationalAgentExecutor.invoke(\n  { input: "I\'m Nemo!" },\n  { configurable: { sessionId: "unused" } }\n);\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:'{\n  input: "I\'m Nemo!",\n  chat_history: [\n    HumanMessage {\n      lc_serializable: true,\n      lc_kwargs: {\n        content: "I\'m Nemo!",\n        additional_kwargs: {},\n        response_metadata: {}\n      },\n      lc_namespace: [ "langchain_core", "messages" ],\n      content: "I\'m Nemo!",\n      name: undefined,\n      additional_kwargs: {},\n      response_metadata: {}\n    },\n    AIMessage {\n      lc_serializable: true,\n      lc_kwargs: {\n        content: "Hello Nemo! It\'s great to meet you. How can I assist you today?",\n        tool_calls: [],\n        invalid_tool_calls: [],\n        additional_kwargs: {},\n        response_metadata: {}\n      },\n      lc_namespace: [ "langchain_core", "messages" ],\n      content: "Hello Nemo! It\'s great to meet you. How can I assist you today?",\n      name: undefined,\n      additional_kwargs: {},\n      response_metadata: {},\n      tool_calls: [],\n      invalid_tool_calls: []\n    }\n  ],\n  output: "Hello Nemo! It\'s great to meet you. How can I assist you today?"\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'await conversationalAgentExecutor.invoke(\n  { input: "What is my name?" },\n  { configurable: { sessionId: "unused" } }\n);\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:'{\n  input: "What is my name?",\n  chat_history: [\n    HumanMessage {\n      lc_serializable: true,\n      lc_kwargs: {\n        content: "I\'m Nemo!",\n        additional_kwargs: {},\n        response_metadata: {}\n      },\n      lc_namespace: [ "langchain_core", "messages" ],\n      content: "I\'m Nemo!",\n      name: undefined,\n      additional_kwargs: {},\n      response_metadata: {}\n    },\n    AIMessage {\n      lc_serializable: true,\n      lc_kwargs: {\n        content: "Hello Nemo! It\'s great to meet you. How can I assist you today?",\n        tool_calls: [],\n        invalid_tool_calls: [],\n        additional_kwargs: {},\n        response_metadata: {}\n      },\n      lc_namespace: [ "langchain_core", "messages" ],\n      content: "Hello Nemo! It\'s great to meet you. How can I assist you today?",\n      name: undefined,\n      additional_kwargs: {},\n      response_metadata: {},\n      tool_calls: [],\n      invalid_tool_calls: []\n    },\n    HumanMessage {\n      lc_serializable: true,\n      lc_kwargs: {\n        content: "What is my name?",\n        additional_kwargs: {},\n        response_metadata: {}\n      },\n      lc_namespace: [ "langchain_core", "messages" ],\n      content: "What is my name?",\n      name: undefined,\n      additional_kwargs: {},\n      response_metadata: {}\n    },\n    AIMessage {\n      lc_serializable: true,\n      lc_kwargs: {\n        content: "Your name is Nemo!",\n        tool_calls: [],\n        invalid_tool_calls: [],\n        additional_kwargs: {},\n        response_metadata: {}\n      },\n      lc_namespace: [ "langchain_core", "messages" ],\n      content: "Your name is Nemo!",\n      name: undefined,\n      additional_kwargs: {},\n      response_metadata: {},\n      tool_calls: [],\n      invalid_tool_calls: []\n    }\n  ],\n  output: "Your name is Nemo!"\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,t.jsx)(n.p,{children:"You\u2019ve now learned how to create chatbots with tool-use capabilities."}),"\n",(0,t.jsxs)(n.p,{children:["For more, check out the other guides in this section, including ",(0,t.jsx)(n.a,{href:"../../docs/how_to/chatbots_memory",children:"how to\nadd history to your chatbots"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},19365:(e,n,a)=>{a.d(n,{A:()=>r});a(96540);var t=a(34164);const s={tabItem:"tabItem_Ymn6"};var o=a(74848);function r(e){let{children:n,hidden:a,className:r}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,t.A)(s.tabItem,r),hidden:a,children:n})}},11470:(e,n,a)=>{a.d(n,{A:()=>v});var t=a(96540),s=a(34164),o=a(23104),r=a(56347),l=a(205),i=a(57485),c=a(31682),u=a(89466);function d(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:a}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:a,attributes:t,default:s}}=e;return{value:n,label:a,attributes:t,default:s}}))}(a);return function(e){const n=(0,c.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,a])}function m(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:a}=e;const s=(0,r.W6)(),o=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:n,groupId:a});return[(0,i.aZ)(o),(0,t.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(s.location.search);n.set(o,e),s.replace({...s.location,search:n.toString()})}),[o,s])]}function g(e){const{defaultValue:n,queryString:a=!1,groupId:s}=e,o=h(e),[r,i]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=a.find((e=>e.default))??a[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:o}))),[c,d]=p({queryString:a,groupId:s}),[g,_]=function(e){let{groupId:n}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,o]=(0,u.Dv)(a);return[s,(0,t.useCallback)((e=>{a&&o.set(e)}),[a,o])]}({groupId:s}),w=(()=>{const e=c??g;return m({value:e,tabValues:o})?e:null})();(0,l.A)((()=>{w&&i(w)}),[w]);return{selectedValue:r,selectValue:(0,t.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),d(e),_(e)}),[d,_,o]),tabValues:o}}var _=a(92303);const w={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=a(74848);function f(e){let{className:n,block:a,selectedValue:t,selectValue:r,tabValues:l}=e;const i=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.a_)(),u=e=>{const n=e.currentTarget,a=i.indexOf(n),s=l[a].value;s!==t&&(c(n),r(s))},d=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const a=i.indexOf(e.currentTarget)+1;n=i[a]??i[0];break}case"ArrowLeft":{const a=i.indexOf(e.currentTarget)-1;n=i[a]??i[i.length-1];break}}n?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":a},n),children:l.map((e=>{let{value:n,label:a,attributes:o}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>i.push(e),onKeyDown:d,onClick:u,...o,className:(0,s.A)("tabs__item",w.tabItem,o?.className,{"tabs__item--active":t===n}),children:a??n},n)}))})}function b(e){let{lazy:n,children:a,selectedValue:s}=e;const o=(Array.isArray(a)?a:[a]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===s));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:o.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function x(e){const n=g(e);return(0,y.jsxs)("div",{className:(0,s.A)("tabs-container",w.tabList),children:[(0,y.jsx)(f,{...n,...e}),(0,y.jsx)(b,{...n,...e})]})}function v(e){const n=(0,_.A)();return(0,y.jsx)(x,{...e,children:d(e.children)},String(n))}},27846:(e,n,a)=>{a.d(n,{A:()=>l});a(96540);var t=a(11470),s=a(19365),o=a(21432),r=a(74848);function l(e){let{children:n}=e;return(0,r.jsxs)(t.A,{groupId:"npm2yarn",children:[(0,r.jsx)(s.A,{value:"npm",label:"npm",children:(0,r.jsxs)(o.A,{language:"bash",children:["npm i ",n]})}),(0,r.jsx)(s.A,{value:"yarn",label:"yarn",default:!0,children:(0,r.jsxs)(o.A,{language:"bash",children:["yarn add ",n]})}),(0,r.jsx)(s.A,{value:"pnpm",label:"pnpm",children:(0,r.jsxs)(o.A,{language:"bash",children:["pnpm add ",n]})})]})}}}]);
"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6209],{85682:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>r,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>i});var t=s(74848),o=s(28453);const a={sidebar_class_name:"hidden",title:"How to pass callbacks into a module constructor"},l=void 0,c={id:"how_to/callbacks_constructor",title:"How to pass callbacks into a module constructor",description:"This guide assumes familiarity with the following concepts:",source:"@site/docs/how_to/callbacks_constructor.mdx",sourceDirName:"how_to",slug:"/how_to/callbacks_constructor",permalink:"/docs/how_to/callbacks_constructor",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/how_to/callbacks_constructor.mdx",tags:[],version:"current",frontMatter:{sidebar_class_name:"hidden",title:"How to pass callbacks into a module constructor"},sidebar:"tutorialSidebar",previous:{title:"How to make callbacks run in the background",permalink:"/docs/how_to/callbacks_backgrounding"},next:{title:"How to pass callbacks in at runtime",permalink:"/docs/how_to/callbacks_runtime"}},r={},i=[{value:"Next steps",id:"next-steps",level:2}];function d(n){const e={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.admonition,{title:"Prerequisites",type:"info",children:[(0,t.jsx)(e.p,{children:"This guide assumes familiarity with the following concepts:"}),(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"../../docs/concepts/#callbacks",children:"Callbacks"})}),"\n"]})]}),"\n",(0,t.jsxs)(e.p,{children:["Most LangChain modules allow you to pass ",(0,t.jsx)(e.code,{children:"callbacks"})," directly into the\nconstructor. In this case, the callbacks will only be called for that\ninstance (and any nested runs)."]}),"\n",(0,t.jsxs)(e.p,{children:["Here\u2019s an example using LangChain\u2019s built-in\n",(0,t.jsx)(e.a,{href:"https://api.js.langchain.com/classes/langchain_core_tracers_console.ConsoleCallbackHandler.html",children:(0,t.jsx)(e.code,{children:"ConsoleCallbackHandler"})}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:'import { ConsoleCallbackHandler } from "@langchain/core/tracers/console";\nimport { ChatPromptTemplate } from "@langchain/core/prompts";\nimport { ChatAnthropic } from "@langchain/anthropic";\n\nconst handler = new ConsoleCallbackHandler();\n\nconst prompt = ChatPromptTemplate.fromTemplate(`What is 1 + {number}?`);\nconst model = new ChatAnthropic({\n  model: "claude-3-sonnet-20240229",\n  callbacks: [handler],\n});\n\nconst chain = prompt.pipe(model);\n\nawait chain.invoke({ number: "2" });\n'})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:'[llm/start] [1:llm:ChatAnthropic] Entering LLM run with input: {\n  "messages": [\n    [\n      {\n        "lc": 1,\n        "type": "constructor",\n        "id": [\n          "langchain_core",\n          "messages",\n          "HumanMessage"\n        ],\n        "kwargs": {\n          "content": "What is 1 + 2?",\n          "additional_kwargs": {},\n          "response_metadata": {}\n        }\n      }\n    ]\n  ]\n}\n[llm/end] [1:llm:ChatAnthropic] [1.00s] Exiting LLM run with output: {\n  "generations": [\n    [\n      {\n        "text": "1 + 2 = 3",\n        "message": {\n          "lc": 1,\n          "type": "constructor",\n          "id": [\n            "langchain_core",\n            "messages",\n            "AIMessage"\n          ],\n          "kwargs": {\n            "content": "1 + 2 = 3",\n            "tool_calls": [],\n            "invalid_tool_calls": [],\n            "additional_kwargs": {\n              "id": "msg_011Z1cgi3gyNGxT55wnRNkXq",\n              "type": "message",\n              "role": "assistant",\n              "model": "claude-3-sonnet-20240229",\n              "stop_sequence": null,\n              "usage": {\n                "input_tokens": 16,\n                "output_tokens": 13\n              },\n              "stop_reason": "end_turn"\n            },\n            "response_metadata": {\n              "id": "msg_011Z1cgi3gyNGxT55wnRNkXq",\n              "model": "claude-3-sonnet-20240229",\n              "stop_sequence": null,\n              "usage": {\n                "input_tokens": 16,\n                "output_tokens": 13\n              },\n              "stop_reason": "end_turn"\n            }\n          }\n        }\n      }\n    ]\n  ],\n  "llmOutput": {\n    "id": "msg_011Z1cgi3gyNGxT55wnRNkXq",\n    "model": "claude-3-sonnet-20240229",\n    "stop_sequence": null,\n    "usage": {\n      "input_tokens": 16,\n      "output_tokens": 13\n    },\n    "stop_reason": "end_turn"\n  }\n}\n'})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:'AIMessage {\n  lc_serializable: true,\n  lc_kwargs: {\n    content: "1 + 2 = 3",\n    tool_calls: [],\n    invalid_tool_calls: [],\n    additional_kwargs: {\n      id: "msg_011Z1cgi3gyNGxT55wnRNkXq",\n      type: "message",\n      role: "assistant",\n      model: "claude-3-sonnet-20240229",\n      stop_sequence: null,\n      usage: { input_tokens: 16, output_tokens: 13 },\n      stop_reason: "end_turn"\n    },\n    response_metadata: {}\n  },\n  lc_namespace: [ "langchain_core", "messages" ],\n  content: "1 + 2 = 3",\n  name: undefined,\n  additional_kwargs: {\n    id: "msg_011Z1cgi3gyNGxT55wnRNkXq",\n    type: "message",\n    role: "assistant",\n    model: "claude-3-sonnet-20240229",\n    stop_sequence: null,\n    usage: { input_tokens: 16, output_tokens: 13 },\n    stop_reason: "end_turn"\n  },\n  response_metadata: {\n    id: "msg_011Z1cgi3gyNGxT55wnRNkXq",\n    model: "claude-3-sonnet-20240229",\n    stop_sequence: null,\n    usage: { input_tokens: 16, output_tokens: 13 },\n    stop_reason: "end_turn"\n  },\n  tool_calls: [],\n  invalid_tool_calls: []\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"You can see that we only see events from the chat model run - none from\nthe prompt or broader chain."}),"\n",(0,t.jsx)(e.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,t.jsx)(e.p,{children:"You\u2019ve now learned how to pass callbacks into a constructor."}),"\n",(0,t.jsxs)(e.p,{children:["Next, check out the other how-to guides in this section, such as how to\ncreate your own ",(0,t.jsx)(e.a,{href:"../../docs/how_to/custom_callbacks",children:"custom callback\nhandlers"}),"."]})]})}function u(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}}}]);
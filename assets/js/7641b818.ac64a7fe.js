(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8948,65],{70078:(t,n,e)=>{"use strict";e.r(n),e.d(n,{assets:()=>u,contentTitle:()=>p,default:()=>h,frontMatter:()=>c,metadata:()=>d,toc:()=>g});var o=e(74848),s=e(28453),i=e(64428),a=e(52184),l=e.n(a),r=e(78847);const c={hide_table_of_contents:!0},p="SQL Agent Toolkit",d={id:"integrations/toolkits/sql",title:"SQL Agent Toolkit",description:"This example shows how to load and use an agent with a SQL toolkit.",source:"@site/docs/integrations/toolkits/sql.mdx",sourceDirName:"integrations/toolkits",slug:"/integrations/toolkits/sql",permalink:"/docs/integrations/toolkits/sql",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/toolkits/sql.mdx",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"integrations",previous:{title:"AWS Step Functions Toolkit",permalink:"/docs/integrations/toolkits/sfn_agent"},next:{title:"VectorStore Agent Toolkit",permalink:"/docs/integrations/toolkits/vectorstore"}},u={},g=[{value:"Setup",id:"setup",level:2},{value:"Usage",id:"usage",level:2},...r.toc];function m(t){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...t.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"sql-agent-toolkit",children:"SQL Agent Toolkit"}),"\n",(0,o.jsx)(n.p,{children:"This example shows how to load and use an agent with a SQL toolkit."}),"\n",(0,o.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,o.jsxs)(n.p,{children:["You'll need to first install ",(0,o.jsx)(n.code,{children:"typeorm"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install typeorm\n"})}),"\n",(0,o.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n","\n","\n",(0,o.jsx)(r.default,{}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai\n"})}),"\n",(0,o.jsx)(i.A,{language:"typescript",children:l()})]})}function h(t={}){const{wrapper:n}={...(0,s.R)(),...t.components};return n?(0,o.jsx)(n,{...t,children:(0,o.jsx)(m,{...t})}):m(t)}},78847:(t,n,e)=>{"use strict";e.r(n),e.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var o=e(74848),s=e(28453);const i={},a=void 0,l={id:"mdx_components/integration_install_tooltip",title:"integration_install_tooltip",description:"See this section for general instructions on installing integration packages.",source:"@site/docs/mdx_components/integration_install_tooltip.mdx",sourceDirName:"mdx_components",slug:"/mdx_components/integration_install_tooltip",permalink:"/docs/mdx_components/integration_install_tooltip",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/mdx_components/integration_install_tooltip.mdx",tags:[],version:"current",frontMatter:{}},r={},c=[];function p(t){const n={a:"a",admonition:"admonition",p:"p",...(0,s.R)(),...t.components};return(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["See ",(0,o.jsx)(n.a,{href:"/docs/how_to/installation#installing-integration-packages",children:"this section for general instructions on installing integration packages"}),"."]})})}function d(t={}){const{wrapper:n}={...(0,s.R)(),...t.components};return n?(0,o.jsx)(n,{...t,children:(0,o.jsx)(p,{...t})}):p(t)}},52184:t=>{t.exports={content:'import { OpenAI } from "@langchain/openai";\nimport { SqlDatabase } from "langchain/sql_db";\nimport { createSqlAgent, SqlToolkit } from "langchain/agents/toolkits/sql";\nimport { DataSource } from "typeorm";\n\n/** This example uses Chinook database, which is a sample database available for SQL Server, Oracle, MySQL, etc.\n * To set it up follow the instructions on https://database.guide/2-sample-databases-sqlite/, placing the .db file\n * in the examples folder.\n */\nexport const run = async () => {\n  const datasource = new DataSource({\n    type: "sqlite",\n    database: "Chinook.db",\n  });\n  const db = await SqlDatabase.fromDataSourceParams({\n    appDataSource: datasource,\n  });\n  const model = new OpenAI({ temperature: 0 });\n  const toolkit = new SqlToolkit(db, model);\n  const executor = createSqlAgent(model, toolkit);\n\n  const input = `List the total sales per country. Which country\'s customers spent the most?`;\n\n  console.log(`Executing with input "${input}"...`);\n\n  const result = await executor.invoke({ input });\n\n  console.log(`Got output ${result.output}`);\n\n  console.log(\n    `Got intermediate steps ${JSON.stringify(\n      result.intermediateSteps,\n      null,\n      2\n    )}`\n  );\n\n  await datasource.destroy();\n};\n',imports:[{local:"OpenAI",imported:"OpenAI",source:"@langchain/openai"},{local:"SqlDatabase",imported:"SqlDatabase",source:"langchain/sql_db"},{local:"createSqlAgent",imported:"createSqlAgent",source:"langchain/agents/toolkits/sql"},{local:"SqlToolkit",imported:"SqlToolkit",source:"langchain/agents/toolkits/sql"}]}}}]);
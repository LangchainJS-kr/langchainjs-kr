"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7295],{4453:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var t=i(4848),s=i(8453);const o={sidebar_position:1,sidebar_label:"v0.2"},r="LangChain v0.2",a={id:"versions/v0_2",title:"LangChain v0.2",description:"LangChain v0.2 was released in May 2024. This release includes a number of breaking changes and deprecations. This document contains a guide on upgrading to 0.2.x, as well as a list of deprecations and breaking changes.",source:"@site/docs/versions/v0_2.mdx",sourceDirName:"versions",slug:"/versions/v0_2",permalink:"/docs/versions/v0_2",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/versions/v0_2.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"v0.2"},sidebar:"tutorialSidebar",previous:{title:"\uac1c\uc694",permalink:"/docs/versions/overview"},next:{title:"\ub9b4\ub9ac\uc988 \uc815\ucc45",permalink:"/docs/versions/release_policy"}},l={},c=[{value:"Migration",id:"migration",level:2},{value:"Upgrade to new imports",id:"upgrade-to-new-imports",level:3},{value:"Deprecation timeline",id:"deprecation-timeline",level:4},{value:"Installation",id:"installation",level:4},{value:"Usage",id:"usage",level:4},{value:"Other options",id:"other-options",level:4}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"langchain-v02",children:"LangChain v0.2"}),"\n",(0,t.jsx)(n.p,{children:"LangChain v0.2 was released in May 2024. This release includes a number of breaking changes and deprecations. This document contains a guide on upgrading to 0.2.x, as well as a list of deprecations and breaking changes."}),"\n",(0,t.jsx)(n.h2,{id:"migration",children:"Migration"}),"\n",(0,t.jsxs)(n.p,{children:["This documentation will help you upgrade your code to LangChain ",(0,t.jsx)(n.code,{children:"0.2.x."}),". To prepare for migration, we first recommend you take the following steps:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["install the 0.2.x versions of ",(0,t.jsx)(n.code,{children:"@langchain/core"}),", langchain and upgrade to recent versions of other packages that you may be using (e.g. ",(0,t.jsx)(n.code,{children:"@langchain/langgraph"}),", ",(0,t.jsx)(n.code,{children:"@langchain/community"}),", ",(0,t.jsx)(n.code,{children:"@langchain/openai"}),", etc.)"]}),"\n",(0,t.jsx)(n.li,{children:"Verify that your code runs properly with the new packages (e.g., unit tests pass)"}),"\n",(0,t.jsxs)(n.li,{children:["Install a recent version of ",(0,t.jsx)(n.code,{children:"langchain-cli"})," , and use the tool to replace old imports used by your code with the new imports. (See instructions below.)"]}),"\n",(0,t.jsx)(n.li,{children:"Manually resolve any remaining deprecation warnings"}),"\n",(0,t.jsx)(n.li,{children:"Re-run unit tests"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"upgrade-to-new-imports",children:"Upgrade to new imports"}),"\n",(0,t.jsxs)(n.p,{children:["We created a tool to help migrate your code. This tool is still in ",(0,t.jsx)(n.strong,{children:"beta"})," and may not cover all cases, but\nwe hope that it will help you migrate your code more quickly."]}),"\n",(0,t.jsx)(n.p,{children:"The migration script has the following limitations:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"It's limited to helping users move from old imports to new imports. It doesn't help address other deprecations."}),"\n",(0,t.jsxs)(n.li,{children:["It can't handle imports that involve ",(0,t.jsx)(n.code,{children:"as"})," ."]}),"\n",(0,t.jsx)(n.li,{children:"New imports are always placed in global scope, even if the old import that was replaced was located inside some local scope (e..g, function body)."}),"\n",(0,t.jsx)(n.li,{children:"It will likely miss some deprecated imports."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Here is an example of the import changes that the migration script can help apply automatically:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"From Package"}),(0,t.jsx)(n.th,{children:"To Package"}),(0,t.jsx)(n.th,{children:"Deprecated Import"}),(0,t.jsx)(n.th,{children:"New Import"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"langchain"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"@langchain/community"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'import { UpstashVectorStore } from "langchain/vectorstores/upstash"'})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'import { UpstashVectorStore } from "@langchain/community/vectorstores/upstash"'})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"@langchain/community"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"@langchain/openai"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'import { ChatOpenAI } from "@langchain/community/chat_models/openai"'})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'import { ChatOpenAI } from "@langchain/openai"'})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"langchain"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"@langchain/core"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'import { Document } from "langchain/schema/document"'})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'import { Document } from "@langchain/core/documents"'})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"langchain"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"@langchain/textsplitters"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'import { RecursiveCharacterTextSplitter } from "langchain/text_splitter"'})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'import { RecursiveCharacterTextSplitter } from "@langchain/textsplitters"'})})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"deprecation-timeline",children:"Deprecation timeline"}),"\n",(0,t.jsx)(n.p,{children:"We have two main types of deprecations:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Code that was moved from ",(0,t.jsx)(n.code,{children:"langchain"})," into another package (e.g, ",(0,t.jsx)(n.code,{children:"@langchain/community"}),")"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["If you try to import it from ",(0,t.jsx)(n.code,{children:"langchain"}),", it will fail since the entrypoint has been removed."]}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsxs)(n.li,{children:["Code that has better alternatives available and will eventually be removed, so there's only a single way to do things. (e.g., ",(0,t.jsx)(n.code,{children:"predictMessages"})," method in ChatModels has been deprecated in favor of ",(0,t.jsx)(n.code,{children:"invoke"}),")."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Many of these were marked for removal in 0.2. We have bumped the removal to 0.3."}),"\n",(0,t.jsx)(n.h4,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["The 0.2.X migration script is only available in version ",(0,t.jsx)(n.code,{children:"0.0.14-rc.1"})," or later."]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm i @langchain/scripts@0.0.14-rc.1\n"})}),"\n",(0,t.jsx)(n.h4,{id:"usage",children:"Usage"}),"\n",(0,t.jsxs)(n.p,{children:["Given that the migration script is not perfect, you should make sure you have a backup of your code first (e.g., using version control like ",(0,t.jsx)(n.code,{children:"git"}),")."]}),"\n",(0,t.jsxs)(n.p,{children:["For example, say your code still uses ",(0,t.jsx)(n.code,{children:'import ChatOpenAI from "@langchain/community/chat_models/openai";'}),":"]}),"\n",(0,t.jsxs)(n.p,{children:["Invoking the migration script will replace this import with ",(0,t.jsx)(n.code,{children:'import ChatOpenAI from "@langchain/openai";'}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { updateEntrypointsFrom0_x_xTo0_2_x } from "@langchain/scripts/migrations";\n\nconst pathToMyProject = "..."; // This path is used in the following glob pattern: `${projectPath}/**/*.{ts,tsx,js,jsx}`.\n\nupdateEntrypointsFrom0_x_xTo0_2_x({\n  projectPath: pathToMyProject,\n  shouldLog: true,\n});\n'})}),"\n",(0,t.jsx)(n.h4,{id:"other-options",children:"Other options"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'updateEntrypointsFrom0_x_xTo0_2_x({\n  projectPath: pathToMyProject,\n  tsConfigPath: "tsconfig.json", // Path to the tsConfig file. This will be used to load all the project files into the script.\n  testRun: true, // If true, the script will not save any changes, but will log the changes that would be made.\n  files: ["..."], // A list of .ts file paths to check. If this is provided, the script will only check these files.\n});\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var t=i(6540);const s={},o=t.createContext(s);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);
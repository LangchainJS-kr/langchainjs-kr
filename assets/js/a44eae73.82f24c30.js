(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1185,65],{87047:(n,e,t)=>{"use strict";t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>d,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>h});var o=t(74848),i=t(28453),s=t(78847),a=t(64428),r=t(27555),c=t.n(r);const l={sidebar_label:"AWS Step Functions Toolkit",hide_table_of_contents:!0},d="AWS Step Functions Toolkit",p={id:"integrations/toolkits/sfn_agent",title:"AWS Step Functions Toolkit",description:"AWS Step Functions are a visual workflow service that helps developers use AWS services to build distributed applications, automate processes, orchestrate microservices, and create data and machine learning (ML) pipelines.",source:"@site/docs/integrations/toolkits/sfn_agent.mdx",sourceDirName:"integrations/toolkits",slug:"/integrations/toolkits/sfn_agent",permalink:"/docs/integrations/toolkits/sfn_agent",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/toolkits/sfn_agent.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"AWS Step Functions Toolkit",hide_table_of_contents:!0},sidebar:"integrations",previous:{title:"OpenAPI Agent Toolkit",permalink:"/docs/integrations/toolkits/openapi"},next:{title:"SQL Agent Toolkit",permalink:"/docs/integrations/toolkits/sql"}},u={},h=[{value:"Setup",id:"setup",level:2},{value:"Usage",id:"usage",level:2},...s.toc,{value:"Note about credentials:",id:"note-about-credentials",level:3}];function g(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"aws-step-functions-toolkit",children:"AWS Step Functions Toolkit"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"AWS Step Functions"})," are a visual workflow service that helps developers use AWS services to build distributed applications, automate processes, orchestrate microservices, and create data and machine learning (ML) pipelines."]}),"\n",(0,o.jsxs)(e.p,{children:["By including a ",(0,o.jsx)(e.code,{children:"AWSSfn"})," tool in the list of tools provided to an Agent, you can grant your Agent the ability to invoke async workflows running in your AWS Cloud."]}),"\n",(0,o.jsxs)(e.p,{children:["When an Agent uses the ",(0,o.jsx)(e.code,{children:"AWSSfn"})," tool, it will provide an argument of type ",(0,o.jsx)(e.code,{children:"string"})," which will in turn be passed into one of the supported actions this tool supports. The supported actions are: ",(0,o.jsx)(e.code,{children:"StartExecution"}),", ",(0,o.jsx)(e.code,{children:"DescribeExecution"}),", and ",(0,o.jsx)(e.code,{children:"SendTaskSuccess"}),"."]}),"\n",(0,o.jsx)(e.h2,{id:"setup",children:"Setup"}),"\n",(0,o.jsx)(e.p,{children:"You'll need to install the Node AWS Step Functions SDK:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @aws-sdk/client-sfn\n"})}),"\n",(0,o.jsx)(e.h2,{id:"usage",children:"Usage"}),"\n","\n",(0,o.jsx)(s.default,{}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai @langchain/community\n"})}),"\n",(0,o.jsx)(e.h3,{id:"note-about-credentials",children:"Note about credentials:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["If you have not run ",(0,o.jsx)(e.a,{href:"https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html",children:(0,o.jsx)(e.code,{children:"aws configure"})})," via the AWS CLI, the ",(0,o.jsx)(e.code,{children:"region"}),", ",(0,o.jsx)(e.code,{children:"accessKeyId"}),", and ",(0,o.jsx)(e.code,{children:"secretAccessKey"})," must be provided to the AWSSfn constructor."]}),"\n",(0,o.jsx)(e.li,{children:"The IAM role corresponding to those credentials must have permission to invoke the Step Function."}),"\n"]}),"\n","\n",(0,o.jsx)(a.A,{language:"typescript",children:c()})]})}function m(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(g,{...n})}):g(n)}},78847:(n,e,t)=>{"use strict";t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var o=t(74848),i=t(28453);const s={},a=void 0,r={id:"mdx_components/integration_install_tooltip",title:"integration_install_tooltip",description:"See this section for general instructions on installing integration packages.",source:"@site/docs/mdx_components/integration_install_tooltip.mdx",sourceDirName:"mdx_components",slug:"/mdx_components/integration_install_tooltip",permalink:"/docs/mdx_components/integration_install_tooltip",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/mdx_components/integration_install_tooltip.mdx",tags:[],version:"current",frontMatter:{}},c={},l=[];function d(n){const e={a:"a",admonition:"admonition",p:"p",...(0,i.R)(),...n.components};return(0,o.jsx)(e.admonition,{type:"tip",children:(0,o.jsxs)(e.p,{children:["See ",(0,o.jsx)(e.a,{href:"/docs/how_to/installation#installing-integration-packages",children:"this section for general instructions on installing integration packages"}),"."]})})}function p(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},27555:n=>{n.exports={content:'import { OpenAI } from "@langchain/openai";\nimport {\n  AWSSfnToolkit,\n  createAWSSfnAgent,\n} from "@langchain/community/agents/toolkits/aws_sfn";\n\nconst _EXAMPLE_STATE_MACHINE_ASL = `\n{\n  "Comment": "A simple example of the Amazon States Language to define a state machine for new client onboarding.",\n  "StartAt": "OnboardNewClient",\n  "States": {\n    "OnboardNewClient": {\n      "Type": "Pass",\n      "Result": "Client onboarded!",\n      "End": true\n    }\n  }\n}`;\n\n/**\n * This example uses a deployed AWS Step Function state machine with the above Amazon State Language (ASL) definition.\n * You can test by provisioning a state machine using the above ASL within your AWS environment, or you can use a tool like LocalStack\n * to mock AWS services locally. See https://localstack.cloud/ for more information.\n */\nexport const run = async () => {\n  const model = new OpenAI({ temperature: 0 });\n  const toolkit = new AWSSfnToolkit({\n    name: "onboard-new-client-workflow",\n    description:\n      "Onboard new client workflow. Can also be used to get status of any excuting workflow or state machine.",\n    stateMachineArn:\n      "arn:aws:states:us-east-1:1234567890:stateMachine:my-state-machine", // Update with your state machine ARN accordingly\n    region: "<your Sfn\'s region>",\n    accessKeyId: "<your access key id>",\n    secretAccessKey: "<your secret access key>",\n  });\n  const executor = createAWSSfnAgent(model, toolkit);\n\n  const input = `Onboard john doe (john@example.com) as a new client.`;\n\n  console.log(`Executing with input "${input}"...`);\n\n  const result = await executor.invoke({ input });\n\n  console.log(`Got output ${result.output}`);\n\n  console.log(\n    `Got intermediate steps ${JSON.stringify(\n      result.intermediateSteps,\n      null,\n      2\n    )}`\n  );\n};\n',imports:[{local:"OpenAI",imported:"OpenAI",source:"@langchain/openai"},{local:"AWSSfnToolkit",imported:"AWSSfnToolkit",source:"@langchain/community/agents/toolkits/aws_sfn"},{local:"createAWSSfnAgent",imported:"createAWSSfnAgent",source:"@langchain/community/agents/toolkits/aws_sfn"}]}}}]);
(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6603],{10774:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>g,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>h});var s=t(74848),r=t(28453),i=t(64428),o=t(80563),d=t.n(o);const a={},c="Cohere",l={id:"integrations/text_embedding/cohere",title:"Cohere",description:"The CohereEmbeddings class uses the Cohere API to generate embeddings for a given text.",source:"@site/docs/integrations/text_embedding/cohere.mdx",sourceDirName:"integrations/text_embedding",slug:"/integrations/text_embedding/cohere",permalink:"/docs/integrations/text_embedding/cohere",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/text_embedding/cohere.mdx",tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Cloudflare Workers AI",permalink:"/docs/integrations/text_embedding/cloudflare_ai"},next:{title:"Fireworks",permalink:"/docs/integrations/text_embedding/fireworks"}},g={},h=[{value:"Usage",id:"usage",level:2}];function m(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"cohere",children:"Cohere"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"CohereEmbeddings"})," class uses the Cohere API to generate embeddings for a given text."]}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install cohere-ai @langchain/cohere\n"})}),"\n","\n",(0,s.jsx)(i.A,{language:"typescript",children:d()})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},80563:e=>{e.exports={content:'import { CohereEmbeddings } from "@langchain/cohere";\n\n/* Embed queries */\nconst embeddings = new CohereEmbeddings({\n  apiKey: "YOUR-API-KEY", // In Node.js defaults to process.env.COHERE_API_KEY\n  batchSize: 48, // Default value if omitted is 48. Max value is 96\n});\nconst res = await embeddings.embedQuery("Hello world");\nconsole.log(res);\n/* Embed documents */\nconst documentRes = await embeddings.embedDocuments(["Hello world", "Bye bye"]);\nconsole.log({ documentRes });\n',imports:[{local:"CohereEmbeddings",imported:"CohereEmbeddings",source:"@langchain/cohere"}]}}}]);
"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[660],{33573:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>h,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>d,toc:()=>u});var r=a(74848),t=a(28453),i=a(78847),s=a(27846),o=a(63142);const l={sidebar_class_name:"hidden",title:"How to handle multiple queries"},c=void 0,d={id:"how_to/query_multiple_queries",title:"How to handle multiple queries",description:"This guide assumes familiarity with the following:",source:"@site/docs/how_to/query_multiple_queries.mdx",sourceDirName:"how_to",slug:"/how_to/query_multiple_queries",permalink:"/docs/how_to/query_multiple_queries",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/how_to/query_multiple_queries.mdx",tags:[],version:"current",frontMatter:{sidebar_class_name:"hidden",title:"How to handle multiple queries"},sidebar:"tutorialSidebar",previous:{title:"How to deal with high cardinality categorical variables",permalink:"/docs/how_to/query_high_cardinality"},next:{title:"How to handle multiple retrievers",permalink:"/docs/how_to/query_multiple_retrievers"}},h={},u=[{value:"Setup",id:"setup",level:2},{value:"Install dependencies",id:"install-dependencies",level:3},...i.toc,{value:"Set environment variables",id:"set-environment-variables",level:3},{value:"Create Index",id:"create-index",level:3},{value:"Query analysis",id:"query-analysis",level:2},{value:"Retrieval with query analysis",id:"retrieval-with-query-analysis",level:2},{value:"Next steps",id:"next-steps",level:2}];function m(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.admonition,{title:"Prerequisites",type:"info",children:[(0,r.jsx)(n.p,{children:"This guide assumes familiarity with the following:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"../../docs/tutorials/query_analysis",children:"Query analysis"})}),"\n"]})]}),"\n",(0,r.jsx)(n.p,{children:"Sometimes, a query analysis technique may allow for multiple queries to\nbe generated. In these cases, we need to remember to run all queries and\nthen to combine the results. We will show a simple example (using mock\ndata) of how to do that."}),"\n",(0,r.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,r.jsx)(n.h3,{id:"install-dependencies",children:"Install dependencies"}),"\n","\n",(0,r.jsx)(i.default,{}),"\n",(0,r.jsx)(s.A,{children:(0,r.jsx)(n.p,{children:"@langchain/community @langchain/openai zod chromadb"})}),"\n",(0,r.jsx)(n.h3,{id:"set-environment-variables",children:"Set environment variables"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"OPENAI_API_KEY=your-api-key\n\n# Optional, use LangSmith for best-in-class observability\nLANGSMITH_API_KEY=your-api-key\nLANGCHAIN_TRACING_V2=true\n"})}),"\n",(0,r.jsx)(n.h3,{id:"create-index",children:"Create Index"}),"\n",(0,r.jsx)(n.p,{children:"We will create a vectorstore over fake information."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { Chroma } from "@langchain/community/vectorstores/chroma";\nimport { OpenAIEmbeddings } from "@langchain/openai";\nimport "chromadb";\n\nconst texts = ["Harrison worked at Kensho", "Ankush worked at Facebook"];\nconst embeddings = new OpenAIEmbeddings({ model: "text-embedding-3-small" });\nconst vectorstore = await Chroma.fromTexts(texts, {}, embeddings, {\n  collectionName: "multi_query",\n});\nconst retriever = vectorstore.asRetriever(1);\n'})}),"\n",(0,r.jsx)(n.h2,{id:"query-analysis",children:"Query analysis"}),"\n",(0,r.jsx)(n.p,{children:"We will use function calling to structure the output. We will let it\nreturn multiple queries."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { z } from "zod";\n\nconst searchSchema = z\n  .object({\n    queries: z.array(z.string()).describe("Distinct queries to search for"),\n  })\n  .describe("Search over a database of job records.");\n'})}),"\n","\n",(0,r.jsx)(o.A,{customVarName:"llm"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { ChatPromptTemplate } from "@langchain/core/prompts";\nimport {\n  RunnableSequence,\n  RunnablePassthrough,\n} from "@langchain/core/runnables";\n\nconst system = `You have the ability to issue search queries to get information to help answer user information.\n\nIf you need to look up two distinct pieces of information, you are allowed to do that!`;\n\nconst prompt = ChatPromptTemplate.fromMessages([\n  ["system", system],\n  ["human", "{question}"],\n]);\nconst llmWithTools = llm.withStructuredOutput(searchSchema, {\n  name: "Search",\n});\nconst queryAnalyzer = RunnableSequence.from([\n  {\n    question: new RunnablePassthrough(),\n  },\n  prompt,\n  llmWithTools,\n]);\n'})}),"\n",(0,r.jsx)(n.p,{children:"We can see that this allows for creating multiple queries"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'await queryAnalyzer.invoke("where did Harrison Work");\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:'{ queries: [ "Harrison" ] }\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'await queryAnalyzer.invoke("where did Harrison and ankush Work");\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:'{ queries: [ "Harrison work", "Ankush work" ] }\n'})}),"\n",(0,r.jsx)(n.h2,{id:"retrieval-with-query-analysis",children:"Retrieval with query analysis"}),"\n",(0,r.jsx)(n.p,{children:"So how would we include this in a chain? One thing that will make this a\nlot easier is if we call our retriever asyncronously - this will let us\nloop over the queries and not get blocked on the response time."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { RunnableConfig, RunnableLambda } from "@langchain/core/runnables";\n\nconst chain = async (question: string, config?: RunnableConfig) => {\n  const response = await queryAnalyzer.invoke(question, config);\n  const docs = [];\n  for (const query of response.queries) {\n    const newDocs = await retriever.invoke(query, config);\n    docs.push(...newDocs);\n  }\n  // You probably want to think about reranking or deduplicating documents here\n  // But that is a separate topic\n  return docs;\n};\n\nconst customChain = new RunnableLambda({ func: chain });\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'await customChain.invoke("where did Harrison Work");\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:'[ Document { pageContent: "Harrison worked at Kensho", metadata: {} } ]\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'await customChain.invoke("where did Harrison and ankush Work");\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:'[\n  Document { pageContent: "Harrison worked at Kensho", metadata: {} },\n  Document { pageContent: "Ankush worked at Facebook", metadata: {} }\n]\n'})}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,r.jsx)(n.p,{children:"You\u2019ve now learned some techniques for handling multiple queries in a\nquery analysis system."}),"\n",(0,r.jsxs)(n.p,{children:["Next, check out some of the other query analysis guides in this section,\nlike ",(0,r.jsx)(n.a,{href:"../../docs/how_to/query_no_queries",children:"how to deal with cases where no query is\ngenerated"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},63142:(e,n,a)=>{a.d(n,{A:()=>u});a(96540);var r=a(11470),t=a(19365),i=a(21432),s=a(27846),o=a(27293),l=a(74848);function c(e){let{children:n}=e;return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(o.A,{type:"tip",children:(0,l.jsxs)("p",{children:["See"," ",(0,l.jsx)("a",{href:"/docs/get_started/installation#installing-integration-packages",children:"this section for general instructions on installing integration packages"}),"."]})}),(0,l.jsx)(s.A,{children:n})]})}const d={openaiParams:'{\n  model: "gpt-3.5-turbo",\n  temperature: 0\n}',anthropicParams:'{\n  model: "claude-3-sonnet-20240229",\n  temperature: 0\n}',fireworksParams:'{\n  model: "accounts/fireworks/models/firefunction-v1",\n  temperature: 0\n}',mistralParams:'{\n  model: "mistral-large-latest",\n  temperature: 0\n}',groqParams:'{\n  model: "mixtral-8x7b-32768",\n  temperature: 0\n}',vertexParams:'{\n  model: "gemini-1.5-pro",\n  temperature: 0\n}'},h=["openai","anthropic","mistral","groq","vertex"];function u(e){const{customVarName:n,additionalDependencies:a}=e,s=n??"model",o=e.openaiParams??d.openaiParams,u=e.anthropicParams??d.anthropicParams,m=e.fireworksParams??d.fireworksParams,p=e.mistralParams??d.mistralParams,g=e.groqParams??d.groqParams,x=e.vertexParams??d.vertexParams,y=e.providers??["openai","anthropic","fireworks","mistral","groq","vertex"],w={openai:{value:"openai",label:"OpenAI",default:!0,text:`import { ChatOpenAI } from "@langchain/openai";\n\nconst ${s} = new ChatOpenAI(${o});`,envs:"OPENAI_API_KEY=your-api-key",dependencies:"@langchain/openai"},anthropic:{value:"anthropic",label:"Anthropic",default:!1,text:`import { ChatAnthropic } from "@langchain/anthropic";\n\nconst ${s} = new ChatAnthropic(${u});`,envs:"ANTHROPIC_API_KEY=your-api-key",dependencies:"@langchain/anthropic"},fireworks:{value:"fireworks",label:"FireworksAI",default:!1,text:`import { ChatFireworks } from "@langchain/community/chat_models/fireworks";\n\nconst ${s} = new ChatFireworks(${m});`,envs:"FIREWORKS_API_KEY=your-api-key",dependencies:"@langchain/community"},mistral:{value:"mistral",label:"MistralAI",default:!1,text:`import { ChatMistralAI } from "@langchain/mistralai";\n\nconst ${s} = new ChatMistralAI(${p});`,envs:"MISTRAL_API_KEY=your-api-key",dependencies:"@langchain/mistralai"},groq:{value:"groq",label:"Groq",default:!1,text:`import { ChatGroq } from "@langchain/groq";\n\nconst ${s} = new ChatGroq(${g});`,envs:"GROQ_API_KEY=your-api-key",dependencies:"@langchain/groq"},vertex:{value:"vertex",label:"VertexAI",default:!1,text:`import { ChatVertexAI } from "@langchain/google-vertexai";\n\nconst ${s} = new ChatVertexAI(${x});`,envs:"GOOGLE_APPLICATION_CREDENTIALS=credentials.json",dependencies:"@langchain/google-vertexai"}},v=(e.onlyWso?h:y).map((e=>w[e]));return(0,l.jsxs)("div",{children:[(0,l.jsx)("h3",{children:"\uc0ac\uc6a9\ud560 \ucc44\ud305 \ubaa8\ub378 \uc120\ud0dd:"}),(0,l.jsx)(r.A,{groupId:"modelTabs",children:v.map((e=>(0,l.jsxs)(t.A,{value:e.value,label:e.label,children:[(0,l.jsx)("h4",{children:"\uc758\uc874\uc131 \ucd94\uac00"}),(0,l.jsx)(c,{children:[e.dependencies,a].join(" ")}),(0,l.jsx)("h4",{children:"\ud658\uacbd\ubcc0\uc218 \ucd94\uac00"}),(0,l.jsx)(i.A,{language:"bash",children:e.envs}),(0,l.jsx)("h4",{children:"\ubaa8\ub378 \uc778\uc2a4\ud134\uc2a4\ud654"}),(0,l.jsx)(i.A,{language:"typescript",children:e.text})]},e.value)))})]})}},27846:(e,n,a)=>{a.d(n,{A:()=>o});a(96540);var r=a(11470),t=a(19365),i=a(21432),s=a(74848);function o(e){let{children:n}=e;return(0,s.jsxs)(r.A,{groupId:"npm2yarn",children:[(0,s.jsx)(t.A,{value:"npm",label:"npm",children:(0,s.jsxs)(i.A,{language:"bash",children:["npm i ",n]})}),(0,s.jsx)(t.A,{value:"yarn",label:"yarn",default:!0,children:(0,s.jsxs)(i.A,{language:"bash",children:["yarn add ",n]})}),(0,s.jsx)(t.A,{value:"pnpm",label:"pnpm",children:(0,s.jsxs)(i.A,{language:"bash",children:["pnpm add ",n]})})]})}}}]);
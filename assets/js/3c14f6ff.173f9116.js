"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4730],{14356:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>r});var a=t(74848),o=t(28453);const l={sidebar_class_name:"hidden",title:"How to split code"},i=void 0,s={id:"how_to/code_splitter",title:"How to split code",description:"This guide assumes familiarity with the following concepts:",source:"@site/docs/how_to/code_splitter.mdx",sourceDirName:"how_to",slug:"/how_to/code_splitter",permalink:"/docs/how_to/code_splitter",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/how_to/code_splitter.mdx",tags:[],version:"current",frontMatter:{sidebar_class_name:"hidden",title:"How to split code"},sidebar:"tutorialSidebar",previous:{title:"How to use tools",permalink:"/docs/how_to/chatbots_tools"},next:{title:"How to do retrieval with contextual compression",permalink:"/docs/how_to/contextual_compression"}},c={},r=[{value:"JS",id:"js",level:2},{value:"Python",id:"python",level:2},{value:"Markdown",id:"markdown",level:2},{value:"Latex",id:"latex",level:2},{value:"HTML",id:"html",level:2},{value:"Solidity",id:"solidity",level:2},{value:"PHP",id:"php",level:2},{value:"Next steps",id:"next-steps",level:2}];function d(n){const e={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(e.admonition,{title:"Prerequisites",type:"info",children:[(0,a.jsx)(e.p,{children:"This guide assumes familiarity with the following concepts:"}),(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"../../docs/concepts#text-splitters",children:"Text splitters"})}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"../../docs/how_to/recursive_text_splitter",children:"Recursively splitting text by\ncharacter"})}),"\n"]})]}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.a,{href:"https://v02.api.js.langchain.com/classes/langchain_textsplitters.RecursiveCharacterTextSplitter.html",children:"RecursiveCharacterTextSplitter"}),"\nincludes pre-built lists of separators that are useful for splitting\ntext in a specific programming language."]}),"\n",(0,a.jsx)(e.p,{children:"Supported languages include:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:'"html" | "cpp" | "go" | "java" | "js" | "php" | "proto" | "python" | "rst" | "ruby" | "rust" | "scala" | "swift" | "markdown" | "latex" | "sol"\n'})}),"\n",(0,a.jsxs)(e.p,{children:["To view the list of separators for a given language, pass one of the\nvalues from the list above into the ",(0,a.jsx)(e.code,{children:"getSeparatorsForLanguage()"})," static\nmethod"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:'import { RecursiveCharacterTextSplitter } from "@langchain/textsplitters";\n\nRecursiveCharacterTextSplitter.getSeparatorsForLanguage("js");\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:'[\n  "\\nfunction ", "\\nconst ",\n  "\\nlet ",      "\\nvar ",\n  "\\nclass ",    "\\nif ",\n  "\\nfor ",      "\\nwhile ",\n  "\\nswitch ",   "\\ncase ",\n  "\\ndefault ",  "\\n\\n",\n  "\\n",          " ",\n  ""\n]\n'})}),"\n",(0,a.jsx)(e.h2,{id:"js",children:"JS"}),"\n",(0,a.jsx)(e.p,{children:"Here\u2019s an example using the JS text splitter:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:'const JS_CODE = `\nfunction helloWorld() {\n  console.log("Hello, World!");\n}\n\n// Call the function\nhelloWorld();\n`;\n\nconst jsSplitter = RecursiveCharacterTextSplitter.fromLanguage("js", {\n  chunkSize: 60,\n  chunkOverlap: 0,\n});\nconst jsDocs = await jsSplitter.createDocuments([JS_CODE]);\n\njsDocs;\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:'[\n  Document {\n    pageContent: \'function helloWorld() {\\n  console.log("Hello, World!");\\n}\',\n    metadata: { loc: { lines: { from: 2, to: 4 } } }\n  },\n  Document {\n    pageContent: "// Call the function\\nhelloWorld();",\n    metadata: { loc: { lines: { from: 6, to: 7 } } }\n  }\n]\n'})}),"\n",(0,a.jsx)(e.h2,{id:"python",children:"Python"}),"\n",(0,a.jsx)(e.p,{children:"Here\u2019s an example for Python:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:'const PYTHON_CODE = `\ndef hello_world():\n    print("Hello, World!")\n\n# Call the function\nhello_world()\n`;\n\nconst pythonSplitter = RecursiveCharacterTextSplitter.fromLanguage("python", {\n  chunkSize: 50,\n  chunkOverlap: 0,\n});\nconst pythonDocs = await pythonSplitter.createDocuments([PYTHON_CODE]);\npythonDocs;\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:'[\n  Document {\n    pageContent: \'def hello_world():\\n    print("Hello, World!")\',\n    metadata: { loc: { lines: { from: 2, to: 3 } } }\n  },\n  Document {\n    pageContent: "# Call the function\\nhello_world()",\n    metadata: { loc: { lines: { from: 5, to: 6 } } }\n  }\n]\n'})}),"\n",(0,a.jsx)(e.h2,{id:"markdown",children:"Markdown"}),"\n",(0,a.jsx)(e.p,{children:"Here\u2019s an example of splitting on markdown separators:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:'const markdownText = `\n# \ud83e\udd9c\ufe0f\ud83d\udd17 LangChain\n\n\u26a1 Building applications with LLMs through composability \u26a1\n\n## Quick Install\n\n\\`\\`\\`bash\n# Hopefully this code block isn\'t split\npip install langchain\n\\`\\`\\`\n\nAs an open-source project in a rapidly developing field, we are extremely open to contributions.\n`;\n\nconst mdSplitter = RecursiveCharacterTextSplitter.fromLanguage("markdown", {\n  chunkSize: 60,\n  chunkOverlap: 0,\n});\nconst mdDocs = await mdSplitter.createDocuments([markdownText]);\n\nmdDocs;\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:'[\n  Document {\n    pageContent: "# \ud83e\udd9c\ufe0f\ud83d\udd17 LangChain",\n    metadata: { loc: { lines: { from: 2, to: 2 } } }\n  },\n  Document {\n    pageContent: "\u26a1 Building applications with LLMs through composability \u26a1",\n    metadata: { loc: { lines: { from: 4, to: 4 } } }\n  },\n  Document {\n    pageContent: "## Quick Install",\n    metadata: { loc: { lines: { from: 6, to: 6 } } }\n  },\n  Document {\n    pageContent: "```bash\\n# Hopefully this code block isn\'t split",\n    metadata: { loc: { lines: { from: 8, to: 9 } } }\n  },\n  Document {\n    pageContent: "pip install langchain",\n    metadata: { loc: { lines: { from: 10, to: 10 } } }\n  },\n  Document {\n    pageContent: "```",\n    metadata: { loc: { lines: { from: 11, to: 11 } } }\n  },\n  Document {\n    pageContent: "As an open-source project in a rapidly developing field, we",\n    metadata: { loc: { lines: { from: 13, to: 13 } } }\n  },\n  Document {\n    pageContent: "are extremely open to contributions.",\n    metadata: { loc: { lines: { from: 13, to: 13 } } }\n  }\n]\n'})}),"\n",(0,a.jsx)(e.h2,{id:"latex",children:"Latex"}),"\n",(0,a.jsx)(e.p,{children:"Here\u2019s an example on Latex text:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:'const latexText = `\n\\documentclass{article}\n\n\\begin{document}\n\n\\maketitle\n\n\\section{Introduction}\nLarge language models (LLMs) are a type of machine learning model that can be trained on vast amounts of text data to generate human-like language. In recent years, LLMs have made significant advances in a variety of natural language processing tasks, including language translation, text generation, and sentiment analysis.\n\n\\subsection{History of LLMs}\nThe earliest LLMs were developed in the 1980s and 1990s, but they were limited by the amount of data that could be processed and the computational power available at the time. In the past decade, however, advances in hardware and software have made it possible to train LLMs on massive datasets, leading to significant improvements in performance.\n\n\\subsection{Applications of LLMs}\nLLMs have many applications in industry, including chatbots, content creation, and virtual assistants. They can also be used in academia for research in linguistics, psychology, and computational linguistics.\n\n\\end{document}\n`;\n\nconst latexSplitter = RecursiveCharacterTextSplitter.fromLanguage("latex", {\n  chunkSize: 60,\n  chunkOverlap: 0,\n});\nconst latexDocs = await latexSplitter.createDocuments([latexText]);\n\nlatexDocs;\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:'[\n  Document {\n    pageContent: "documentclass{article}\\n\\n\\begin{document}\\n\\nmaketitle",\n    metadata: { loc: { lines: { from: 2, to: 6 } } }\n  },\n  Document {\n    pageContent: "section{Introduction}",\n    metadata: { loc: { lines: { from: 8, to: 8 } } }\n  },\n  Document {\n    pageContent: "Large language models (LLMs) are a type of machine learning",\n    metadata: { loc: { lines: { from: 9, to: 9 } } }\n  },\n  Document {\n    pageContent: "model that can be trained on vast amounts of text data to",\n    metadata: { loc: { lines: { from: 9, to: 9 } } }\n  },\n  Document {\n    pageContent: "generate human-like language. In recent years, LLMs have",\n    metadata: { loc: { lines: { from: 9, to: 9 } } }\n  },\n  Document {\n    pageContent: "made significant advances in a variety of natural language",\n    metadata: { loc: { lines: { from: 9, to: 9 } } }\n  },\n  Document {\n    pageContent: "processing tasks, including language translation, text",\n    metadata: { loc: { lines: { from: 9, to: 9 } } }\n  },\n  Document {\n    pageContent: "generation, and sentiment analysis.",\n    metadata: { loc: { lines: { from: 9, to: 9 } } }\n  },\n  Document {\n    pageContent: "subsection{History of LLMs}",\n    metadata: { loc: { lines: { from: 11, to: 11 } } }\n  },\n  Document {\n    pageContent: "The earliest LLMs were developed in the 1980s and 1990s,",\n    metadata: { loc: { lines: { from: 12, to: 12 } } }\n  },\n  Document {\n    pageContent: "but they were limited by the amount of data that could be",\n    metadata: { loc: { lines: { from: 12, to: 12 } } }\n  },\n  Document {\n    pageContent: "processed and the computational power available at the",\n    metadata: { loc: { lines: { from: 12, to: 12 } } }\n  },\n  Document {\n    pageContent: "time. In the past decade, however, advances in hardware and",\n    metadata: { loc: { lines: { from: 12, to: 12 } } }\n  },\n  Document {\n    pageContent: "software have made it possible to train LLMs on massive",\n    metadata: { loc: { lines: { from: 12, to: 12 } } }\n  },\n  Document {\n    pageContent: "datasets, leading to significant improvements in",\n    metadata: { loc: { lines: { from: 12, to: 12 } } }\n  },\n  Document {\n    pageContent: "performance.",\n    metadata: { loc: { lines: { from: 12, to: 12 } } }\n  },\n  Document {\n    pageContent: "subsection{Applications of LLMs}",\n    metadata: { loc: { lines: { from: 14, to: 14 } } }\n  },\n  Document {\n    pageContent: "LLMs have many applications in industry, including",\n    metadata: { loc: { lines: { from: 15, to: 15 } } }\n  },\n  Document {\n    pageContent: "chatbots, content creation, and virtual assistants. They",\n    metadata: { loc: { lines: { from: 15, to: 15 } } }\n  },\n  Document {\n    pageContent: "can also be used in academia for research in linguistics,",\n    metadata: { loc: { lines: { from: 15, to: 15 } } }\n  },\n  Document {\n    pageContent: "psychology, and computational linguistics.",\n    metadata: { loc: { lines: { from: 15, to: 15 } } }\n  },\n  Document {\n    pageContent: "end{document}",\n    metadata: { loc: { lines: { from: 17, to: 17 } } }\n  }\n]\n'})}),"\n",(0,a.jsx)(e.h2,{id:"html",children:"HTML"}),"\n",(0,a.jsx)(e.p,{children:"Here\u2019s an example using an HTML text splitter:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:'const htmlText = `\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>\ud83e\udd9c\ufe0f\ud83d\udd17 LangChain</title>\n        <style>\n            body {\n                font-family: Arial, sans-serif;\n            }\n            h1 {\n                color: darkblue;\n            }\n        </style>\n    </head>\n    <body>\n        <div>\n            <h1>\ud83e\udd9c\ufe0f\ud83d\udd17 LangChain</h1>\n            <p>\u26a1 Building applications with LLMs through composability \u26a1</p>\n        </div>\n        <div>\n            As an open-source project in a rapidly developing field, we are extremely open to contributions.\n        </div>\n    </body>\n</html>\n`;\n\nconst htmlSplitter = RecursiveCharacterTextSplitter.fromLanguage("html", {\n  chunkSize: 60,\n  chunkOverlap: 0,\n});\nconst htmlDocs = await htmlSplitter.createDocuments([htmlText]);\nhtmlDocs;\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:'[\n  Document {\n    pageContent: "<!DOCTYPE html>\\n<html>",\n    metadata: { loc: { lines: { from: 2, to: 3 } } }\n  },\n  Document {\n    pageContent: "<head>\\n        <title>\ud83e\udd9c\ufe0f\ud83d\udd17 LangChain</title>",\n    metadata: { loc: { lines: { from: 4, to: 5 } } }\n  },\n  Document {\n    pageContent: "<style>\\n            body {\\n                font-family:",\n    metadata: { loc: { lines: { from: 6, to: 8 } } }\n  },\n  Document {\n    pageContent: "Arial, sans-serif;\\n            }\\n            h1 {",\n    metadata: { loc: { lines: { from: 8, to: 10 } } }\n  },\n  Document {\n    pageContent: "color: darkblue;\\n            }\\n        </style>",\n    metadata: { loc: { lines: { from: 11, to: 13 } } }\n  },\n  Document {\n    pageContent: "</head>",\n    metadata: { loc: { lines: { from: 14, to: 14 } } }\n  },\n  Document {\n    pageContent: "<body>",\n    metadata: { loc: { lines: { from: 15, to: 15 } } }\n  },\n  Document {\n    pageContent: "<div>\\n            <h1>\ud83e\udd9c\ufe0f\ud83d\udd17 LangChain</h1>",\n    metadata: { loc: { lines: { from: 16, to: 17 } } }\n  },\n  Document {\n    pageContent: "<p>\u26a1 Building applications with LLMs through composability",\n    metadata: { loc: { lines: { from: 18, to: 18 } } }\n  },\n  Document {\n    pageContent: "\u26a1</p>\\n        </div>",\n    metadata: { loc: { lines: { from: 18, to: 19 } } }\n  },\n  Document {\n    pageContent: "<div>\\n            As an open-source project in a rapidly",\n    metadata: { loc: { lines: { from: 20, to: 21 } } }\n  },\n  Document {\n    pageContent: "developing field, we are extremely open to contributions.",\n    metadata: { loc: { lines: { from: 21, to: 21 } } }\n  },\n  Document {\n    pageContent: "</div>\\n    </body>\\n</html>",\n    metadata: { loc: { lines: { from: 22, to: 24 } } }\n  }\n]\n'})}),"\n",(0,a.jsx)(e.h2,{id:"solidity",children:"Solidity"}),"\n",(0,a.jsxs)(e.p,{children:["Here\u2019s an example using of splitting on\n",(0,a.jsx)(e.a,{href:"https://soliditylang.org/",children:"Solidity"})," code:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:'const SOL_CODE = `\npragma solidity ^0.8.20;\ncontract HelloWorld {\n   function add(uint a, uint b) pure public returns(uint) {\n       return a + b;\n   }\n}\n`;\n\nconst solSplitter = RecursiveCharacterTextSplitter.fromLanguage("sol", {\n  chunkSize: 128,\n  chunkOverlap: 0,\n});\nconst solDocs = await solSplitter.createDocuments([SOL_CODE]);\nsolDocs;\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:'[\n  Document {\n    pageContent: "pragma solidity ^0.8.20;",\n    metadata: { loc: { lines: { from: 2, to: 2 } } }\n  },\n  Document {\n    pageContent: "contract HelloWorld {\\n" +\n      "   function add(uint a, uint b) pure public returns(uint) {\\n" +\n      "       return a + "... 9 more characters,\n    metadata: { loc: { lines: { from: 3, to: 7 } } }\n  }\n]\n'})}),"\n",(0,a.jsx)(e.h2,{id:"php",children:"PHP"}),"\n",(0,a.jsx)(e.p,{children:"Here\u2019s an example of splitting on PHP code:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:'const PHP_CODE = `<?php\nnamespace foo;\nclass Hello {\n    public function __construct() { }\n}\nfunction hello() {\n    echo "Hello World!";\n}\ninterface Human {\n    public function breath();\n}\ntrait Foo { }\nenum Color\n{\n    case Red;\n    case Blue;\n}`;\n\nconst phpSplitter = RecursiveCharacterTextSplitter.fromLanguage("php", {\n  chunkSize: 50,\n  chunkOverlap: 0,\n});\nconst phpDocs = await phpSplitter.createDocuments([PHP_CODE]);\n\nphpDocs;\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:'[\n  Document {\n    pageContent: "<?php\\nnamespace foo;",\n    metadata: { loc: { lines: { from: 1, to: 2 } } }\n  },\n  Document {\n    pageContent: "class Hello {",\n    metadata: { loc: { lines: { from: 3, to: 3 } } }\n  },\n  Document {\n    pageContent: "public function __construct() { }\\n}",\n    metadata: { loc: { lines: { from: 4, to: 5 } } }\n  },\n  Document {\n    pageContent: \'function hello() {\\n    echo "Hello World!";\\n}\',\n    metadata: { loc: { lines: { from: 6, to: 8 } } }\n  },\n  Document {\n    pageContent: "interface Human {\\n    public function breath();\\n}",\n    metadata: { loc: { lines: { from: 9, to: 11 } } }\n  },\n  Document {\n    pageContent: "trait Foo { }\\nenum Color\\n{\\n    case Red;",\n    metadata: { loc: { lines: { from: 12, to: 15 } } }\n  },\n  Document {\n    pageContent: "case Blue;\\n}",\n    metadata: { loc: { lines: { from: 16, to: 17 } } }\n  }\n]\n'})}),"\n",(0,a.jsx)(e.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,a.jsx)(e.p,{children:"You\u2019ve now learned a method for splitting text on code-specific\nseparators."}),"\n",(0,a.jsxs)(e.p,{children:["Next, check out the ",(0,a.jsx)(e.a,{href:"../../docs/tutorials/rag",children:"full tutorial on retrieval-augmented\ngeneration"}),"."]})]})}function m(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}}}]);
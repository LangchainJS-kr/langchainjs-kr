"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9607],{70505:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>h});var s=n(74848),r=n(28453),i=n(78847);const a={},o="Anthropic",c={id:"integrations/platforms/anthropic",title:"Anthropic",description:"All functionality related to Anthropic models.",source:"@site/docs/integrations/platforms/anthropic.mdx",sourceDirName:"integrations/platforms",slug:"/integrations/platforms/anthropic",permalink:"/docs/integrations/platforms/anthropic",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/platforms/anthropic.mdx",tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Providers",permalink:"/docs/integrations/platforms/"},next:{title:"AWS",permalink:"/docs/integrations/platforms/aws"}},p={},h=[{value:"Prompting Best Practices",id:"prompting-best-practices",level:2},{value:"<code>ChatAnthropic</code>",id:"chatanthropic",level:2},...i.toc];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"anthropic",children:"Anthropic"}),"\n",(0,s.jsx)(t.p,{children:"All functionality related to Anthropic models."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://www.anthropic.com/",children:"Anthropic"})," is an AI safety and research company, and is the creator of Claude.\nThis page covers all integrations between Anthropic models and LangChain."]}),"\n",(0,s.jsx)(t.h2,{id:"prompting-best-practices",children:"Prompting Best Practices"}),"\n",(0,s.jsx)(t.p,{children:"Anthropic models have several prompting best practices compared to OpenAI models."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"System Messages may only be the first message"})}),"\n",(0,s.jsx)(t.p,{children:"Anthropic models require any system messages to be the first one in your prompts."}),"\n",(0,s.jsx)(t.h2,{id:"chatanthropic",children:(0,s.jsx)(t.code,{children:"ChatAnthropic"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"ChatAnthropic"})," is a subclass of LangChain's ",(0,s.jsx)(t.code,{children:"ChatModel"}),", meaning it works best with ",(0,s.jsx)(t.code,{children:"ChatPromptTemplate"}),".\nYou can import this wrapper with the following code:"]}),"\n","\n",(0,s.jsx)(i.default,{}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/anthropic\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'import { ChatAnthropic } from "@langchain/anthropic";\nconst model = new ChatAnthropic({});\n'})}),"\n",(0,s.jsxs)(t.p,{children:["When working with ChatModels, it is preferred that you design your prompts as ",(0,s.jsx)(t.code,{children:"ChatPromptTemplate"}),"s.\nHere is an example below of doing that:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'import { ChatPromptTemplate } from "langchain/prompts";\n\nconst prompt = ChatPromptTemplate.fromMessages([\n  ["system", "You are a helpful chatbot"],\n  ["human", "Tell me a joke about {topic}"],\n]);\n'})}),"\n",(0,s.jsx)(t.p,{children:"You can then use this in a chain as follows:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'const chain = prompt.pipe(model);\nawait chain.invoke({ topic: "bears" });\n'})}),"\n",(0,s.jsxs)(t.p,{children:["See the ",(0,s.jsx)(t.a,{href:"/docs/integrations/chat/anthropic/",children:"chat model integration page"})," for more examples, including multimodal inputs."]})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);
(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2114,65],{4801:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>m,default:()=>y,frontMatter:()=>d,metadata:()=>p,toc:()=>g});var a=t(74848),s=t(28453),i=t(64428),o=t(78847),r=t(2661),c=t.n(r),l=t(99260),h=t.n(l);const d={},m="Xata Chat Memory",p={id:"integrations/chat_memory/xata",title:"Xata Chat Memory",description:"Xata is a serverless data platform, based on PostgreSQL. It provides a type-safe TypeScript/JavaScript SDK for interacting with your database, and a",source:"@site/docs/integrations/chat_memory/xata.mdx",sourceDirName:"integrations/chat_memory",slug:"/integrations/chat_memory/xata",permalink:"/docs/integrations/chat_memory/xata",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/chat_memory/xata.mdx",tags:[],version:"current",frontMatter:{}},u={},g=[{value:"Setup",id:"setup",level:2},{value:"Install the Xata CLI",id:"install-the-xata-cli",level:3},{value:"Create a database to be used as a vector store",id:"create-a-database-to-be-used-as-a-vector-store",level:3},{value:"Initialize the project",id:"initialize-the-project",level:3},{value:"Usage",id:"usage",level:2},...o.toc,{value:"With pre-created table",id:"with-pre-created-table",level:3}];function x(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"xata-chat-memory",children:"Xata Chat Memory"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://xata.io",children:"Xata"})," is a serverless data platform, based on PostgreSQL. It provides a type-safe TypeScript/JavaScript SDK for interacting with your database, and a\nUI for managing your data."]}),"\n",(0,a.jsxs)(n.p,{children:["With the ",(0,a.jsx)(n.code,{children:"XataChatMessageHistory"})," class, you can use Xata databases for longer-term persistence of chat sessions."]}),"\n",(0,a.jsxs)(n.p,{children:["Because Xata works via a REST API and has a pure TypeScript SDK, you can use this with ",(0,a.jsx)(n.a,{href:"https://vercel.com/docs/concepts/functions/edge-functions/edge-runtime",children:"Vercel Edge"}),", ",(0,a.jsx)(n.a,{href:"https://developers.cloudflare.com/workers/",children:"Cloudflare Workers"})," and any other Serverless environment."]}),"\n",(0,a.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,a.jsx)(n.h3,{id:"install-the-xata-cli",children:"Install the Xata CLI"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm install @xata.io/cli -g\n"})}),"\n",(0,a.jsx)(n.h3,{id:"create-a-database-to-be-used-as-a-vector-store",children:"Create a database to be used as a vector store"}),"\n",(0,a.jsxs)(n.p,{children:["In the ",(0,a.jsx)(n.a,{href:"https://app.xata.io",children:"Xata UI"})," create a new database. You can name it whatever you want, but for this example we'll use ",(0,a.jsx)(n.code,{children:"langchain"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"When executed for the first time, the Xata LangChain integration will create the table used for storing the chat messages. If a table with that name already exists, it will be left untouched."}),"\n",(0,a.jsx)(n.h3,{id:"initialize-the-project",children:"Initialize the project"}),"\n",(0,a.jsx)(n.p,{children:"In your project, run:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"xata init\n"})}),"\n",(0,a.jsxs)(n.p,{children:["and then choose the database you created above. This will also generate a ",(0,a.jsx)(n.code,{children:"xata.ts"})," or ",(0,a.jsx)(n.code,{children:"xata.js"})," file that defines the client you can use to interact with the database. See the ",(0,a.jsx)(n.a,{href:"https://xata.io/docs/getting-started/installation",children:"Xata getting started docs"})," for more details on using the Xata JavaScript/TypeScript SDK."]}),"\n",(0,a.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n","\n",(0,a.jsx)(n.p,{children:"Each chat history session stored in Xata database must have a unique id."}),"\n",(0,a.jsxs)(n.p,{children:["In this example, the ",(0,a.jsx)(n.code,{children:"getXataClient()"})," function is used to create a new Xata client based on the environment variables. However, we recommend using the code generated by the ",(0,a.jsx)(n.code,{children:"xata init"})," command, in which case you only need to import the ",(0,a.jsx)(n.code,{children:"getXataClient()"})," function from the generated ",(0,a.jsx)(n.code,{children:"xata.ts"})," file."]}),"\n","\n",(0,a.jsx)(o.default,{}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai @langchain/community\n"})}),"\n","\n",(0,a.jsx)(i.A,{language:"typescript",children:c()}),"\n",(0,a.jsx)(n.h3,{id:"with-pre-created-table",children:"With pre-created table"}),"\n",(0,a.jsxs)(n.p,{children:["If you don't want the code to always check if the table exists, you can create the table manually in the Xata UI and pass ",(0,a.jsx)(n.code,{children:"createTable: false"})," to the constructor. The table must have the following columns:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"sessionId"})," of type ",(0,a.jsx)(n.code,{children:"String"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"type"})," of type ",(0,a.jsx)(n.code,{children:"String"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"role"})," of type ",(0,a.jsx)(n.code,{children:"String"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"content"})," of type ",(0,a.jsx)(n.code,{children:"Text"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"name"})," of type ",(0,a.jsx)(n.code,{children:"String"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"additionalKwargs"})," of type ",(0,a.jsx)(n.code,{children:"Text"})]}),"\n"]}),"\n","\n",(0,a.jsx)(i.A,{language:"typescript",children:h()})]})}function y(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(x,{...e})}):x(e)}},78847:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var a=t(74848),s=t(28453);const i={},o=void 0,r={id:"mdx_components/integration_install_tooltip",title:"integration_install_tooltip",description:"See this section for general instructions on installing integration packages.",source:"@site/docs/mdx_components/integration_install_tooltip.mdx",sourceDirName:"mdx_components",slug:"/mdx_components/integration_install_tooltip",permalink:"/docs/mdx_components/integration_install_tooltip",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/mdx_components/integration_install_tooltip.mdx",tags:[],version:"current",frontMatter:{}},c={},l=[];function h(e){const n={a:"a",admonition:"admonition",p:"p",...(0,s.R)(),...e.components};return(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["See ",(0,a.jsx)(n.a,{href:"/docs/how_to/installation#installing-integration-packages",children:"this section for general instructions on installing integration packages"}),"."]})})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},99260:e=>{e.exports={content:'import { BufferMemory } from "langchain/memory/index";\nimport { ChatOpenAI } from "@langchain/openai";\nimport { ConversationChain } from "langchain/chains";\nimport { XataChatMessageHistory } from "@langchain/community/stores/message/xata";\nimport { BaseClient } from "@xata.io/client";\n\n// Before running this example, see the docs at\n// https://js.langchain.com/docs/modules/memory/integrations/xata\n\n// if you use the generated client, you don\'t need this function.\n// Just import getXataClient from the generated xata.ts instead.\nconst getXataClient = () => {\n  if (!process.env.XATA_API_KEY) {\n    throw new Error("XATA_API_KEY not set");\n  }\n\n  if (!process.env.XATA_DB_URL) {\n    throw new Error("XATA_DB_URL not set");\n  }\n  const xata = new BaseClient({\n    databaseURL: process.env.XATA_DB_URL,\n    apiKey: process.env.XATA_API_KEY,\n    branch: process.env.XATA_BRANCH || "main",\n  });\n  return xata;\n};\n\nconst memory = new BufferMemory({\n  chatHistory: new XataChatMessageHistory({\n    table: "messages",\n    sessionId: new Date().toISOString(), // Or some other unique identifier for the conversation\n    client: getXataClient(),\n    createTable: false, // Explicitly set to false if the table is already created\n  }),\n});\n\nconst model = new ChatOpenAI();\nconst chain = new ConversationChain({ llm: model, memory });\n\nconst res1 = await chain.invoke({ input: "Hi! I\'m Jim." });\nconsole.log({ res1 });\n/*\n{\n  res1: {\n    text: "Hello Jim! It\'s nice to meet you. My name is AI. How may I assist you today?"\n  }\n}\n*/\n\nconst res2 = await chain.invoke({ input: "What did I just say my name was?" });\nconsole.log({ res2 });\n\n/*\n{\n  res1: {\n    text: "You said your name was Jim."\n  }\n}\n*/\n',imports:[{local:"BufferMemory",imported:"BufferMemory",source:"langchain/memory/index"},{local:"ChatOpenAI",imported:"ChatOpenAI",source:"@langchain/openai"},{local:"ConversationChain",imported:"ConversationChain",source:"langchain/chains"},{local:"XataChatMessageHistory",imported:"XataChatMessageHistory",source:"@langchain/community/stores/message/xata"}]}},2661:e=>{e.exports={content:'import { BufferMemory } from "langchain/memory/index";\nimport { ChatOpenAI } from "@langchain/openai";\nimport { ConversationChain } from "langchain/chains";\nimport { XataChatMessageHistory } from "@langchain/community/stores/message/xata";\nimport { BaseClient } from "@xata.io/client";\n\n// if you use the generated client, you don\'t need this function.\n// Just import getXataClient from the generated xata.ts instead.\nconst getXataClient = () => {\n  if (!process.env.XATA_API_KEY) {\n    throw new Error("XATA_API_KEY not set");\n  }\n\n  if (!process.env.XATA_DB_URL) {\n    throw new Error("XATA_DB_URL not set");\n  }\n  const xata = new BaseClient({\n    databaseURL: process.env.XATA_DB_URL,\n    apiKey: process.env.XATA_API_KEY,\n    branch: process.env.XATA_BRANCH || "main",\n  });\n  return xata;\n};\n\nconst memory = new BufferMemory({\n  chatHistory: new XataChatMessageHistory({\n    table: "messages",\n    sessionId: new Date().toISOString(), // Or some other unique identifier for the conversation\n    client: getXataClient(),\n    apiKey: process.env.XATA_API_KEY, // The API key is needed for creating the table.\n  }),\n});\n\nconst model = new ChatOpenAI();\nconst chain = new ConversationChain({ llm: model, memory });\n\nconst res1 = await chain.invoke({ input: "Hi! I\'m Jim." });\nconsole.log({ res1 });\n/*\n{\n  res1: {\n    text: "Hello Jim! It\'s nice to meet you. My name is AI. How may I assist you today?"\n  }\n}\n*/\n\nconst res2 = await chain.invoke({ input: "What did I just say my name was?" });\nconsole.log({ res2 });\n\n/*\n{\n  res1: {\n    text: "You said your name was Jim."\n  }\n}\n*/\n',imports:[{local:"BufferMemory",imported:"BufferMemory",source:"langchain/memory/index"},{local:"ChatOpenAI",imported:"ChatOpenAI",source:"@langchain/openai"},{local:"ConversationChain",imported:"ConversationChain",source:"langchain/chains"},{local:"XataChatMessageHistory",imported:"XataChatMessageHistory",source:"@langchain/community/stores/message/xata"}]}}}]);
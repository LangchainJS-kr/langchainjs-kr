(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4115,65],{40325:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>f,contentTitle:()=>j,default:()=>b,frontMatter:()=>g,metadata:()=>x,toc:()=>y});var o=t(74848),r=t(28453),a=t(78847),i=t(64428),s=t(85449),c=t.n(s),d=t(3138),l=t.n(d),h=t(26057),m=t.n(h),p=t(82570),u=t.n(p);const g={},j="Neo4j Vector Index",x={id:"integrations/vectorstores/neo4jvector",title:"Neo4j Vector Index",description:"Neo4j is an open-source graph database with integrated support for vector similarity search.",source:"@site/docs/integrations/vectorstores/neo4jvector.mdx",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/neo4jvector",permalink:"/docs/integrations/vectorstores/neo4jvector",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/vectorstores/neo4jvector.mdx",tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"MyScale",permalink:"/docs/integrations/vectorstores/myscale"},next:{title:"Neon Postgres",permalink:"/docs/integrations/vectorstores/neon"}},f={},y=[{value:"Setup",id:"setup",level:2},...a.toc,{value:"Setup a <code>Neo4j</code> self hosted instance with <code>docker-compose</code>",id:"setup-a-neo4j-self-hosted-instance-with-docker-compose",level:3},{value:"Usage",id:"usage",level:2},{value:"Use retrievalQuery parameter to customize responses",id:"use-retrievalquery-parameter-to-customize-responses",level:3},{value:"Instantiate Neo4jVectorStore from existing graph",id:"instantiate-neo4jvectorstore-from-existing-graph",level:3}];function v(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"neo4j-vector-index",children:"Neo4j Vector Index"}),"\n",(0,o.jsx)(n.p,{children:"Neo4j is an open-source graph database with integrated support for vector similarity search.\nIt supports:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"approximate nearest neighbor search"}),"\n",(0,o.jsx)(n.li,{children:"Euclidean similarity and cosine similarity"}),"\n",(0,o.jsx)(n.li,{children:"Hybrid search combining vector and keyword searches"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,o.jsxs)(n.p,{children:["To work with Neo4j Vector Index, you need to install the ",(0,o.jsx)(n.code,{children:"neo4j-driver"})," package:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install neo4j-driver\n"})}),"\n","\n",(0,o.jsx)(a.default,{}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai @langchain/community\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"setup-a-neo4j-self-hosted-instance-with-docker-compose",children:["Setup a ",(0,o.jsx)(n.code,{children:"Neo4j"})," self hosted instance with ",(0,o.jsx)(n.code,{children:"docker-compose"})]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"Neo4j"})," provides a prebuilt Docker image that can be used to quickly setup a self-hosted Neo4j database instance.\nCreate a file below named ",(0,o.jsx)(n.code,{children:"docker-compose.yml"}),":"]}),"\n","\n",(0,o.jsx)(i.A,{language:"yml",name:"docker-compose.yml",children:c()}),"\n",(0,o.jsxs)(n.p,{children:["And then in the same directory, run ",(0,o.jsx)(n.code,{children:"docker compose up"})," to start the container."]}),"\n",(0,o.jsxs)(n.p,{children:["You can find more information on how to setup ",(0,o.jsx)(n.code,{children:"Neo4j"})," on their ",(0,o.jsx)(n.a,{href:"https://neo4j.com/docs/operations-manual/current/installation/",children:"website"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n","\n",(0,o.jsxs)(n.p,{children:["One complete example of using ",(0,o.jsx)(n.code,{children:"Neo4jVectorStore"})," is the following:"]}),"\n",(0,o.jsx)(i.A,{language:"typescript",children:l()}),"\n",(0,o.jsx)(n.h3,{id:"use-retrievalquery-parameter-to-customize-responses",children:"Use retrievalQuery parameter to customize responses"}),"\n","\n",(0,o.jsx)(i.A,{language:"typescript",children:m()}),"\n",(0,o.jsx)(n.h3,{id:"instantiate-neo4jvectorstore-from-existing-graph",children:"Instantiate Neo4jVectorStore from existing graph"}),"\n","\n",(0,o.jsx)(i.A,{language:"typescript",children:u()}),"\n",(0,o.jsx)(n.h1,{id:"disclaimer-\ufe0f",children:"Disclaimer \u26a0\ufe0f"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.em,{children:"Security note"}),": Make sure that the database connection uses credentials\nthat are narrowly-scoped to only include necessary permissions.\nFailure to do so may result in data corruption or loss, since the calling\ncode may attempt commands that would result in deletion, mutation\nof data if appropriately prompted or reading sensitive data if such\ndata is present in the database.\nThe best way to guard against such negative outcomes is to (as appropriate)\nlimit the permissions granted to the credentials used with this tool.\nFor example, creating read only users for the database is a good way to\nensure that the calling code cannot mutate or delete data.\nSee the ",(0,o.jsx)(n.a,{href:"/docs/security",children:"security page"})," for more information."]})]})}function b(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(v,{...e})}):v(e)}},78847:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var o=t(74848),r=t(28453);const a={},i=void 0,s={id:"mdx_components/integration_install_tooltip",title:"integration_install_tooltip",description:"See this section for general instructions on installing integration packages.",source:"@site/docs/mdx_components/integration_install_tooltip.mdx",sourceDirName:"mdx_components",slug:"/mdx_components/integration_install_tooltip",permalink:"/docs/mdx_components/integration_install_tooltip",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/mdx_components/integration_install_tooltip.mdx",tags:[],version:"current",frontMatter:{}},c={},d=[];function l(e){const n={a:"a",admonition:"admonition",p:"p",...(0,r.R)(),...e.components};return(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["See ",(0,o.jsx)(n.a,{href:"/docs/how_to/installation#installing-integration-packages",children:"this section for general instructions on installing integration packages"}),"."]})})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},3138:e=>{e.exports={content:'import { OpenAIEmbeddings } from "@langchain/openai";\nimport { Neo4jVectorStore } from "@langchain/community/vectorstores/neo4j_vector";\n\n// Configuration object for Neo4j connection and other related settings\nconst config = {\n  url: "bolt://localhost:7687", // URL for the Neo4j instance\n  username: "neo4j", // Username for Neo4j authentication\n  password: "pleaseletmein", // Password for Neo4j authentication\n  indexName: "vector", // Name of the vector index\n  keywordIndexName: "keyword", // Name of the keyword index if using hybrid search\n  searchType: "vector" as const, // Type of search (e.g., vector, hybrid)\n  nodeLabel: "Chunk", // Label for the nodes in the graph\n  textNodeProperty: "text", // Property of the node containing text\n  embeddingNodeProperty: "embedding", // Property of the node containing embedding\n};\n\nconst documents = [\n  { pageContent: "what\'s this", metadata: { a: 2 } },\n  { pageContent: "Cat drinks milk", metadata: { a: 1 } },\n];\n\nconst neo4jVectorIndex = await Neo4jVectorStore.fromDocuments(\n  documents,\n  new OpenAIEmbeddings(),\n  config\n);\n\nconst results = await neo4jVectorIndex.similaritySearch("water", 1);\n\nconsole.log(results);\n\n/*\n  [ Document { pageContent: \'Cat drinks milk\', metadata: { a: 1 } } ]\n*/\n\nawait neo4jVectorIndex.close();\n',imports:[{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"},{local:"Neo4jVectorStore",imported:"Neo4jVectorStore",source:"@langchain/community/vectorstores/neo4j_vector"}]}},82570:e=>{e.exports={content:'import { OpenAIEmbeddings } from "@langchain/openai";\nimport { Neo4jVectorStore } from "@langchain/community/vectorstores/neo4j_vector";\n\n/**\n * `fromExistingGraph` Method:\n *\n * Description:\n * This method initializes a `Neo4jVectorStore` instance using an existing graph in the Neo4j database.\n * It\'s designed to work with nodes that already have textual properties but might not have embeddings.\n * The method will compute and store embeddings for nodes that lack them.\n *\n * Note:\n * This method is particularly useful when you have a pre-existing graph with textual data and you want\n * to enhance it with vector embeddings for similarity searches without altering the original data structure.\n */\n\n// Configuration object for Neo4j connection and other related settings\nconst config = {\n  url: "bolt://localhost:7687", // URL for the Neo4j instance\n  username: "neo4j", // Username for Neo4j authentication\n  password: "pleaseletmein", // Password for Neo4j authentication\n  indexName: "wikipedia",\n  nodeLabel: "Wikipedia",\n  textNodeProperties: ["title", "description"],\n  embeddingNodeProperty: "embedding",\n  searchType: "hybrid" as const,\n};\n\n// You should have a populated Neo4j database to use this method\nconst neo4jVectorIndex = await Neo4jVectorStore.fromExistingGraph(\n  new OpenAIEmbeddings(),\n  config\n);\n\nawait neo4jVectorIndex.close();\n',imports:[{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"},{local:"Neo4jVectorStore",imported:"Neo4jVectorStore",source:"@langchain/community/vectorstores/neo4j_vector"}]}},26057:e=>{e.exports={content:'import { OpenAIEmbeddings } from "@langchain/openai";\nimport { Neo4jVectorStore } from "@langchain/community/vectorstores/neo4j_vector";\n\n/*\n * The retrievalQuery is a customizable Cypher query fragment used in the Neo4jVectorStore class to define how\n * search results should be retrieved and presented from the Neo4j database. It allows developers to specify\n * the format and structure of the data returned after a similarity search.\n * Mandatory columns for `retrievalQuery`:\n *\n * 1. text:\n *    - Description: Represents the textual content of the node.\n *    - Type: String\n *\n * 2. score:\n *    - Description: Represents the similarity score of the node in relation to the search query. A\n *      higher score indicates a closer match.\n *    - Type: Float (ranging between 0 and 1, where 1 is a perfect match)\n *\n * 3. metadata:\n *    - Description: Contains additional properties and information about the node. This can include\n *      any other attributes of the node that might be relevant to the application.\n *    - Type: Object (key-value pairs)\n *    - Example: { "id": "12345", "category": "Books", "author": "John Doe" }\n *\n * Note: While you can customize the `retrievalQuery` to fetch additional columns or perform\n * transformations, never omit the mandatory columns. The names of these columns (`text`, `score`,\n * and `metadata`) should remain consistent. Renaming them might lead to errors or unexpected behavior.\n */\n\n// Configuration object for Neo4j connection and other related settings\nconst config = {\n  url: "bolt://localhost:7687", // URL for the Neo4j instance\n  username: "neo4j", // Username for Neo4j authentication\n  password: "pleaseletmein", // Password for Neo4j authentication\n  retrievalQuery: `\n    RETURN node.text AS text, score, {a: node.a * 2} AS metadata\n  `,\n};\n\nconst documents = [\n  { pageContent: "what\'s this", metadata: { a: 2 } },\n  { pageContent: "Cat drinks milk", metadata: { a: 1 } },\n];\n\nconst neo4jVectorIndex = await Neo4jVectorStore.fromDocuments(\n  documents,\n  new OpenAIEmbeddings(),\n  config\n);\n\nconst results = await neo4jVectorIndex.similaritySearch("water", 1);\n\nconsole.log(results);\n\n/*\n  [ Document { pageContent: \'Cat drinks milk\', metadata: { a: 2 } } ]\n*/\n\nawait neo4jVectorIndex.close();\n',imports:[{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"},{local:"Neo4jVectorStore",imported:"Neo4jVectorStore",source:"@langchain/community/vectorstores/neo4j_vector"}]}},85449:e=>{e.exports={content:"export default {services:{database:{image:'neo4j',ports:['7687:7687','7474:7474'],environment:['NEO4J_AUTH=neo4j/pleaseletmein']}}};",imports:[]}}}]);
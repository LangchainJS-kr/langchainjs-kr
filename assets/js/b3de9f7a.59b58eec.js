(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3874],{41352:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>x,contentTitle:()=>g,default:()=>y,frontMatter:()=>p,metadata:()=>u,toc:()=>f});var a=t(74848),r=t(28453),o=t(64428),i=t(78847),s=t(93802),c=t.n(s),d=t(40999),l=t.n(d),h=t(98473),m=t.n(h);const p={sidebar_class_name:"node-only"},g="Qdrant",u={id:"integrations/vectorstores/qdrant",title:"Qdrant",description:"Qdrant is a vector similarity search engine. It provides a production-ready service with a convenient API to store, search, and manage points - vectors with an additional payload.",source:"@site/docs/integrations/vectorstores/qdrant.mdx",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/qdrant",permalink:"/docs/integrations/vectorstores/qdrant",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/vectorstores/qdrant.mdx",tags:[],version:"current",frontMatter:{sidebar_class_name:"node-only"},sidebar:"integrations",previous:{title:"Prisma",permalink:"/docs/integrations/vectorstores/prisma"},next:{title:"Redis",permalink:"/docs/integrations/vectorstores/redis"}},x={},f=[{value:"Setup",id:"setup",level:2},{value:"Usage",id:"usage",level:2},{value:"Create a new index from texts",id:"create-a-new-index-from-texts",level:3},...i.toc,{value:"Create a new index from docs",id:"create-a-new-index-from-docs",level:3},{value:"Query docs from existing collection",id:"query-docs-from-existing-collection",level:3}];function v(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"qdrant",children:"Qdrant"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://qdrant.tech/",children:"Qdrant"})," is a vector similarity search engine. It provides a production-ready service with a convenient API to store, search, and manage points - vectors with an additional payload."]}),"\n",(0,a.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Run a Qdrant instance with Docker on your computer by following the ",(0,a.jsx)(n.a,{href:"https://qdrant.tech/documentation/quick-start/",children:"Qdrant setup instructions"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Install the Qdrant Node.js SDK."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install -S @langchain/qdrant\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Setup Env variables for Qdrant before running the code"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"export OPENAI_API_KEY=YOUR_OPENAI_API_KEY_HERE\nexport QDRANT_URL=YOUR_QDRANT_URL_HERE # for example http://localhost:6333\n"})}),"\n"]}),"\n"]}),"\n","\n",(0,a.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,a.jsx)(n.h3,{id:"create-a-new-index-from-texts",children:"Create a new index from texts"}),"\n","\n",(0,a.jsx)(i.default,{}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai @langchain/community\n"})}),"\n","\n",(0,a.jsx)(o.A,{language:"typescript",children:c()}),"\n",(0,a.jsx)(n.h3,{id:"create-a-new-index-from-docs",children:"Create a new index from docs"}),"\n","\n",(0,a.jsx)(o.A,{language:"typescript",children:l()}),"\n",(0,a.jsx)(n.h3,{id:"query-docs-from-existing-collection",children:"Query docs from existing collection"}),"\n","\n",(0,a.jsx)(o.A,{language:"typescript",children:m()})]})}function y(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(v,{...e})}):v(e)}},40999:e=>{e.exports={content:'import { QdrantVectorStore } from "@langchain/qdrant";\nimport { OpenAIEmbeddings } from "@langchain/openai";\nimport { TextLoader } from "langchain/document_loaders/fs/text";\n\n// Create docs with a loader\nconst loader = new TextLoader("src/document_loaders/example_data/example.txt");\nconst docs = await loader.load();\n\nconst vectorStore = await QdrantVectorStore.fromDocuments(\n  docs,\n  new OpenAIEmbeddings(),\n  {\n    url: process.env.QDRANT_URL,\n    collectionName: "a_test_collection",\n  }\n);\n\n// Search for the most similar document\nconst response = await vectorStore.similaritySearch("hello", 1);\n\nconsole.log(response);\n/*\n[\n  Document {\n    pageContent: \'Foo\\nBar\\nBaz\\n\\n\',\n    metadata: { source: \'src/document_loaders/example_data/example.txt\' }\n  }\n]\n*/\n',imports:[{local:"QdrantVectorStore",imported:"QdrantVectorStore",source:"@langchain/qdrant"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"},{local:"TextLoader",imported:"TextLoader",source:"langchain/document_loaders/fs/text"}]}},98473:e=>{e.exports={content:'import { QdrantVectorStore } from "@langchain/qdrant";\nimport { OpenAIEmbeddings } from "@langchain/openai";\n\nconst vectorStore = await QdrantVectorStore.fromExistingCollection(\n  new OpenAIEmbeddings(),\n  {\n    url: process.env.QDRANT_URL,\n    collectionName: "goldel_escher_bach",\n  }\n);\n\nconst response = await vectorStore.similaritySearch("scared", 2);\n\nconsole.log(response);\n\n/*\n[\n  Document { pageContent: \'Achilles: Oh, no!\', metadata: {} },\n  Document {\n    pageContent: \'Achilles: Yiikes! What is that?\',\n    metadata: { id: 1 }\n  }\n]\n*/\n',imports:[{local:"QdrantVectorStore",imported:"QdrantVectorStore",source:"@langchain/qdrant"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"}]}},93802:e=>{e.exports={content:'import { QdrantVectorStore } from "@langchain/qdrant";\nimport { OpenAIEmbeddings } from "@langchain/openai";\n// text sample from Godel, Escher, Bach\nconst vectorStore = await QdrantVectorStore.fromTexts(\n  [\n    `Tortoise: Labyrinth? Labyrinth? Could it Are we in the notorious Little\nHarmonic Labyrinth of the dreaded Majotaur?`,\n    `Achilles: Yiikes! What is that?`,\n    `Tortoise: They say-although I person never believed it myself-that an I\n            Majotaur has created a tiny labyrinth sits in a pit in the middle of\n            it, waiting innocent victims to get lost in its fears complexity.\n            Then, when they wander and dazed into the center, he laughs and\n            laughs at them-so hard, that he laughs them to death!`,\n    `Achilles: Oh, no!`,\n    `Tortoise: But it\'s only a myth. Courage, Achilles.`,\n  ],\n  [{ id: 2 }, { id: 1 }, { id: 3 }, { id: 4 }, { id: 5 }],\n  new OpenAIEmbeddings(),\n  {\n    url: process.env.QDRANT_URL,\n    collectionName: "goldel_escher_bach",\n  }\n);\n\nconst response = await vectorStore.similaritySearch("scared", 2);\n\nconsole.log(response);\n\n/*\n[\n  Document { pageContent: \'Achilles: Oh, no!\', metadata: {} },\n  Document {\n    pageContent: \'Achilles: Yiikes! What is that?\',\n    metadata: { id: 1 }\n  }\n]\n*/\n',imports:[{local:"QdrantVectorStore",imported:"QdrantVectorStore",source:"@langchain/qdrant"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"}]}}}]);
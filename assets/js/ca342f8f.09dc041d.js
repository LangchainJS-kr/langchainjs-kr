(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7372],{67100:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>y,contentTitle:()=>v,default:()=>A,frontMatter:()=>f,metadata:()=>S,toc:()=>x});var a=t(74848),s=t(28453),o=t(78847),r=t(64428),i=t(33477),c=t.n(i),l=t(74215),d=t.n(l),u=t(77364),p=t.n(u),m=t(25435),h=t.n(m),g=t(92122),b=t.n(g);const f={},v="Supabase",S={id:"integrations/vectorstores/supabase",title:"Supabase",description:"Langchain supports using Supabase Postgres database as a vector store, using the pgvector postgres extension. Refer to the Supabase blog post for more information.",source:"@site/docs/integrations/vectorstores/supabase.mdx",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/supabase",permalink:"/docs/integrations/vectorstores/supabase",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/vectorstores/supabase.mdx",tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"SingleStore",permalink:"/docs/integrations/vectorstores/singlestore"},next:{title:"tigris",permalink:"/docs/integrations/vectorstores/tigris"}},y={},x=[{value:"Setup",id:"setup",level:2},{value:"Install the library with",id:"install-the-library-with",level:3},{value:"Create a table and search function in your database",id:"create-a-table-and-search-function-in-your-database",level:3},{value:"Usage",id:"usage",level:2},...o.toc,{value:"Standard Usage",id:"standard-usage",level:3},{value:"Metadata Filtering",id:"metadata-filtering",level:3},{value:"Metadata Query Builder Filtering",id:"metadata-query-builder-filtering",level:3},{value:"Maximal marginal relevance",id:"maximal-marginal-relevance",level:3},{value:"Document deletion",id:"document-deletion",level:3}];function w(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"supabase",children:"Supabase"}),"\n",(0,a.jsxs)(n.p,{children:["Langchain supports using Supabase Postgres database as a vector store, using the ",(0,a.jsx)(n.code,{children:"pgvector"})," postgres extension. Refer to the ",(0,a.jsx)(n.a,{href:"https://supabase.com/blog/openai-embeddings-postgres-vector",children:"Supabase blog post"})," for more information."]}),"\n",(0,a.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,a.jsx)(n.h3,{id:"install-the-library-with",children:"Install the library with"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install -S @supabase/supabase-js\n"})}),"\n",(0,a.jsx)(n.h3,{id:"create-a-table-and-search-function-in-your-database",children:"Create a table and search function in your database"}),"\n",(0,a.jsx)(n.p,{children:"Run this in your database:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Enable the pgvector extension to work with embedding vectors\ncreate extension vector;\n\n-- Create a table to store your documents\ncreate table documents (\n  id bigserial primary key,\n  content text, -- corresponds to Document.pageContent\n  metadata jsonb, -- corresponds to Document.metadata\n  embedding vector(1536) -- 1536 works for OpenAI embeddings, change if needed\n);\n\n-- Create a function to search for documents\ncreate function match_documents (\n  query_embedding vector(1536),\n  match_count int DEFAULT null,\n  filter jsonb DEFAULT '{}'\n) returns table (\n  id bigint,\n  content text,\n  metadata jsonb,\n  embedding jsonb,\n  similarity float\n)\nlanguage plpgsql\nas $$\n#variable_conflict use_column\nbegin\n  return query\n  select\n    id,\n    content,\n    metadata,\n    (embedding::text)::jsonb as embedding,\n    1 - (documents.embedding <=> query_embedding) as similarity\n  from documents\n  where metadata @> filter\n  order by documents.embedding <=> query_embedding\n  limit match_count;\nend;\n$$;\n"})}),"\n",(0,a.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n","\n",(0,a.jsx)(o.default,{}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai @langchain/community\n"})}),"\n","\n",(0,a.jsx)(n.h3,{id:"standard-usage",children:"Standard Usage"}),"\n",(0,a.jsx)(n.p,{children:"The below example shows how to perform a basic similarity search with Supabase:"}),"\n",(0,a.jsx)(r.A,{language:"typescript",children:c()}),"\n",(0,a.jsx)(n.h3,{id:"metadata-filtering",children:"Metadata Filtering"}),"\n",(0,a.jsxs)(n.p,{children:["Given the above ",(0,a.jsx)(n.code,{children:"match_documents"})," Postgres function, you can also pass a filter parameter to only documents with a specific metadata field value. This filter parameter is a JSON object, and the ",(0,a.jsx)(n.code,{children:"match_documents"})," function will use the Postgres JSONB Containment operator ",(0,a.jsx)(n.code,{children:"@>"})," to filter documents by the metadata field values you specify. See details on the ",(0,a.jsx)(n.a,{href:"https://www.postgresql.org/docs/current/datatype-json.html#JSON-CONTAINMENT",children:"Postgres JSONB Containment operator"})," for more information."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Note:"})," If you've previously been using ",(0,a.jsx)(n.code,{children:"SupabaseVectorStore"}),", you may need to drop and recreate the ",(0,a.jsx)(n.code,{children:"match_documents"})," function per the updated SQL above to use this functionality."]}),"\n",(0,a.jsx)(r.A,{language:"typescript",children:d()}),"\n",(0,a.jsx)(n.h3,{id:"metadata-query-builder-filtering",children:"Metadata Query Builder Filtering"}),"\n",(0,a.jsxs)(n.p,{children:["You can also use query builder-style filtering similar to how ",(0,a.jsx)(n.a,{href:"https://supabase.com/docs/reference/javascript/using-filters",children:"the Supabase JavaScript library works"})," instead of passing an object. Note that since most of the filter properties are in the metadata column, you need to use arrow operators (",(0,a.jsx)(n.code,{children:"->"})," for integer or ",(0,a.jsx)(n.code,{children:"->>"})," for text) as defined in ",(0,a.jsx)(n.a,{href:"https://postgrest.org/en/stable/references/api/tables_views.html?highlight=operators#json-columns",children:"Postgrest API documentation"})," and specify the data type of the property (e.g. the column should look something like ",(0,a.jsx)(n.code,{children:"metadata->some_int_value::int"}),")."]}),"\n",(0,a.jsx)(r.A,{language:"typescript",children:p()}),"\n",(0,a.jsx)(n.h3,{id:"maximal-marginal-relevance",children:"Maximal marginal relevance"}),"\n",(0,a.jsx)(n.p,{children:"You can use maximal marginal relevance search, which optimizes for similarity to the query AND diversity."}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Note:"})," If you've previously been using ",(0,a.jsx)(n.code,{children:"SupabaseVectorStore"}),", you may need to drop and recreate the ",(0,a.jsx)(n.code,{children:"match_documents"})," function per the updated SQL above to use this functionality."]}),"\n",(0,a.jsx)(r.A,{language:"typescript",children:h()}),"\n",(0,a.jsx)(n.h3,{id:"document-deletion",children:"Document deletion"}),"\n",(0,a.jsx)(r.A,{language:"typescript",children:b()})]})}function A(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(w,{...e})}):w(e)}},33477:e=>{e.exports={content:'import { SupabaseVectorStore } from "@langchain/community/vectorstores/supabase";\nimport { OpenAIEmbeddings } from "@langchain/openai";\nimport { createClient } from "@supabase/supabase-js";\n\n// First, follow set-up instructions at\n// https://js.langchain.com/docs/modules/indexes/vector_stores/integrations/supabase\n\nconst privateKey = process.env.SUPABASE_PRIVATE_KEY;\nif (!privateKey) throw new Error(`Expected env var SUPABASE_PRIVATE_KEY`);\n\nconst url = process.env.SUPABASE_URL;\nif (!url) throw new Error(`Expected env var SUPABASE_URL`);\n\nexport const run = async () => {\n  const client = createClient(url, privateKey);\n\n  const vectorStore = await SupabaseVectorStore.fromTexts(\n    ["Hello world", "Bye bye", "What\'s this?"],\n    [{ id: 2 }, { id: 1 }, { id: 3 }],\n    new OpenAIEmbeddings(),\n    {\n      client,\n      tableName: "documents",\n      queryName: "match_documents",\n    }\n  );\n\n  const resultOne = await vectorStore.similaritySearch("Hello world", 1);\n\n  console.log(resultOne);\n};\n',imports:[{local:"SupabaseVectorStore",imported:"SupabaseVectorStore",source:"@langchain/community/vectorstores/supabase"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"}]}},92122:e=>{e.exports={content:'import { SupabaseVectorStore } from "@langchain/community/vectorstores/supabase";\nimport { OpenAIEmbeddings } from "@langchain/openai";\nimport { createClient } from "@supabase/supabase-js";\n\n// First, follow set-up instructions at\n// https://js.langchain.com/docs/modules/indexes/vector_stores/integrations/supabase\n\nconst privateKey = process.env.SUPABASE_PRIVATE_KEY;\nif (!privateKey) throw new Error(`Expected env var SUPABASE_PRIVATE_KEY`);\n\nconst url = process.env.SUPABASE_URL;\nif (!url) throw new Error(`Expected env var SUPABASE_URL`);\n\nexport const run = async () => {\n  const client = createClient(url, privateKey);\n\n  const embeddings = new OpenAIEmbeddings();\n\n  const store = new SupabaseVectorStore(embeddings, {\n    client,\n    tableName: "documents",\n  });\n\n  const docs = [\n    { pageContent: "hello", metadata: { b: 1, c: 9, stuff: "right" } },\n    { pageContent: "hello", metadata: { b: 1, c: 9, stuff: "wrong" } },\n  ];\n\n  // Also takes an additional {ids: []} parameter for upsertion\n  const ids = await store.addDocuments(docs);\n\n  const resultA = await store.similaritySearch("hello", 2);\n  console.log(resultA);\n\n  /*\n    [\n      Document { pageContent: "hello", metadata: { b: 1, c: 9, stuff: "right" } },\n      Document { pageContent: "hello", metadata: { b: 1, c: 9, stuff: "wrong" } },\n    ]\n  */\n\n  await store.delete({ ids });\n\n  const resultB = await store.similaritySearch("hello", 2);\n  console.log(resultB);\n\n  /*\n    []\n  */\n};\n',imports:[{local:"SupabaseVectorStore",imported:"SupabaseVectorStore",source:"@langchain/community/vectorstores/supabase"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"}]}},25435:e=>{e.exports={content:'import { SupabaseVectorStore } from "@langchain/community/vectorstores/supabase";\nimport { OpenAIEmbeddings } from "@langchain/openai";\nimport { createClient } from "@supabase/supabase-js";\n\n// First, follow set-up instructions at\n// https://js.langchain.com/docs/modules/indexes/vector_stores/integrations/supabase\n\nconst privateKey = process.env.SUPABASE_PRIVATE_KEY;\nif (!privateKey) throw new Error(`Expected env var SUPABASE_PRIVATE_KEY`);\n\nconst url = process.env.SUPABASE_URL;\nif (!url) throw new Error(`Expected env var SUPABASE_URL`);\n\nexport const run = async () => {\n  const client = createClient(url, privateKey);\n\n  const vectorStore = await SupabaseVectorStore.fromTexts(\n    ["Hello world", "Bye bye", "What\'s this?"],\n    [{ id: 2 }, { id: 1 }, { id: 3 }],\n    new OpenAIEmbeddings(),\n    {\n      client,\n      tableName: "documents",\n      queryName: "match_documents",\n    }\n  );\n\n  const resultOne = await vectorStore.maxMarginalRelevanceSearch(\n    "Hello world",\n    { k: 1 }\n  );\n\n  console.log(resultOne);\n};\n',imports:[{local:"SupabaseVectorStore",imported:"SupabaseVectorStore",source:"@langchain/community/vectorstores/supabase"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"}]}},74215:e=>{e.exports={content:'import { SupabaseVectorStore } from "@langchain/community/vectorstores/supabase";\nimport { OpenAIEmbeddings } from "@langchain/openai";\nimport { createClient } from "@supabase/supabase-js";\n\n// First, follow set-up instructions at\n// https://js.langchain.com/docs/modules/indexes/vector_stores/integrations/supabase\n\nconst privateKey = process.env.SUPABASE_PRIVATE_KEY;\nif (!privateKey) throw new Error(`Expected env var SUPABASE_PRIVATE_KEY`);\n\nconst url = process.env.SUPABASE_URL;\nif (!url) throw new Error(`Expected env var SUPABASE_URL`);\n\nexport const run = async () => {\n  const client = createClient(url, privateKey);\n\n  const vectorStore = await SupabaseVectorStore.fromTexts(\n    ["Hello world", "Hello world", "Hello world"],\n    [{ user_id: 2 }, { user_id: 1 }, { user_id: 3 }],\n    new OpenAIEmbeddings(),\n    {\n      client,\n      tableName: "documents",\n      queryName: "match_documents",\n    }\n  );\n\n  const result = await vectorStore.similaritySearch("Hello world", 1, {\n    user_id: 3,\n  });\n\n  console.log(result);\n};\n',imports:[{local:"SupabaseVectorStore",imported:"SupabaseVectorStore",source:"@langchain/community/vectorstores/supabase"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"}]}},77364:e=>{e.exports={content:'import {\n  SupabaseFilterRPCCall,\n  SupabaseVectorStore,\n} from "@langchain/community/vectorstores/supabase";\nimport { OpenAIEmbeddings } from "@langchain/openai";\nimport { createClient } from "@supabase/supabase-js";\n\n// First, follow set-up instructions at\n// https://js.langchain.com/docs/modules/indexes/vector_stores/integrations/supabase\n\nconst privateKey = process.env.SUPABASE_PRIVATE_KEY;\nif (!privateKey) throw new Error(`Expected env var SUPABASE_PRIVATE_KEY`);\n\nconst url = process.env.SUPABASE_URL;\nif (!url) throw new Error(`Expected env var SUPABASE_URL`);\n\nexport const run = async () => {\n  const client = createClient(url, privateKey);\n\n  const embeddings = new OpenAIEmbeddings();\n\n  const store = new SupabaseVectorStore(embeddings, {\n    client,\n    tableName: "documents",\n  });\n\n  const docs = [\n    {\n      pageContent:\n        "This is a long text, but it actually means something because vector database does not understand Lorem Ipsum. So I would need to expand upon the notion of quantum fluff, a theorectical concept where subatomic particles coalesce to form transient multidimensional spaces. Yet, this abstraction holds no real-world application or comprehensible meaning, reflecting a cosmic puzzle.",\n      metadata: { b: 1, c: 10, stuff: "right" },\n    },\n    {\n      pageContent:\n        "This is a long text, but it actually means something because vector database does not understand Lorem Ipsum. So I would need to proceed by discussing the echo of virtual tweets in the binary corridors of the digital universe. Each tweet, like a pixelated canary, hums in an unseen frequency, a fascinatingly perplexing phenomenon that, while conjuring vivid imagery, lacks any concrete implication or real-world relevance, portraying a paradox of multidimensional spaces in the age of cyber folklore.",\n      metadata: { b: 2, c: 9, stuff: "right" },\n    },\n    { pageContent: "hello", metadata: { b: 1, c: 9, stuff: "right" } },\n    { pageContent: "hello", metadata: { b: 1, c: 9, stuff: "wrong" } },\n    { pageContent: "hi", metadata: { b: 2, c: 8, stuff: "right" } },\n    { pageContent: "bye", metadata: { b: 3, c: 7, stuff: "right" } },\n    { pageContent: "what\'s this", metadata: { b: 4, c: 6, stuff: "right" } },\n  ];\n\n  // Also supports an additional {ids: []} parameter for upsertion\n  await store.addDocuments(docs);\n\n  const funcFilterA: SupabaseFilterRPCCall = (rpc) =>\n    rpc\n      .filter("metadata->b::int", "lt", 3)\n      .filter("metadata->c::int", "gt", 7)\n      .textSearch("content", `\'multidimensional\' & \'spaces\'`, {\n        config: "english",\n      });\n\n  const resultA = await store.similaritySearch("quantum", 4, funcFilterA);\n\n  const funcFilterB: SupabaseFilterRPCCall = (rpc) =>\n    rpc\n      .filter("metadata->b::int", "lt", 3)\n      .filter("metadata->c::int", "gt", 7)\n      .filter("metadata->>stuff", "eq", "right");\n\n  const resultB = await store.similaritySearch("hello", 2, funcFilterB);\n\n  console.log(resultA, resultB);\n};\n',imports:[{local:"SupabaseFilterRPCCall",imported:"SupabaseFilterRPCCall",source:"@langchain/community/vectorstores/supabase"},{local:"SupabaseVectorStore",imported:"SupabaseVectorStore",source:"@langchain/community/vectorstores/supabase"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"}]}}}]);
(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5296,65],{2087:(n,e,a)=>{"use strict";a.r(e),a.d(e,{assets:()=>m,contentTitle:()=>d,default:()=>g,frontMatter:()=>l,metadata:()=>h,toc:()=>p});var s=a(74848),t=a(28453),o=a(64428),r=a(78847),i=a(83711),c=a.n(i);const l={hide_table_of_contents:!0},d="Cassandra Chat Memory",h={id:"integrations/chat_memory/cassandra",title:"Cassandra Chat Memory",description:"For longer-term persistence across chat sessions, you can swap out the default in-memory chatHistory that backs chat memory classes like BufferMemory for a Cassandra cluster.",source:"@site/docs/integrations/chat_memory/cassandra.mdx",sourceDirName:"integrations/chat_memory",slug:"/integrations/chat_memory/cassandra",permalink:"/docs/integrations/chat_memory/cassandra",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/chat_memory/cassandra.mdx",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0}},m={},p=[{value:"Setup",id:"setup",level:2},...r.toc,{value:"Apache Cassandra\xae",id:"apache-cassandra",level:3},{value:"Astra DB",id:"astra-db",level:3},{value:"Usage",id:"usage",level:2}];function u(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,t.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h1,{id:"cassandra-chat-memory",children:"Cassandra Chat Memory"}),"\n",(0,s.jsxs)(e.p,{children:["For longer-term persistence across chat sessions, you can swap out the default in-memory ",(0,s.jsx)(e.code,{children:"chatHistory"})," that backs chat memory classes like ",(0,s.jsx)(e.code,{children:"BufferMemory"})," for a Cassandra cluster."]}),"\n",(0,s.jsx)(e.h2,{id:"setup",children:"Setup"}),"\n",(0,s.jsx)(e.p,{children:"First, install the Cassandra Node.js driver:"}),"\n","\n",(0,s.jsx)(r.default,{}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install cassandra-driver @langchain/openai @langchain/community\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Depending on your database providers, the specifics of how to connect to the database will vary. We will create a document ",(0,s.jsx)(e.code,{children:"configConnection"})," which will be used as part of the vector store configuration."]}),"\n",(0,s.jsx)(e.h3,{id:"apache-cassandra",children:"Apache Cassandra\xae"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"const configConnection = {\n  contactPoints: ['h1', 'h2'],\n  localDataCenter: 'datacenter1',\n  credentials: {\n    username: <...> as string,\n    password: <...> as string,\n  },\n};\n"})}),"\n",(0,s.jsx)(e.h3,{id:"astra-db",children:"Astra DB"}),"\n",(0,s.jsx)(e.p,{children:"Astra DB is a cloud-native Cassandra-as-a-Service platform."}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["Create an ",(0,s.jsx)(e.a,{href:"https://astra.datastax.com/register",children:"Astra DB account"}),"."]}),"\n",(0,s.jsxs)(e.li,{children:["Create a ",(0,s.jsx)(e.a,{href:"https://astra.datastax.com/createDatabase",children:"vector enabled database"}),"."]}),"\n",(0,s.jsxs)(e.li,{children:["Create a ",(0,s.jsx)(e.a,{href:"https://docs.datastax.com/en/astra/docs/manage-application-tokens.html",children:"token"})," for your database."]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"const configConnection = {\n  serviceProviderArgs: {\n    astra: {\n      token: <...> as string,\n      endpoint: <...> as string,\n    },\n  },\n};\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Instead of ",(0,s.jsx)(e.code,{children:"endpoint:"}),", you many provide property ",(0,s.jsx)(e.code,{children:"datacenterID:"})," and optionally ",(0,s.jsx)(e.code,{children:"regionName:"}),"."]}),"\n",(0,s.jsx)(e.h2,{id:"usage",children:"Usage"}),"\n","\n",(0,s.jsx)(o.A,{language:"typescript",children:c()})]})}function g(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(u,{...n})}):u(n)}},78847:(n,e,a)=>{"use strict";a.r(e),a.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var s=a(74848),t=a(28453);const o={},r=void 0,i={id:"mdx_components/integration_install_tooltip",title:"integration_install_tooltip",description:"See this section for general instructions on installing integration packages.",source:"@site/docs/mdx_components/integration_install_tooltip.mdx",sourceDirName:"mdx_components",slug:"/mdx_components/integration_install_tooltip",permalink:"/docs/mdx_components/integration_install_tooltip",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/mdx_components/integration_install_tooltip.mdx",tags:[],version:"current",frontMatter:{}},c={},l=[];function d(n){const e={a:"a",admonition:"admonition",p:"p",...(0,t.R)(),...n.components};return(0,s.jsx)(e.admonition,{type:"tip",children:(0,s.jsxs)(e.p,{children:["See ",(0,s.jsx)(e.a,{href:"/docs/how_to/installation#installing-integration-packages",children:"this section for general instructions on installing integration packages"}),"."]})})}function h(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}},83711:n=>{n.exports={content:'import { BufferMemory } from "langchain/memory/index";\nimport { CassandraChatMessageHistory } from "@langchain/community/stores/message/cassandra";\nimport { ChatOpenAI } from "@langchain/openai";\nimport { ConversationChain } from "langchain/chains";\n\n// The example below uses Astra DB, but you can use any Cassandra connection\nconst configConnection = {\n  serviceProviderArgs: {\n    astra: {\n      token: "<your Astra Token>" as string,\n      endpoint: "<your Astra Endpoint>" as string,\n    },\n  },\n};\n\nconst memory = new BufferMemory({\n  chatHistory: new CassandraChatMessageHistory({\n    ...configConnection,\n    keyspace: "langchain",\n    table: "message_history",\n    sessionId: "<some unique session identifier>",\n  }),\n});\n\nconst model = new ChatOpenAI();\nconst chain = new ConversationChain({ llm: model, memory });\n\nconst res1 = await chain.invoke({ input: "Hi! I\'m Jonathan." });\nconsole.log({ res1 });\n/*\n{\n  res1: {\n    text: "Hello Jonathan! How can I assist you today?"\n  }\n}\n*/\n\nconst res2 = await chain.invoke({ input: "What did I just say my name was?" });\nconsole.log({ res2 });\n\n/*\n{\n  res1: {\n    text: "You said your name was Jonathan."\n  }\n}\n*/\n',imports:[{local:"BufferMemory",imported:"BufferMemory",source:"langchain/memory/index"},{local:"CassandraChatMessageHistory",imported:"CassandraChatMessageHistory",source:"@langchain/community/stores/message/cassandra"},{local:"ChatOpenAI",imported:"ChatOpenAI",source:"@langchain/openai"},{local:"ConversationChain",imported:"ConversationChain",source:"langchain/chains"}]}}}]);
"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[614],{26014:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>r});var a=t(74848),s=t(28453);const o={sidebar_class_name:"hidden",title:"How to pass callbacks in at runtime"},l=void 0,i={id:"how_to/callbacks_runtime",title:"How to pass callbacks in at runtime",description:"This guide assumes familiarity with the following concepts:",source:"@site/docs/how_to/callbacks_runtime.mdx",sourceDirName:"how_to",slug:"/how_to/callbacks_runtime",permalink:"/docs/how_to/callbacks_runtime",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/how_to/callbacks_runtime.mdx",tags:[],version:"current",frontMatter:{sidebar_class_name:"hidden",title:"How to pass callbacks in at runtime"},sidebar:"tutorialSidebar",previous:{title:"How to pass callbacks into a module constructor",permalink:"/docs/how_to/callbacks_constructor"},next:{title:"How to split by character",permalink:"/docs/how_to/character_text_splitter"}},c={},r=[{value:"Next steps",id:"next-steps",level:2}];function u(n){const e={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(e.admonition,{title:"Prerequisites",type:"info",children:[(0,a.jsx)(e.p,{children:"This guide assumes familiarity with the following concepts:"}),(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"../../docs/concepts/#callbacks",children:"Callbacks"})}),"\n"]})]}),"\n",(0,a.jsxs)(e.p,{children:["In many cases, it is advantageous to pass in handlers instead when\nrunning the object. When we pass through\n",(0,a.jsx)(e.a,{href:"https://api.js.langchain.com/interfaces/langchain_core_callbacks_base.CallbackHandlerMethods.html",children:(0,a.jsx)(e.code,{children:"CallbackHandlers"})}),"\nusing the ",(0,a.jsx)(e.code,{children:"callbacks"})," keyword arg when executing an run, those callbacks\nwill be issued by all nested objects involved in the execution. For\nexample, when a handler is passed through to an Agent, it will be used\nfor all callbacks related to the agent and all the objects involved in\nthe agent\u2019s execution, in this case, the Tools and LLM."]}),"\n",(0,a.jsxs)(e.p,{children:["This prevents us from having to manually attach the handlers to each\nindividual nested object. Here\u2019s an example using LangChain\u2019s built-in\n",(0,a.jsx)(e.a,{href:"https://api.js.langchain.com/classes/langchain_core_tracers_console.ConsoleCallbackHandler.html",children:(0,a.jsx)(e.code,{children:"ConsoleCallbackHandler"})}),":"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:'import { ConsoleCallbackHandler } from "@langchain/core/tracers/console";\nimport { ChatPromptTemplate } from "@langchain/core/prompts";\nimport { ChatAnthropic } from "@langchain/anthropic";\n\nconst handler = new ConsoleCallbackHandler();\n\nconst prompt = ChatPromptTemplate.fromTemplate(`What is 1 + {number}?`);\nconst model = new ChatAnthropic({\n  model: "claude-3-sonnet-20240229",\n});\n\nconst chain = prompt.pipe(model);\n\nawait chain.invoke({ number: "2" }, { callbacks: [handler] });\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:'[chain/start] [1:chain:RunnableSequence] Entering Chain run with input: {\n  "number": "2"\n}\n[chain/start] [1:chain:RunnableSequence > 2:prompt:ChatPromptTemplate] Entering Chain run with input: {\n  "number": "2"\n}\n[chain/end] [1:chain:RunnableSequence > 2:prompt:ChatPromptTemplate] [1ms] Exiting Chain run with output: {\n  "lc": 1,\n  "type": "constructor",\n  "id": [\n    "langchain_core",\n    "prompt_values",\n    "ChatPromptValue"\n  ],\n  "kwargs": {\n    "messages": [\n      {\n        "lc": 1,\n        "type": "constructor",\n        "id": [\n          "langchain_core",\n          "messages",\n          "HumanMessage"\n        ],\n        "kwargs": {\n          "content": "What is 1 + 2?",\n          "additional_kwargs": {},\n          "response_metadata": {}\n        }\n      }\n    ]\n  }\n}\n[llm/start] [1:chain:RunnableSequence > 3:llm:ChatAnthropic] Entering LLM run with input: {\n  "messages": [\n    [\n      {\n        "lc": 1,\n        "type": "constructor",\n        "id": [\n          "langchain_core",\n          "messages",\n          "HumanMessage"\n        ],\n        "kwargs": {\n          "content": "What is 1 + 2?",\n          "additional_kwargs": {},\n          "response_metadata": {}\n        }\n      }\n    ]\n  ]\n}\n[llm/end] [1:chain:RunnableSequence > 3:llm:ChatAnthropic] [766ms] Exiting LLM run with output: {\n  "generations": [\n    [\n      {\n        "text": "1 + 2 = 3",\n        "message": {\n          "lc": 1,\n          "type": "constructor",\n          "id": [\n            "langchain_core",\n            "messages",\n            "AIMessage"\n          ],\n          "kwargs": {\n            "content": "1 + 2 = 3",\n            "tool_calls": [],\n            "invalid_tool_calls": [],\n            "additional_kwargs": {\n              "id": "msg_01SGGkFVbUbH4fK7JS7agerD",\n              "type": "message",\n              "role": "assistant",\n              "model": "claude-3-sonnet-20240229",\n              "stop_sequence": null,\n              "usage": {\n                "input_tokens": 16,\n                "output_tokens": 13\n              },\n              "stop_reason": "end_turn"\n            },\n            "response_metadata": {\n              "id": "msg_01SGGkFVbUbH4fK7JS7agerD",\n              "model": "claude-3-sonnet-20240229",\n              "stop_sequence": null,\n              "usage": {\n                "input_tokens": 16,\n                "output_tokens": 13\n              },\n              "stop_reason": "end_turn"\n            }\n          }\n        }\n      }\n    ]\n  ],\n  "llmOutput": {\n    "id": "msg_01SGGkFVbUbH4fK7JS7agerD",\n    "model": "claude-3-sonnet-20240229",\n    "stop_sequence": null,\n    "usage": {\n      "input_tokens": 16,\n      "output_tokens": 13\n    },\n    "stop_reason": "end_turn"\n  }\n}\n[chain/end] [1:chain:RunnableSequence] [778ms] Exiting Chain run with output: {\n  "lc": 1,\n  "type": "constructor",\n  "id": [\n    "langchain_core",\n    "messages",\n    "AIMessage"\n  ],\n  "kwargs": {\n    "content": "1 + 2 = 3",\n    "tool_calls": [],\n    "invalid_tool_calls": [],\n    "additional_kwargs": {\n      "id": "msg_01SGGkFVbUbH4fK7JS7agerD",\n      "type": "message",\n      "role": "assistant",\n      "model": "claude-3-sonnet-20240229",\n      "stop_sequence": null,\n      "usage": {\n        "input_tokens": 16,\n        "output_tokens": 13\n      },\n      "stop_reason": "end_turn"\n    },\n    "response_metadata": {\n      "id": "msg_01SGGkFVbUbH4fK7JS7agerD",\n      "model": "claude-3-sonnet-20240229",\n      "stop_sequence": null,\n      "usage": {\n        "input_tokens": 16,\n        "output_tokens": 13\n      },\n      "stop_reason": "end_turn"\n    }\n  }\n}\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:'AIMessage {\n  lc_serializable: true,\n  lc_kwargs: {\n    content: "1 + 2 = 3",\n    tool_calls: [],\n    invalid_tool_calls: [],\n    additional_kwargs: {\n      id: "msg_01SGGkFVbUbH4fK7JS7agerD",\n      type: "message",\n      role: "assistant",\n      model: "claude-3-sonnet-20240229",\n      stop_sequence: null,\n      usage: { input_tokens: 16, output_tokens: 13 },\n      stop_reason: "end_turn"\n    },\n    response_metadata: {}\n  },\n  lc_namespace: [ "langchain_core", "messages" ],\n  content: "1 + 2 = 3",\n  name: undefined,\n  additional_kwargs: {\n    id: "msg_01SGGkFVbUbH4fK7JS7agerD",\n    type: "message",\n    role: "assistant",\n    model: "claude-3-sonnet-20240229",\n    stop_sequence: null,\n    usage: { input_tokens: 16, output_tokens: 13 },\n    stop_reason: "end_turn"\n  },\n  response_metadata: {\n    id: "msg_01SGGkFVbUbH4fK7JS7agerD",\n    model: "claude-3-sonnet-20240229",\n    stop_sequence: null,\n    usage: { input_tokens: 16, output_tokens: 13 },\n    stop_reason: "end_turn"\n  },\n  tool_calls: [],\n  invalid_tool_calls: []\n}\n'})}),"\n",(0,a.jsx)(e.p,{children:"If there are already existing callbacks associated with a module, these\nwill run in addition to any passed in at runtime."}),"\n",(0,a.jsx)(e.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,a.jsx)(e.p,{children:"You\u2019ve now learned how to pass callbacks at runtime."}),"\n",(0,a.jsxs)(e.p,{children:["Next, check out the other how-to guides in this section, such as how to\ncreate your own ",(0,a.jsx)(e.a,{href:"../../docs/how_to/custom_callbacks",children:"custom callback\nhandlers"}),"."]})]})}function d(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(u,{...n})}):u(n)}}}]);
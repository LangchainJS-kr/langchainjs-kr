"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9284],{35263:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>i});var a=t(74848),o=t(28453);const s={sidebar_class_name:"hidden",title:"How to create custom callback handlers"},c=void 0,l={id:"how_to/custom_callbacks",title:"How to create custom callback handlers",description:"This guide assumes familiarity with the following concepts:",source:"@site/docs/how_to/custom_callbacks.mdx",sourceDirName:"how_to",slug:"/how_to/custom_callbacks",permalink:"/docs/how_to/custom_callbacks",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/how_to/custom_callbacks.mdx",tags:[],version:"current",frontMatter:{sidebar_class_name:"hidden",title:"How to create custom callback handlers"},sidebar:"tutorialSidebar",previous:{title:"How to do retrieval with contextual compression",permalink:"/docs/how_to/contextual_compression"},next:{title:"How to write a custom retriever class",permalink:"/docs/how_to/custom_retriever"}},r={},i=[{value:"Next steps",id:"next-steps",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.admonition,{title:"Prerequisites",type:"info",children:[(0,a.jsx)(n.p,{children:"This guide assumes familiarity with the following concepts:"}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"../../docs/concepts/#callbacks",children:"Callbacks"})}),"\n"]})]}),"\n",(0,a.jsx)(n.p,{children:"LangChain has some built-in callback handlers, but you will often want\nto create your own handlers with custom logic."}),"\n",(0,a.jsxs)(n.p,{children:["To create a custom callback handler, we need to determine the\n",(0,a.jsx)(n.a,{href:"https://api.js.langchain.com/interfaces/langchain_core_callbacks_base.CallbackHandlerMethods.html",children:"event(s)"}),"\nwe want our callback handler to handle as well as what we want our\ncallback handler to do when the event is triggered. Then all we need to\ndo is attach the callback handler to the object, for example via ",(0,a.jsx)(n.a,{href:"../../docs/how_to/callbacks_constructor",children:"the\nconstructor"})," or ",(0,a.jsx)(n.a,{href:"../../docs/how_to/callbacks_runtime",children:"at\nruntime"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"An easy way to construct a custom callback handler is to initialize it\nas an object whose keys are functions with names matching the events we\nwant to handle. Here\u2019s an example that only handles the start of a chat\nmodel and streamed tokens from the model run:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'import { ChatPromptTemplate } from "@langchain/core/prompts";\nimport { ChatAnthropic } from "@langchain/anthropic";\n\nconst prompt = ChatPromptTemplate.fromTemplate(`What is 1 + {number}?`);\nconst model = new ChatAnthropic({\n  model: "claude-3-sonnet-20240229",\n});\n\nconst chain = prompt.pipe(model);\n\nconst customHandler = {\n  handleChatModelStart: async (llm, inputMessages, runId) => {\n    console.log("Chat model start:", llm, inputMessages, runId);\n  },\n  handleLLMNewToken: async (token) => {\n    console.log("Chat model new token", token);\n  },\n};\n\nconst stream = await chain.stream(\n  { number: "2" },\n  { callbacks: [customHandler] }\n);\n\nfor await (const _ of stream) {\n  // Just consume the stream so the callbacks run\n}\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:'Chat model start: {\n  lc: 1,\n  type: "constructor",\n  id: [ "langchain", "chat_models", "anthropic", "ChatAnthropic" ],\n  kwargs: {\n    callbacks: undefined,\n    model: "claude-3-sonnet-20240229",\n    verbose: undefined,\n    anthropic_api_key: { lc: 1, type: "secret", id: [ "ANTHROPIC_API_KEY" ] },\n    api_key: { lc: 1, type: "secret", id: [ "ANTHROPIC_API_KEY" ] }\n  }\n} [\n  [\n    HumanMessage {\n      lc_serializable: true,\n      lc_kwargs: {\n        content: "What is 1 + 2?",\n        additional_kwargs: {},\n        response_metadata: {}\n      },\n      lc_namespace: [ "langchain_core", "messages" ],\n      content: "What is 1 + 2?",\n      name: undefined,\n      additional_kwargs: {},\n      response_metadata: {}\n    }\n  ]\n] b6e3b7ad-c602-4cef-9652-d51781a657b7\nChat model new token The\nChat model new token  sum\nChat model new token  of\nChat model new token\nChat model new token 1\nChat model new token\nChat model new token an\nChat model new token d\nChat model new token 2\nChat model new token\nChat model new token is\nChat model new token\nChat model new token 3\nChat model new token .\n'})}),"\n",(0,a.jsxs)(n.p,{children:["You can see ",(0,a.jsx)(n.a,{href:"https://api.js.langchain.com/interfaces/langchain_core_callbacks_base.CallbackHandlerMethods.html",children:"this reference\npage"}),"\nfor a list of events you can handle. Note that the ",(0,a.jsx)(n.code,{children:"handleChain*"})," events\nrun for most LCEL runnables."]}),"\n",(0,a.jsx)(n.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,a.jsx)(n.p,{children:"You\u2019ve now learned how to create your own custom callback handlers."}),"\n",(0,a.jsxs)(n.p,{children:["Next, check out the other how-to guides in this section, such as ",(0,a.jsx)(n.a,{href:"../../docs/how_to/callbacks_backgrounding",children:"how to\nbackground callbacks"}),"."]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}}}]);
(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9116,65],{35207:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>d,default:()=>g,frontMatter:()=>l,metadata:()=>h,toc:()=>m});var o=t(74848),s=t(28453),r=t(64428),a=t(27304),i=t.n(a),c=t(78847);const l={hide_table_of_contents:!0},d="SearchApi Loader",h={id:"integrations/document_loaders/web_loaders/searchapi",title:"SearchApi Loader",description:"This guide shows how to use SearchApi with LangChain to load web search results.",source:"@site/docs/integrations/document_loaders/web_loaders/searchapi.mdx",sourceDirName:"integrations/document_loaders/web_loaders",slug:"/integrations/document_loaders/web_loaders/searchapi",permalink:"/docs/integrations/document_loaders/web_loaders/searchapi",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/integrations/document_loaders/web_loaders/searchapi.mdx",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"integrations",previous:{title:"S3 File",permalink:"/docs/integrations/document_loaders/web_loaders/s3"},next:{title:"SerpAPI Loader",permalink:"/docs/integrations/document_loaders/web_loaders/serpapi"}},p={},m=[{value:"Overview",id:"overview",level:2},{value:"Setup",id:"setup",level:2},{value:"Usage",id:"usage",level:2},...c.toc];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"searchapi-loader",children:"SearchApi Loader"}),"\n",(0,o.jsx)(n.p,{children:"This guide shows how to use SearchApi with LangChain to load web search results."}),"\n",(0,o.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://www.searchapi.io/",children:"SearchApi"})," is a real-time API that grants developers access to results from a variety of search engines, including engines like ",(0,o.jsx)(n.a,{href:"https://www.searchapi.io/docs/google",children:"Google Search"}),",\n",(0,o.jsx)(n.a,{href:"https://www.searchapi.io/docs/google-news",children:"Google News"}),", ",(0,o.jsx)(n.a,{href:"https://www.searchapi.io/docs/google-scholar",children:"Google Scholar"}),", ",(0,o.jsx)(n.a,{href:"https://www.searchapi.io/docs/youtube-transcripts",children:"YouTube Transcripts"})," or any other engine that could be found in documentation.\nThis API enables developers and businesses to scrape and extract meaningful data directly from the result pages of all these search engines, providing valuable insights for different use-cases."]}),"\n",(0,o.jsxs)(n.p,{children:["This guide shows how to load web search results using the ",(0,o.jsx)(n.code,{children:"SearchApiLoader"})," in LangChain. The ",(0,o.jsx)(n.code,{children:"SearchApiLoader"})," simplifies the process of loading and processing web search results from SearchApi."]}),"\n",(0,o.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,o.jsxs)(n.p,{children:["You'll need to sign up and retrieve your ",(0,o.jsx)(n.a,{href:"https://www.searchapi.io/",children:"SearchApi API key"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsxs)(n.p,{children:["Here's an example of how to use the ",(0,o.jsx)(n.code,{children:"SearchApiLoader"}),":"]}),"\n","\n","\n",(0,o.jsx)(c.default,{}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @langchain/openai\n"})}),"\n",(0,o.jsx)(r.A,{language:"typescript",children:i()}),"\n",(0,o.jsxs)(n.p,{children:["In this example, the ",(0,o.jsx)(n.code,{children:"SearchApiLoader"})," is used to load web search results, which are then stored in memory using ",(0,o.jsx)(n.code,{children:"MemoryVectorStore"}),". A retrieval chain is then used to retrieve the most relevant documents from the memory and answer the question based on these documents. This demonstrates how the ",(0,o.jsx)(n.code,{children:"SearchApiLoader"})," can streamline the process of loading and processing web search results."]})]})}function g(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},78847:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var o=t(74848),s=t(28453);const r={},a=void 0,i={id:"mdx_components/integration_install_tooltip",title:"integration_install_tooltip",description:"See this section for general instructions on installing integration packages.",source:"@site/docs/mdx_components/integration_install_tooltip.mdx",sourceDirName:"mdx_components",slug:"/mdx_components/integration_install_tooltip",permalink:"/docs/mdx_components/integration_install_tooltip",draft:!1,unlisted:!1,editUrl:"https://langchainjs-kr.site/docs/mdx_components/integration_install_tooltip.mdx",tags:[],version:"current",frontMatter:{}},c={},l=[];function d(e){const n={a:"a",admonition:"admonition",p:"p",...(0,s.R)(),...e.components};return(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["See ",(0,o.jsx)(n.a,{href:"/docs/how_to/installation#installing-integration-packages",children:"this section for general instructions on installing integration packages"}),"."]})})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},27304:e=>{e.exports={content:'import { ChatOpenAI, OpenAIEmbeddings } from "@langchain/openai";\nimport { MemoryVectorStore } from "langchain/vectorstores/memory";\nimport { TokenTextSplitter } from "@langchain/textsplitters";\nimport { SearchApiLoader } from "langchain/document_loaders/web/searchapi";\nimport { ChatPromptTemplate } from "@langchain/core/prompts";\nimport { createStuffDocumentsChain } from "langchain/chains/combine_documents";\nimport { createRetrievalChain } from "langchain/chains/retrieval";\n\n// Initialize the necessary components\nconst llm = new ChatOpenAI({\n  model: "gpt-3.5-turbo-1106",\n});\nconst embeddings = new OpenAIEmbeddings();\nconst apiKey = "Your SearchApi API key";\n\n// Define your question and query\nconst question = "Your question here";\nconst query = "Your query here";\n\n// Use SearchApiLoader to load web search results\nconst loader = new SearchApiLoader({ q: query, apiKey, engine: "google" });\nconst docs = await loader.load();\n\nconst textSplitter = new TokenTextSplitter({\n  chunkSize: 800,\n  chunkOverlap: 100,\n});\n\nconst splitDocs = await textSplitter.splitDocuments(docs);\n\n// Use MemoryVectorStore to store the loaded documents in memory\nconst vectorStore = await MemoryVectorStore.fromDocuments(\n  splitDocs,\n  embeddings\n);\n\nconst questionAnsweringPrompt = ChatPromptTemplate.fromMessages([\n  [\n    "system",\n    "Answer the user\'s questions based on the below context:\\n\\n{context}",\n  ],\n  ["human", "{input}"],\n]);\n\nconst combineDocsChain = await createStuffDocumentsChain({\n  llm,\n  prompt: questionAnsweringPrompt,\n});\n\nconst chain = await createRetrievalChain({\n  retriever: vectorStore.asRetriever(),\n  combineDocsChain,\n});\n\nconst res = await chain.invoke({\n  input: question,\n});\n\nconsole.log(res.answer);\n',imports:[{local:"ChatOpenAI",imported:"ChatOpenAI",source:"@langchain/openai"},{local:"OpenAIEmbeddings",imported:"OpenAIEmbeddings",source:"@langchain/openai"},{local:"MemoryVectorStore",imported:"MemoryVectorStore",source:"langchain/vectorstores/memory"},{local:"TokenTextSplitter",imported:"TokenTextSplitter",source:"@langchain/textsplitters"},{local:"SearchApiLoader",imported:"SearchApiLoader",source:"langchain/document_loaders/web/searchapi"},{local:"ChatPromptTemplate",imported:"ChatPromptTemplate",source:"@langchain/core/prompts"},{local:"createStuffDocumentsChain",imported:"createStuffDocumentsChain",source:"langchain/chains/combine_documents"},{local:"createRetrievalChain",imported:"createRetrievalChain",source:"langchain/chains/retrieval"}]}}}]);